Ready!
<ref *1> Client {
  _events: [Object: null prototype] {
    shardDisconnect: [Function (anonymous)],
    voiceStateUpdate: [Function: bound _handleVoiceState],
    guildMemberAdd: [Function (anonymous)],
    message: [Function (anonymous)],
    ready: [Function (anonymous)]
  },
  _eventsCount: 5,
  _maxListeners: undefined,
  options: {
    intents: 643,
    waitGuildTimeout: 15000,
    shardCount: 1,
    makeCache: [Function (anonymous)],
    messageCacheLifetime: 0,
    messageSweepInterval: 0,
    invalidRequestWarningInterval: 0,
    partials: [],
    restWsBridgeTimeout: 5000,
    restRequestTimeout: 15000,
    restGlobalRateLimit: 0,
    retryLimit: 1,
    restTimeOffset: 500,
    restSweepInterval: 60,
    failIfNotExists: true,
    userAgentSuffix: [],
    presence: { status: 'online', user: [Object] },
    sweepers: {},
    ws: {
      large_threshold: 50,
      compress: false,
      properties: [Object],
      version: 9,
      presence: [Object]
    },
    http: {
      agent: {},
      version: 9,
      api: 'https://discord.com/api',
      cdn: 'https://cdn.discordapp.com',
      invite: 'https://discord.gg',
      template: 'https://discord.new',
      scheduledEvent: 'https://discord.com/events'
    },
    shards: [ 0 ]
  },
  rest: RESTManager {
    client: [Circular *1],
    handlers: Collection(0) [Map] {},
    versioned: true,
    globalLimit: Infinity,
    globalRemaining: Infinity,
    globalReset: 1645581023690,
    globalDelay: null,
    sweepInterval: Timeout {
      _idleTimeout: 60000,
      _idlePrev: [Timeout],
      _idleNext: [TimersList],
      _idleStart: 242547,
      _onTimeout: [Function (anonymous)],
      _timerArgs: undefined,
      _repeat: 60000,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(kHasPrimitive)]: false,
      [Symbol(asyncId)]: 12,
      [Symbol(triggerId)]: 1
    }
  },
  _cleanups: Set(50) {
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ]
  },
  _finalizers: FinalizationRegistry {},
  ws: WebSocketManager {
    _events: [Object: null prototype] {},
    _eventsCount: 0,
    _maxListeners: undefined,
    gateway: 'wss://gateway.discord.gg/',
    totalShards: 1,
    shards: Collection(1) [Map] { 0 => [WebSocketShard] },
    status: 0,
    destroyed: false,
    reconnecting: false,
    [Symbol(kCapture)]: false
  },
  actions: ActionsManager {
    client: [Circular *1],
    ChannelCreate: ChannelCreateAction { client: [Circular *1] },
    ChannelDelete: ChannelDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    ChannelUpdate: ChannelUpdateAction { client: [Circular *1] },
    GuildBanAdd: GuildBanAdd { client: [Circular *1] },
    GuildBanRemove: GuildBanRemove { client: [Circular *1] },
    GuildChannelsPositionUpdate: GuildChannelsPositionUpdate { client: [Circular *1] },
    GuildDelete: GuildDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    GuildEmojiCreate: GuildEmojiCreateAction { client: [Circular *1] },
    GuildEmojiDelete: GuildEmojiDeleteAction { client: [Circular *1] },
    GuildEmojiUpdate: GuildEmojiUpdateAction { client: [Circular *1] },
    GuildEmojisUpdate: GuildEmojisUpdateAction { client: [Circular *1] },
    GuildIntegrationsUpdate: GuildIntegrationsUpdate { client: [Circular *1] },
    GuildMemberRemove: GuildMemberRemoveAction { client: [Circular *1] },
    GuildMemberUpdate: GuildMemberUpdateAction { client: [Circular *1] },
    GuildRoleCreate: GuildRoleCreate { client: [Circular *1] },
    GuildRoleDelete: GuildRoleDeleteAction { client: [Circular *1] },
    GuildRoleUpdate: GuildRoleUpdateAction { client: [Circular *1] },
    GuildRolesPositionUpdate: GuildRolesPositionUpdate { client: [Circular *1] },
    GuildScheduledEventCreate: GuildScheduledEventCreateAction { client: [Circular *1] },
    GuildScheduledEventDelete: GuildScheduledEventDeleteAction { client: [Circular *1] },
    GuildScheduledEventUpdate: GuildScheduledEventUpdateAction { client: [Circular *1] },
    GuildScheduledEventUserAdd: GuildScheduledEventUserAddAction { client: [Circular *1] },
    GuildScheduledEventUserRemove: GuildScheduledEventUserRemoveAction { client: [Circular *1] },
    GuildStickerCreate: GuildStickerCreateAction { client: [Circular *1] },
    GuildStickerDelete: GuildStickerDeleteAction { client: [Circular *1] },
    GuildStickerUpdate: GuildStickerUpdateAction { client: [Circular *1] },
    GuildStickersUpdate: GuildStickersUpdateAction { client: [Circular *1] },
    GuildUpdate: GuildUpdateAction { client: [Circular *1] },
    InteractionCreate: InteractionCreateAction { client: [Circular *1] },
    InviteCreate: InviteCreateAction { client: [Circular *1] },
    InviteDelete: InviteDeleteAction { client: [Circular *1] },
    MessageCreate: MessageCreateAction { client: [Circular *1] },
    MessageDelete: MessageDeleteAction { client: [Circular *1] },
    MessageDeleteBulk: MessageDeleteBulkAction { client: [Circular *1] },
    MessageReactionAdd: MessageReactionAdd { client: [Circular *1] },
    MessageReactionRemove: MessageReactionRemove { client: [Circular *1] },
    MessageReactionRemoveAll: MessageReactionRemoveAll { client: [Circular *1] },
    MessageReactionRemoveEmoji: MessageReactionRemoveEmoji { client: [Circular *1] },
    MessageUpdate: MessageUpdateAction { client: [Circular *1] },
    PresenceUpdate: PresenceUpdateAction { client: [Circular *1] },
    StageInstanceCreate: StageInstanceCreateAction { client: [Circular *1] },
    StageInstanceDelete: StageInstanceDeleteAction { client: [Circular *1] },
    StageInstanceUpdate: StageInstanceUpdateAction { client: [Circular *1] },
    ThreadCreate: ThreadCreateAction { client: [Circular *1] },
    ThreadDelete: ThreadDeleteAction { client: [Circular *1] },
    ThreadListSync: ThreadListSyncAction { client: [Circular *1] },
    ThreadMemberUpdate: ThreadMemberUpdateAction { client: [Circular *1] },
    ThreadMembersUpdate: ThreadMembersUpdateAction { client: [Circular *1] },
    TypingStart: TypingStart { client: [Circular *1] },
    UserUpdate: UserUpdateAction { client: [Circular *1] },
    VoiceStateUpdate: VoiceStateUpdate { client: [Circular *1] },
    WebhooksUpdate: WebhooksUpdate { client: [Circular *1] }
  },
  voice: ClientVoiceManager { adapters: Map(0) {} },
  shard: null,
  users: UserManager {},
  guilds: GuildManager {},
  channels: ChannelManager {},
  sweepers: Sweepers {
    options: {},
    intervals: {
      applicationCommands: null,
      bans: null,
      emojis: null,
      invites: null,
      guildMembers: null,
      messages: null,
      presences: null,
      reactions: null,
      stageInstances: null,
      stickers: null,
      threadMembers: null,
      threads: null,
      users: null,
      voiceStates: null
    }
  },
  presence: ClientPresence {
    userId: null,
    guild: null,
    status: 'online',
    activities: [],
    clientStatus: null
  },
  user: ClientUser {
    id: '894060283373449317',
    bot: true,
    system: false,
    flags: UserFlags { bitfield: 0 },
    username: 'Potato bot',
    discriminator: '1627',
    avatar: 'f169fbb08deede7893419429cf1bc9ab',
    banner: null,
    accentColor: null,
    verified: true,
    mfaEnabled: false
  },
  application: ClientApplication {
    id: '894060283373449317',
    name: null,
    description: null,
    icon: null,
    flags: ApplicationFlags { bitfield: 303104 },
    cover: null,
    rpcOrigins: [],
    botRequireCodeGrant: null,
    botPublic: null,
    owner: null,
    commands: ApplicationCommandManager {
      permissions: [ApplicationCommandPermissionsManager]
    }
  },
  readyAt: 2022-02-23T01:47:22.497Z,
  eco: EconomyManager {
    noNegative: undefined,
    prefix: undefined,
    adapter: { name: 'sqlite', options: undefined },
    db: SqliteManager {
      table: 'money',
      filename: 'eco',
      sqliteOptions: {},
      hasInit: true,
      db: [Database]
    }
  },
  db: table {
    tableName: 'inv',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  config: {
    token: 'ODk0MDYwMjgzMzczNDQ5MzE3.YVkghg.ik3wBzG3rjGWnsQ_o3S5edt12fM',
    prefix: 'potat',
    admins: [
      '709950767670493275',
      '879207914005479514',
      '829171854681964604'
    ],
    debug: true,
    countChannel: '',
    opt: {
      DJ: [Object],
      maxVol: 250,
      loopMessage: false,
      discordPlayer: [Object]
    }
  },
  shop: { laptop: { cost: 1000 }, potato: { cost: 1 } },
  job: table {
    tableName: 'job',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  commands: Collection(50) [Map] {
    'addmoney' => {
      name: 'addmoney',
      aliases: [Array],
      usage: 'addmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'bal' => {
      name: 'bal',
      aliases: [Array],
      usage: 'bal',
      execute: [AsyncFunction: execute]
    },
    'beg' => {
      name: 'beg',
      aliases: [],
      usage: 'beg',
      execute: [AsyncFunction: execute]
    },
    'buy' => {
      name: 'buy',
      aliases: [],
      usage: 'buy <item>',
      execute: [AsyncFunction: execute]
    },
    'daily' => {
      name: 'daily',
      aliases: [],
      usage: 'daily',
      execute: [AsyncFunction: execute]
    },
    'inventory' => {
      name: 'inventory',
      aliases: [Array],
      usage: 'inv',
      execute: [AsyncFunction: execute]
    },
    'lb' => {
      name: 'lb',
      aliases: [Array],
      usage: 'leaderboard',
      execute: [AsyncFunction: execute]
    },
    'search' => {
      name: 'search',
      aliases: [],
      utilisation: 'search [song name]',
      execute: [AsyncFunction: execute]
    },
    'setmoney' => {
      name: 'setmoney',
      usage: 'setmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'transfer' => {
      name: 'transfer',
      aliases: [Array],
      usage: 'transfer <member> <amount>',
      execute: [AsyncFunction: execute]
    },
    'weekly' => {
      name: 'weekly',
      usage: 'weekly',
      execute: [AsyncFunction: execute]
    },
    'work' => {
      name: 'work',
      aliases: [],
      usage: 'work',
      cooldown: 3600,
      execute: [Function: execute]
    },
    'say' => {
      name: 'say',
      aliases: [Array],
      description: 'make the bot repeat what you said',
      execute: [Function: execute]
    },
    'sayembed' => {
      name: 'sayembed',
      description: 'say something embed',
      usage: '<title, description>',
      execute: [Function: execute]
    },
    'train' => {
      name: 'train',
      description: 'random thing idk',
      execute: [Function: execute]
    },
    'fasttype' => {
      name: 'fasttype',
      description: 'type fast',
      execute: [AsyncFunction: execute]
    },
    'games' => {
      name: 'games',
      description: 'play some games',
      execute: [Function: execute]
    },
    'settings' => { name: 'settings', execute: [Function: execute] },
    'slots' => {
      name: 'slots',
      description: 'play some games',
      execute: [Function: execute]
    },
    'tictactoe' => {
      name: 'tictactoe',
      description: 'play tictactoe!',
      expectedArgs: '<opponent>',
      minArgs: 1,
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'addfakemember' => { name: 'addfakemember', execute: [Function: execute] },
    'change_status' => { name: 'change_status', execute: [Function: execute] },
    'dev' => {
      name: 'dev',
      description: 'be a dev by completing a form!',
      execute: [AsyncFunction: execute]
    },
    'help' => {
      name: 'help',
      aliases: [Array],
      description: 'List all of my commands or info about a specific command.',
      usage: '[command name]',
      cooldown: 5,
      execute: [Function: execute]
    },
    'ping' => {
      name: 'ping',
      description: 'Ping!',
      execute: [Function: execute]
    },
    'poll' => {
      name: 'poll',
      description: 'poll',
      usage: 'Title + Option 1 + Option 2 + Option 3 + etc',
      execute: [Function: execute]
    },
    'server' => {
      name: 'server',
      aliases: [Array],
      description: 'servers info...',
      cooldown: 5,
      guildOnly: true,
      args: false,
      execute: [Function: execute]
    },
    'suggest' => {
      name: 'suggest',
      description: 'suggest',
      usage: '<suggestion>',
      execute: [Function: execute]
    },
    'ban' => {
      name: 'ban',
      description: 'This command bans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'giverole' => {
      name: 'giverole',
      description: 'give someone a role',
      permission: 'MANAGE_MEMBERS',
      guildOnly: true,
      execute: [Function: execute]
    },
    'kick' => {
      name: 'kick',
      permissions: 'KICK_MEMBERS',
      description: 'this command kicks a member',
      execute: [Function: execute]
    },
    'mute' => {
      name: 'mute',
      description: 'mute someone',
      permissions: 'MANAGE_MESSAGES',
      guildOnly: true,
      execute: [Function: execute]
    },
    'reload' => {
      name: 'reload',
      description: 'Reloads a command',
      args: true,
      execute: [Function: execute]
    },
    'removerole' => {
      name: 'removerole',
      description: "remove someone's role",
      execute: [Function: execute]
    },
    'unban' => {
      name: 'unban',
      description: 'This command unbans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'back' => { name: 'back', aliases: [], execute: [AsyncFunction: execute] },
    'clear' => { name: 'clear', aliases: [], execute: [AsyncFunction: execute] },
    'filter' => {
      name: 'filter',
      aliases: [],
      usage: 'filter [filter name]',
      execute: [AsyncFunction: execute]
    },
    'loop' => {
      name: 'loop',
      aliases: [],
      usage: 'loop [song|queue]',
      execute: [Function: execute]
    },
    'nowplaying' => {
      name: 'nowplaying',
      aliases: [Array],
      execute: [Function: execute]
    },
    'pause' => { name: 'pause', aliases: [], execute: [Function: execute] },
    'play' => {
      name: 'play',
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'progress' => {
      name: 'progress',
      aliases: [Array],
      utilisation: 'progress',
      voiceChannel: true,
      execute: [AsyncFunction: execute]
    },
    'queue' => {
      name: 'queue',
      aliases: [Array],
      utilisation: '{prefix}queue',
      voiceChannel: true,
      execute: [Function: execute]
    },
    'remove' => { name: 'remove', aliases: [], execute: [AsyncFunction: execute] },
    'resume' => { name: 'resume', aliases: [], execute: [Function: execute] },
    'save' => { name: 'save', aliases: [], execute: [AsyncFunction: execute] },
    'skip' => { name: 'skip', aliases: [Array], execute: [Function: execute] },
    'stop' => { name: 'stop', aliases: [Array], execute: [Function: execute] },
    'volume' => {
      name: 'volume',
      aliases: [Array],
      utilisation: 'volume [1-250]',
      voiceChannel: true,
      execute: [Function: execute]
    }
  },
  cooldowns: Collection(2) [Map] {
    'ping' => Collection(0) [Map] {},
    'play' => Collection(1) [Map] { '709950767670493275' => 1645581116509 }
  },
  player: Player {
    _events: [Object: null prototype] {
      error: [Function (anonymous)],
      connectionError: [Function (anonymous)],
      trackStart: [Function (anonymous)],
      trackAdd: [Function (anonymous)],
      botDisconnect: [Function (anonymous)],
      channelEmpty: [Function (anonymous)],
      queueEnd: [Function (anonymous)]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    options: {
      autoRegisterExtractor: true,
      ytdlOptions: [Object],
      connectionTimeout: 20000
    },
    queues: Collection(0) [Map] {},
    voiceUtils: VoiceUtils { cache: Collection(0) [Map] {} },
    extractors: Collection(0) [Map] {},
    requiredEvents: [ 'error', 'connectionError' ],
    client: [Circular *1],
    [Symbol(kCapture)]: false
  },
  [Symbol(kCapture)]: false
}
<ref *1> Client {
  _events: [Object: null prototype] {
    shardDisconnect: [Function (anonymous)],
    voiceStateUpdate: [Function: bound _handleVoiceState],
    guildMemberAdd: [Function (anonymous)],
    message: [Function (anonymous)],
    ready: [Function (anonymous)]
  },
  _eventsCount: 5,
  _maxListeners: undefined,
  options: {
    intents: 643,
    waitGuildTimeout: 15000,
    shardCount: 1,
    makeCache: [Function (anonymous)],
    messageCacheLifetime: 0,
    messageSweepInterval: 0,
    invalidRequestWarningInterval: 0,
    partials: [],
    restWsBridgeTimeout: 5000,
    restRequestTimeout: 15000,
    restGlobalRateLimit: 0,
    retryLimit: 1,
    restTimeOffset: 500,
    restSweepInterval: 60,
    failIfNotExists: true,
    userAgentSuffix: [],
    presence: { status: 'online', user: [Object] },
    sweepers: {},
    ws: {
      large_threshold: 50,
      compress: false,
      properties: [Object],
      version: 9,
      presence: [Object]
    },
    http: {
      agent: {},
      version: 9,
      api: 'https://discord.com/api',
      cdn: 'https://cdn.discordapp.com',
      invite: 'https://discord.gg',
      template: 'https://discord.new',
      scheduledEvent: 'https://discord.com/events'
    },
    shards: [ 0 ]
  },
  rest: RESTManager {
    client: [Circular *1],
    handlers: Collection(1) [Map] {
      '/channels/894764535892819988/messages' => [RequestHandler]
    },
    versioned: true,
    globalLimit: Infinity,
    globalRemaining: Infinity,
    globalReset: 1645581124972,
    globalDelay: null,
    sweepInterval: Timeout {
      _idleTimeout: 60000,
      _idlePrev: [Timeout],
      _idleNext: [TimersList],
      _idleStart: 242547,
      _onTimeout: [Function (anonymous)],
      _timerArgs: undefined,
      _repeat: 60000,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(kHasPrimitive)]: false,
      [Symbol(asyncId)]: 12,
      [Symbol(triggerId)]: 1
    }
  },
  _cleanups: Set(50) {
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ]
  },
  _finalizers: FinalizationRegistry {},
  ws: WebSocketManager {
    _events: [Object: null prototype] {},
    _eventsCount: 0,
    _maxListeners: undefined,
    gateway: 'wss://gateway.discord.gg/',
    totalShards: 1,
    shards: Collection(1) [Map] { 0 => [WebSocketShard] },
    status: 0,
    destroyed: false,
    reconnecting: false,
    [Symbol(kCapture)]: false
  },
  actions: ActionsManager {
    client: [Circular *1],
    ChannelCreate: ChannelCreateAction { client: [Circular *1] },
    ChannelDelete: ChannelDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    ChannelUpdate: ChannelUpdateAction { client: [Circular *1] },
    GuildBanAdd: GuildBanAdd { client: [Circular *1] },
    GuildBanRemove: GuildBanRemove { client: [Circular *1] },
    GuildChannelsPositionUpdate: GuildChannelsPositionUpdate { client: [Circular *1] },
    GuildDelete: GuildDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    GuildEmojiCreate: GuildEmojiCreateAction { client: [Circular *1] },
    GuildEmojiDelete: GuildEmojiDeleteAction { client: [Circular *1] },
    GuildEmojiUpdate: GuildEmojiUpdateAction { client: [Circular *1] },
    GuildEmojisUpdate: GuildEmojisUpdateAction { client: [Circular *1] },
    GuildIntegrationsUpdate: GuildIntegrationsUpdate { client: [Circular *1] },
    GuildMemberRemove: GuildMemberRemoveAction { client: [Circular *1] },
    GuildMemberUpdate: GuildMemberUpdateAction { client: [Circular *1] },
    GuildRoleCreate: GuildRoleCreate { client: [Circular *1] },
    GuildRoleDelete: GuildRoleDeleteAction { client: [Circular *1] },
    GuildRoleUpdate: GuildRoleUpdateAction { client: [Circular *1] },
    GuildRolesPositionUpdate: GuildRolesPositionUpdate { client: [Circular *1] },
    GuildScheduledEventCreate: GuildScheduledEventCreateAction { client: [Circular *1] },
    GuildScheduledEventDelete: GuildScheduledEventDeleteAction { client: [Circular *1] },
    GuildScheduledEventUpdate: GuildScheduledEventUpdateAction { client: [Circular *1] },
    GuildScheduledEventUserAdd: GuildScheduledEventUserAddAction { client: [Circular *1] },
    GuildScheduledEventUserRemove: GuildScheduledEventUserRemoveAction { client: [Circular *1] },
    GuildStickerCreate: GuildStickerCreateAction { client: [Circular *1] },
    GuildStickerDelete: GuildStickerDeleteAction { client: [Circular *1] },
    GuildStickerUpdate: GuildStickerUpdateAction { client: [Circular *1] },
    GuildStickersUpdate: GuildStickersUpdateAction { client: [Circular *1] },
    GuildUpdate: GuildUpdateAction { client: [Circular *1] },
    InteractionCreate: InteractionCreateAction { client: [Circular *1] },
    InviteCreate: InviteCreateAction { client: [Circular *1] },
    InviteDelete: InviteDeleteAction { client: [Circular *1] },
    MessageCreate: MessageCreateAction { client: [Circular *1] },
    MessageDelete: MessageDeleteAction { client: [Circular *1] },
    MessageDeleteBulk: MessageDeleteBulkAction { client: [Circular *1] },
    MessageReactionAdd: MessageReactionAdd { client: [Circular *1] },
    MessageReactionRemove: MessageReactionRemove { client: [Circular *1] },
    MessageReactionRemoveAll: MessageReactionRemoveAll { client: [Circular *1] },
    MessageReactionRemoveEmoji: MessageReactionRemoveEmoji { client: [Circular *1] },
    MessageUpdate: MessageUpdateAction { client: [Circular *1] },
    PresenceUpdate: PresenceUpdateAction { client: [Circular *1] },
    StageInstanceCreate: StageInstanceCreateAction { client: [Circular *1] },
    StageInstanceDelete: StageInstanceDeleteAction { client: [Circular *1] },
    StageInstanceUpdate: StageInstanceUpdateAction { client: [Circular *1] },
    ThreadCreate: ThreadCreateAction { client: [Circular *1] },
    ThreadDelete: ThreadDeleteAction { client: [Circular *1] },
    ThreadListSync: ThreadListSyncAction { client: [Circular *1] },
    ThreadMemberUpdate: ThreadMemberUpdateAction { client: [Circular *1] },
    ThreadMembersUpdate: ThreadMembersUpdateAction { client: [Circular *1] },
    TypingStart: TypingStart { client: [Circular *1] },
    UserUpdate: UserUpdateAction { client: [Circular *1] },
    VoiceStateUpdate: VoiceStateUpdate { client: [Circular *1] },
    WebhooksUpdate: WebhooksUpdate { client: [Circular *1] }
  },
  voice: ClientVoiceManager {
    adapters: Map(1) { '893532780946919536' => [Object] }
  },
  shard: null,
  users: UserManager {},
  guilds: GuildManager {},
  channels: ChannelManager {},
  sweepers: Sweepers {
    options: {},
    intervals: {
      applicationCommands: null,
      bans: null,
      emojis: null,
      invites: null,
      guildMembers: null,
      messages: null,
      presences: null,
      reactions: null,
      stageInstances: null,
      stickers: null,
      threadMembers: null,
      threads: null,
      users: null,
      voiceStates: null
    }
  },
  presence: ClientPresence {
    userId: null,
    guild: null,
    status: 'online',
    activities: [],
    clientStatus: null
  },
  user: ClientUser {
    id: '894060283373449317',
    bot: true,
    system: false,
    flags: UserFlags { bitfield: 0 },
    username: 'Potato bot',
    discriminator: '1627',
    avatar: 'f169fbb08deede7893419429cf1bc9ab',
    banner: null,
    accentColor: null,
    verified: true,
    mfaEnabled: false
  },
  application: ClientApplication {
    id: '894060283373449317',
    name: null,
    description: null,
    icon: null,
    flags: ApplicationFlags { bitfield: 303104 },
    cover: null,
    rpcOrigins: [],
    botRequireCodeGrant: null,
    botPublic: null,
    owner: null,
    commands: ApplicationCommandManager {
      permissions: [ApplicationCommandPermissionsManager]
    }
  },
  readyAt: 2022-02-23T01:47:22.497Z,
  eco: EconomyManager {
    noNegative: undefined,
    prefix: undefined,
    adapter: { name: 'sqlite', options: undefined },
    db: SqliteManager {
      table: 'money',
      filename: 'eco',
      sqliteOptions: {},
      hasInit: true,
      db: [Database]
    }
  },
  db: table {
    tableName: 'inv',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  config: {
    token: 'ODk0MDYwMjgzMzczNDQ5MzE3.YVkghg.ik3wBzG3rjGWnsQ_o3S5edt12fM',
    prefix: 'potat',
    admins: [
      '709950767670493275',
      '879207914005479514',
      '829171854681964604'
    ],
    debug: true,
    countChannel: '',
    opt: {
      DJ: [Object],
      maxVol: 250,
      loopMessage: false,
      discordPlayer: [Object]
    }
  },
  shop: { laptop: { cost: 1000 }, potato: { cost: 1 } },
  job: table {
    tableName: 'job',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  commands: Collection(50) [Map] {
    'addmoney' => {
      name: 'addmoney',
      aliases: [Array],
      usage: 'addmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'bal' => {
      name: 'bal',
      aliases: [Array],
      usage: 'bal',
      execute: [AsyncFunction: execute]
    },
    'beg' => {
      name: 'beg',
      aliases: [],
      usage: 'beg',
      execute: [AsyncFunction: execute]
    },
    'buy' => {
      name: 'buy',
      aliases: [],
      usage: 'buy <item>',
      execute: [AsyncFunction: execute]
    },
    'daily' => {
      name: 'daily',
      aliases: [],
      usage: 'daily',
      execute: [AsyncFunction: execute]
    },
    'inventory' => {
      name: 'inventory',
      aliases: [Array],
      usage: 'inv',
      execute: [AsyncFunction: execute]
    },
    'lb' => {
      name: 'lb',
      aliases: [Array],
      usage: 'leaderboard',
      execute: [AsyncFunction: execute]
    },
    'search' => {
      name: 'search',
      aliases: [],
      utilisation: 'search [song name]',
      execute: [AsyncFunction: execute]
    },
    'setmoney' => {
      name: 'setmoney',
      usage: 'setmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'transfer' => {
      name: 'transfer',
      aliases: [Array],
      usage: 'transfer <member> <amount>',
      execute: [AsyncFunction: execute]
    },
    'weekly' => {
      name: 'weekly',
      usage: 'weekly',
      execute: [AsyncFunction: execute]
    },
    'work' => {
      name: 'work',
      aliases: [],
      usage: 'work',
      cooldown: 3600,
      execute: [Function: execute]
    },
    'say' => {
      name: 'say',
      aliases: [Array],
      description: 'make the bot repeat what you said',
      execute: [Function: execute]
    },
    'sayembed' => {
      name: 'sayembed',
      description: 'say something embed',
      usage: '<title, description>',
      execute: [Function: execute]
    },
    'train' => {
      name: 'train',
      description: 'random thing idk',
      execute: [Function: execute]
    },
    'fasttype' => {
      name: 'fasttype',
      description: 'type fast',
      execute: [AsyncFunction: execute]
    },
    'games' => {
      name: 'games',
      description: 'play some games',
      execute: [Function: execute]
    },
    'settings' => { name: 'settings', execute: [Function: execute] },
    'slots' => {
      name: 'slots',
      description: 'play some games',
      execute: [Function: execute]
    },
    'tictactoe' => {
      name: 'tictactoe',
      description: 'play tictactoe!',
      expectedArgs: '<opponent>',
      minArgs: 1,
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'addfakemember' => { name: 'addfakemember', execute: [Function: execute] },
    'change_status' => { name: 'change_status', execute: [Function: execute] },
    'dev' => {
      name: 'dev',
      description: 'be a dev by completing a form!',
      execute: [AsyncFunction: execute]
    },
    'help' => {
      name: 'help',
      aliases: [Array],
      description: 'List all of my commands or info about a specific command.',
      usage: '[command name]',
      cooldown: 5,
      execute: [Function: execute]
    },
    'ping' => {
      name: 'ping',
      description: 'Ping!',
      execute: [Function: execute]
    },
    'poll' => {
      name: 'poll',
      description: 'poll',
      usage: 'Title + Option 1 + Option 2 + Option 3 + etc',
      execute: [Function: execute]
    },
    'server' => {
      name: 'server',
      aliases: [Array],
      description: 'servers info...',
      cooldown: 5,
      guildOnly: true,
      args: false,
      execute: [Function: execute]
    },
    'suggest' => {
      name: 'suggest',
      description: 'suggest',
      usage: '<suggestion>',
      execute: [Function: execute]
    },
    'ban' => {
      name: 'ban',
      description: 'This command bans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'giverole' => {
      name: 'giverole',
      description: 'give someone a role',
      permission: 'MANAGE_MEMBERS',
      guildOnly: true,
      execute: [Function: execute]
    },
    'kick' => {
      name: 'kick',
      permissions: 'KICK_MEMBERS',
      description: 'this command kicks a member',
      execute: [Function: execute]
    },
    'mute' => {
      name: 'mute',
      description: 'mute someone',
      permissions: 'MANAGE_MESSAGES',
      guildOnly: true,
      execute: [Function: execute]
    },
    'reload' => {
      name: 'reload',
      description: 'Reloads a command',
      args: true,
      execute: [Function: execute]
    },
    'removerole' => {
      name: 'removerole',
      description: "remove someone's role",
      execute: [Function: execute]
    },
    'unban' => {
      name: 'unban',
      description: 'This command unbans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'back' => { name: 'back', aliases: [], execute: [AsyncFunction: execute] },
    'clear' => { name: 'clear', aliases: [], execute: [AsyncFunction: execute] },
    'filter' => {
      name: 'filter',
      aliases: [],
      usage: 'filter [filter name]',
      execute: [AsyncFunction: execute]
    },
    'loop' => {
      name: 'loop',
      aliases: [],
      usage: 'loop [song|queue]',
      execute: [Function: execute]
    },
    'nowplaying' => {
      name: 'nowplaying',
      aliases: [Array],
      execute: [Function: execute]
    },
    'pause' => { name: 'pause', aliases: [], execute: [Function: execute] },
    'play' => {
      name: 'play',
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'progress' => {
      name: 'progress',
      aliases: [Array],
      utilisation: 'progress',
      voiceChannel: true,
      execute: [AsyncFunction: execute]
    },
    'queue' => {
      name: 'queue',
      aliases: [Array],
      utilisation: '{prefix}queue',
      voiceChannel: true,
      execute: [Function: execute]
    },
    'remove' => { name: 'remove', aliases: [], execute: [AsyncFunction: execute] },
    'resume' => { name: 'resume', aliases: [], execute: [Function: execute] },
    'save' => { name: 'save', aliases: [], execute: [AsyncFunction: execute] },
    'skip' => { name: 'skip', aliases: [Array], execute: [Function: execute] },
    'stop' => { name: 'stop', aliases: [Array], execute: [Function: execute] },
    'volume' => {
      name: 'volume',
      aliases: [Array],
      utilisation: 'volume [1-250]',
      voiceChannel: true,
      execute: [Function: execute]
    }
  },
  cooldowns: Collection(2) [Map] {
    'ping' => Collection(0) [Map] {},
    'play' => Collection(1) [Map] { '709950767670493275' => 1645581129364 }
  },
  player: Player {
    _events: [Object: null prototype] {
      error: [Function (anonymous)],
      connectionError: [Function (anonymous)],
      trackStart: [Function (anonymous)],
      trackAdd: [Function (anonymous)],
      botDisconnect: [Function (anonymous)],
      channelEmpty: [Function (anonymous)],
      queueEnd: [Function (anonymous)]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    options: {
      autoRegisterExtractor: true,
      ytdlOptions: [Object],
      connectionTimeout: 20000
    },
    queues: Collection(1) [Map] { '893532780946919536' => [Queue] },
    voiceUtils: VoiceUtils { cache: [Collection [Map]] },
    extractors: Collection(0) [Map] {},
    requiredEvents: [ 'error', 'connectionError' ],
    client: [Circular *1],
    [Symbol(kCapture)]: false
  },
  [Symbol(kCapture)]: false
}
<ref *1> Client {
  _events: [Object: null prototype] {
    shardDisconnect: [Function (anonymous)],
    voiceStateUpdate: [Function: bound _handleVoiceState],
    guildMemberAdd: [Function (anonymous)],
    message: [Function (anonymous)],
    ready: [Function (anonymous)]
  },
  _eventsCount: 5,
  _maxListeners: undefined,
  options: {
    intents: 643,
    waitGuildTimeout: 15000,
    shardCount: 1,
    makeCache: [Function (anonymous)],
    messageCacheLifetime: 0,
    messageSweepInterval: 0,
    invalidRequestWarningInterval: 0,
    partials: [],
    restWsBridgeTimeout: 5000,
    restRequestTimeout: 15000,
    restGlobalRateLimit: 0,
    retryLimit: 1,
    restTimeOffset: 500,
    restSweepInterval: 60,
    failIfNotExists: true,
    userAgentSuffix: [],
    presence: { status: 'online', user: [Object] },
    sweepers: {},
    ws: {
      large_threshold: 50,
      compress: false,
      properties: [Object],
      version: 9,
      presence: [Object]
    },
    http: {
      agent: {},
      version: 9,
      api: 'https://discord.com/api',
      cdn: 'https://cdn.discordapp.com',
      invite: 'https://discord.gg',
      template: 'https://discord.new',
      scheduledEvent: 'https://discord.com/events'
    },
    shards: [ 0 ]
  },
  rest: RESTManager {
    client: [Circular *1],
    handlers: Collection(0) [Map] {},
    versioned: true,
    globalLimit: Infinity,
    globalRemaining: Infinity,
    globalReset: 1645581135139,
    globalDelay: null,
    sweepInterval: Timeout {
      _idleTimeout: 60000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 302556,
      _onTimeout: [Function (anonymous)],
      _timerArgs: undefined,
      _repeat: 60000,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(kHasPrimitive)]: false,
      [Symbol(asyncId)]: 12,
      [Symbol(triggerId)]: 1
    }
  },
  _cleanups: Set(50) {
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ]
  },
  _finalizers: FinalizationRegistry {},
  ws: WebSocketManager {
    _events: [Object: null prototype] {},
    _eventsCount: 0,
    _maxListeners: undefined,
    gateway: 'wss://gateway.discord.gg/',
    totalShards: 1,
    shards: Collection(1) [Map] { 0 => [WebSocketShard] },
    status: 0,
    destroyed: false,
    reconnecting: false,
    [Symbol(kCapture)]: false
  },
  actions: ActionsManager {
    client: [Circular *1],
    ChannelCreate: ChannelCreateAction { client: [Circular *1] },
    ChannelDelete: ChannelDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    ChannelUpdate: ChannelUpdateAction { client: [Circular *1] },
    GuildBanAdd: GuildBanAdd { client: [Circular *1] },
    GuildBanRemove: GuildBanRemove { client: [Circular *1] },
    GuildChannelsPositionUpdate: GuildChannelsPositionUpdate { client: [Circular *1] },
    GuildDelete: GuildDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    GuildEmojiCreate: GuildEmojiCreateAction { client: [Circular *1] },
    GuildEmojiDelete: GuildEmojiDeleteAction { client: [Circular *1] },
    GuildEmojiUpdate: GuildEmojiUpdateAction { client: [Circular *1] },
    GuildEmojisUpdate: GuildEmojisUpdateAction { client: [Circular *1] },
    GuildIntegrationsUpdate: GuildIntegrationsUpdate { client: [Circular *1] },
    GuildMemberRemove: GuildMemberRemoveAction { client: [Circular *1] },
    GuildMemberUpdate: GuildMemberUpdateAction { client: [Circular *1] },
    GuildRoleCreate: GuildRoleCreate { client: [Circular *1] },
    GuildRoleDelete: GuildRoleDeleteAction { client: [Circular *1] },
    GuildRoleUpdate: GuildRoleUpdateAction { client: [Circular *1] },
    GuildRolesPositionUpdate: GuildRolesPositionUpdate { client: [Circular *1] },
    GuildScheduledEventCreate: GuildScheduledEventCreateAction { client: [Circular *1] },
    GuildScheduledEventDelete: GuildScheduledEventDeleteAction { client: [Circular *1] },
    GuildScheduledEventUpdate: GuildScheduledEventUpdateAction { client: [Circular *1] },
    GuildScheduledEventUserAdd: GuildScheduledEventUserAddAction { client: [Circular *1] },
    GuildScheduledEventUserRemove: GuildScheduledEventUserRemoveAction { client: [Circular *1] },
    GuildStickerCreate: GuildStickerCreateAction { client: [Circular *1] },
    GuildStickerDelete: GuildStickerDeleteAction { client: [Circular *1] },
    GuildStickerUpdate: GuildStickerUpdateAction { client: [Circular *1] },
    GuildStickersUpdate: GuildStickersUpdateAction { client: [Circular *1] },
    GuildUpdate: GuildUpdateAction { client: [Circular *1] },
    InteractionCreate: InteractionCreateAction { client: [Circular *1] },
    InviteCreate: InviteCreateAction { client: [Circular *1] },
    InviteDelete: InviteDeleteAction { client: [Circular *1] },
    MessageCreate: MessageCreateAction { client: [Circular *1] },
    MessageDelete: MessageDeleteAction { client: [Circular *1] },
    MessageDeleteBulk: MessageDeleteBulkAction { client: [Circular *1] },
    MessageReactionAdd: MessageReactionAdd { client: [Circular *1] },
    MessageReactionRemove: MessageReactionRemove { client: [Circular *1] },
    MessageReactionRemoveAll: MessageReactionRemoveAll { client: [Circular *1] },
    MessageReactionRemoveEmoji: MessageReactionRemoveEmoji { client: [Circular *1] },
    MessageUpdate: MessageUpdateAction { client: [Circular *1] },
    PresenceUpdate: PresenceUpdateAction { client: [Circular *1] },
    StageInstanceCreate: StageInstanceCreateAction { client: [Circular *1] },
    StageInstanceDelete: StageInstanceDeleteAction { client: [Circular *1] },
    StageInstanceUpdate: StageInstanceUpdateAction { client: [Circular *1] },
    ThreadCreate: ThreadCreateAction { client: [Circular *1] },
    ThreadDelete: ThreadDeleteAction { client: [Circular *1] },
    ThreadListSync: ThreadListSyncAction { client: [Circular *1] },
    ThreadMemberUpdate: ThreadMemberUpdateAction { client: [Circular *1] },
    ThreadMembersUpdate: ThreadMembersUpdateAction { client: [Circular *1] },
    TypingStart: TypingStart { client: [Circular *1] },
    UserUpdate: UserUpdateAction { client: [Circular *1] },
    VoiceStateUpdate: VoiceStateUpdate { client: [Circular *1] },
    WebhooksUpdate: WebhooksUpdate { client: [Circular *1] }
  },
  voice: ClientVoiceManager {
    adapters: Map(1) { '893532780946919536' => [Object] }
  },
  shard: null,
  users: UserManager {},
  guilds: GuildManager {},
  channels: ChannelManager {},
  sweepers: Sweepers {
    options: {},
    intervals: {
      applicationCommands: null,
      bans: null,
      emojis: null,
      invites: null,
      guildMembers: null,
      messages: null,
      presences: null,
      reactions: null,
      stageInstances: null,
      stickers: null,
      threadMembers: null,
      threads: null,
      users: null,
      voiceStates: null
    }
  },
  presence: ClientPresence {
    userId: null,
    guild: null,
    status: 'online',
    activities: [],
    clientStatus: null
  },
  user: ClientUser {
    id: '894060283373449317',
    bot: true,
    system: false,
    flags: UserFlags { bitfield: 0 },
    username: 'Potato bot',
    discriminator: '1627',
    avatar: 'f169fbb08deede7893419429cf1bc9ab',
    banner: null,
    accentColor: null,
    verified: true,
    mfaEnabled: false
  },
  application: ClientApplication {
    id: '894060283373449317',
    name: null,
    description: null,
    icon: null,
    flags: ApplicationFlags { bitfield: 303104 },
    cover: null,
    rpcOrigins: [],
    botRequireCodeGrant: null,
    botPublic: null,
    owner: null,
    commands: ApplicationCommandManager {
      permissions: [ApplicationCommandPermissionsManager]
    }
  },
  readyAt: 2022-02-23T01:47:22.497Z,
  eco: EconomyManager {
    noNegative: undefined,
    prefix: undefined,
    adapter: { name: 'sqlite', options: undefined },
    db: SqliteManager {
      table: 'money',
      filename: 'eco',
      sqliteOptions: {},
      hasInit: true,
      db: [Database]
    }
  },
  db: table {
    tableName: 'inv',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  config: {
    token: 'ODk0MDYwMjgzMzczNDQ5MzE3.YVkghg.ik3wBzG3rjGWnsQ_o3S5edt12fM',
    prefix: 'potat',
    admins: [
      '709950767670493275',
      '879207914005479514',
      '829171854681964604'
    ],
    debug: true,
    countChannel: '',
    opt: {
      DJ: [Object],
      maxVol: 250,
      loopMessage: false,
      discordPlayer: [Object]
    }
  },
  shop: { laptop: { cost: 1000 }, potato: { cost: 1 } },
  job: table {
    tableName: 'job',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  commands: Collection(50) [Map] {
    'addmoney' => {
      name: 'addmoney',
      aliases: [Array],
      usage: 'addmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'bal' => {
      name: 'bal',
      aliases: [Array],
      usage: 'bal',
      execute: [AsyncFunction: execute]
    },
    'beg' => {
      name: 'beg',
      aliases: [],
      usage: 'beg',
      execute: [AsyncFunction: execute]
    },
    'buy' => {
      name: 'buy',
      aliases: [],
      usage: 'buy <item>',
      execute: [AsyncFunction: execute]
    },
    'daily' => {
      name: 'daily',
      aliases: [],
      usage: 'daily',
      execute: [AsyncFunction: execute]
    },
    'inventory' => {
      name: 'inventory',
      aliases: [Array],
      usage: 'inv',
      execute: [AsyncFunction: execute]
    },
    'lb' => {
      name: 'lb',
      aliases: [Array],
      usage: 'leaderboard',
      execute: [AsyncFunction: execute]
    },
    'search' => {
      name: 'search',
      aliases: [],
      utilisation: 'search [song name]',
      execute: [AsyncFunction: execute]
    },
    'setmoney' => {
      name: 'setmoney',
      usage: 'setmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'transfer' => {
      name: 'transfer',
      aliases: [Array],
      usage: 'transfer <member> <amount>',
      execute: [AsyncFunction: execute]
    },
    'weekly' => {
      name: 'weekly',
      usage: 'weekly',
      execute: [AsyncFunction: execute]
    },
    'work' => {
      name: 'work',
      aliases: [],
      usage: 'work',
      cooldown: 3600,
      execute: [Function: execute]
    },
    'say' => {
      name: 'say',
      aliases: [Array],
      description: 'make the bot repeat what you said',
      execute: [Function: execute]
    },
    'sayembed' => {
      name: 'sayembed',
      description: 'say something embed',
      usage: '<title, description>',
      execute: [Function: execute]
    },
    'train' => {
      name: 'train',
      description: 'random thing idk',
      execute: [Function: execute]
    },
    'fasttype' => {
      name: 'fasttype',
      description: 'type fast',
      execute: [AsyncFunction: execute]
    },
    'games' => {
      name: 'games',
      description: 'play some games',
      execute: [Function: execute]
    },
    'settings' => { name: 'settings', execute: [Function: execute] },
    'slots' => {
      name: 'slots',
      description: 'play some games',
      execute: [Function: execute]
    },
    'tictactoe' => {
      name: 'tictactoe',
      description: 'play tictactoe!',
      expectedArgs: '<opponent>',
      minArgs: 1,
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'addfakemember' => { name: 'addfakemember', execute: [Function: execute] },
    'change_status' => { name: 'change_status', execute: [Function: execute] },
    'dev' => {
      name: 'dev',
      description: 'be a dev by completing a form!',
      execute: [AsyncFunction: execute]
    },
    'help' => {
      name: 'help',
      aliases: [Array],
      description: 'List all of my commands or info about a specific command.',
      usage: '[command name]',
      cooldown: 5,
      execute: [Function: execute]
    },
    'ping' => {
      name: 'ping',
      description: 'Ping!',
      execute: [Function: execute]
    },
    'poll' => {
      name: 'poll',
      description: 'poll',
      usage: 'Title + Option 1 + Option 2 + Option 3 + etc',
      execute: [Function: execute]
    },
    'server' => {
      name: 'server',
      aliases: [Array],
      description: 'servers info...',
      cooldown: 5,
      guildOnly: true,
      args: false,
      execute: [Function: execute]
    },
    'suggest' => {
      name: 'suggest',
      description: 'suggest',
      usage: '<suggestion>',
      execute: [Function: execute]
    },
    'ban' => {
      name: 'ban',
      description: 'This command bans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'giverole' => {
      name: 'giverole',
      description: 'give someone a role',
      permission: 'MANAGE_MEMBERS',
      guildOnly: true,
      execute: [Function: execute]
    },
    'kick' => {
      name: 'kick',
      permissions: 'KICK_MEMBERS',
      description: 'this command kicks a member',
      execute: [Function: execute]
    },
    'mute' => {
      name: 'mute',
      description: 'mute someone',
      permissions: 'MANAGE_MESSAGES',
      guildOnly: true,
      execute: [Function: execute]
    },
    'reload' => {
      name: 'reload',
      description: 'Reloads a command',
      args: true,
      execute: [Function: execute]
    },
    'removerole' => {
      name: 'removerole',
      description: "remove someone's role",
      execute: [Function: execute]
    },
    'unban' => {
      name: 'unban',
      description: 'This command unbans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'back' => { name: 'back', aliases: [], execute: [AsyncFunction: execute] },
    'clear' => { name: 'clear', aliases: [], execute: [AsyncFunction: execute] },
    'filter' => {
      name: 'filter',
      aliases: [],
      usage: 'filter [filter name]',
      execute: [AsyncFunction: execute]
    },
    'loop' => {
      name: 'loop',
      aliases: [],
      usage: 'loop [song|queue]',
      execute: [Function: execute]
    },
    'nowplaying' => {
      name: 'nowplaying',
      aliases: [Array],
      execute: [Function: execute]
    },
    'pause' => { name: 'pause', aliases: [], execute: [Function: execute] },
    'play' => {
      name: 'play',
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'progress' => {
      name: 'progress',
      aliases: [Array],
      utilisation: 'progress',
      voiceChannel: true,
      execute: [AsyncFunction: execute]
    },
    'queue' => {
      name: 'queue',
      aliases: [Array],
      utilisation: '{prefix}queue',
      voiceChannel: true,
      execute: [Function: execute]
    },
    'remove' => { name: 'remove', aliases: [], execute: [AsyncFunction: execute] },
    'resume' => { name: 'resume', aliases: [], execute: [Function: execute] },
    'save' => { name: 'save', aliases: [], execute: [AsyncFunction: execute] },
    'skip' => { name: 'skip', aliases: [Array], execute: [Function: execute] },
    'stop' => { name: 'stop', aliases: [Array], execute: [Function: execute] },
    'volume' => {
      name: 'volume',
      aliases: [Array],
      utilisation: 'volume [1-250]',
      voiceChannel: true,
      execute: [Function: execute]
    }
  },
  cooldowns: Collection(3) [Map] {
    'ping' => Collection(0) [Map] {},
    'play' => Collection(1) [Map] { '709950767670493275' => 1645581154637 },
    'skip' => Collection(0) [Map] {}
  },
  player: Player {
    _events: [Object: null prototype] {
      error: [Function (anonymous)],
      connectionError: [Function (anonymous)],
      trackStart: [Function (anonymous)],
      trackAdd: [Function (anonymous)],
      botDisconnect: [Function (anonymous)],
      channelEmpty: [Function (anonymous)],
      queueEnd: [Function (anonymous)]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    options: {
      autoRegisterExtractor: true,
      ytdlOptions: [Object],
      connectionTimeout: 20000
    },
    queues: Collection(1) [Map] { '893532780946919536' => [Queue] },
    voiceUtils: VoiceUtils { cache: [Collection [Map]] },
    extractors: Collection(0) [Map] {},
    requiredEvents: [ 'error', 'connectionError' ],
    client: [Circular *1],
    [Symbol(kCapture)]: false
  },
  [Symbol(kCapture)]: false
}
<ref *1> Client {
  _events: [Object: null prototype] {
    shardDisconnect: [Function (anonymous)],
    voiceStateUpdate: [Function: bound _handleVoiceState],
    guildMemberAdd: [Function (anonymous)],
    message: [Function (anonymous)],
    ready: [Function (anonymous)]
  },
  _eventsCount: 5,
  _maxListeners: undefined,
  options: {
    intents: 643,
    waitGuildTimeout: 15000,
    shardCount: 1,
    makeCache: [Function (anonymous)],
    messageCacheLifetime: 0,
    messageSweepInterval: 0,
    invalidRequestWarningInterval: 0,
    partials: [],
    restWsBridgeTimeout: 5000,
    restRequestTimeout: 15000,
    restGlobalRateLimit: 0,
    retryLimit: 1,
    restTimeOffset: 500,
    restSweepInterval: 60,
    failIfNotExists: true,
    userAgentSuffix: [],
    presence: { status: 'online', user: [Object] },
    sweepers: {},
    ws: {
      large_threshold: 50,
      compress: false,
      properties: [Object],
      version: 9,
      presence: [Object]
    },
    http: {
      agent: {},
      version: 9,
      api: 'https://discord.com/api',
      cdn: 'https://cdn.discordapp.com',
      invite: 'https://discord.gg',
      template: 'https://discord.new',
      scheduledEvent: 'https://discord.com/events'
    },
    shards: [ 0 ]
  },
  rest: RESTManager {
    client: [Circular *1],
    handlers: Collection(1) [Map] {
      '/channels/894764535892819988/messages' => [RequestHandler]
    },
    versioned: true,
    globalLimit: Infinity,
    globalRemaining: Infinity,
    globalReset: 1645581160617,
    globalDelay: null,
    sweepInterval: Timeout {
      _idleTimeout: 60000,
      _idlePrev: [Timeout],
      _idleNext: [TimersList],
      _idleStart: 302556,
      _onTimeout: [Function (anonymous)],
      _timerArgs: undefined,
      _repeat: 60000,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(kHasPrimitive)]: false,
      [Symbol(asyncId)]: 12,
      [Symbol(triggerId)]: 1
    }
  },
  _cleanups: Set(50) {
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ]
  },
  _finalizers: FinalizationRegistry {},
  ws: WebSocketManager {
    _events: [Object: null prototype] {},
    _eventsCount: 0,
    _maxListeners: undefined,
    gateway: 'wss://gateway.discord.gg/',
    totalShards: 1,
    shards: Collection(1) [Map] { 0 => [WebSocketShard] },
    status: 0,
    destroyed: false,
    reconnecting: false,
    [Symbol(kCapture)]: false
  },
  actions: ActionsManager {
    client: [Circular *1],
    ChannelCreate: ChannelCreateAction { client: [Circular *1] },
    ChannelDelete: ChannelDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    ChannelUpdate: ChannelUpdateAction { client: [Circular *1] },
    GuildBanAdd: GuildBanAdd { client: [Circular *1] },
    GuildBanRemove: GuildBanRemove { client: [Circular *1] },
    GuildChannelsPositionUpdate: GuildChannelsPositionUpdate { client: [Circular *1] },
    GuildDelete: GuildDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    GuildEmojiCreate: GuildEmojiCreateAction { client: [Circular *1] },
    GuildEmojiDelete: GuildEmojiDeleteAction { client: [Circular *1] },
    GuildEmojiUpdate: GuildEmojiUpdateAction { client: [Circular *1] },
    GuildEmojisUpdate: GuildEmojisUpdateAction { client: [Circular *1] },
    GuildIntegrationsUpdate: GuildIntegrationsUpdate { client: [Circular *1] },
    GuildMemberRemove: GuildMemberRemoveAction { client: [Circular *1] },
    GuildMemberUpdate: GuildMemberUpdateAction { client: [Circular *1] },
    GuildRoleCreate: GuildRoleCreate { client: [Circular *1] },
    GuildRoleDelete: GuildRoleDeleteAction { client: [Circular *1] },
    GuildRoleUpdate: GuildRoleUpdateAction { client: [Circular *1] },
    GuildRolesPositionUpdate: GuildRolesPositionUpdate { client: [Circular *1] },
    GuildScheduledEventCreate: GuildScheduledEventCreateAction { client: [Circular *1] },
    GuildScheduledEventDelete: GuildScheduledEventDeleteAction { client: [Circular *1] },
    GuildScheduledEventUpdate: GuildScheduledEventUpdateAction { client: [Circular *1] },
    GuildScheduledEventUserAdd: GuildScheduledEventUserAddAction { client: [Circular *1] },
    GuildScheduledEventUserRemove: GuildScheduledEventUserRemoveAction { client: [Circular *1] },
    GuildStickerCreate: GuildStickerCreateAction { client: [Circular *1] },
    GuildStickerDelete: GuildStickerDeleteAction { client: [Circular *1] },
    GuildStickerUpdate: GuildStickerUpdateAction { client: [Circular *1] },
    GuildStickersUpdate: GuildStickersUpdateAction { client: [Circular *1] },
    GuildUpdate: GuildUpdateAction { client: [Circular *1] },
    InteractionCreate: InteractionCreateAction { client: [Circular *1] },
    InviteCreate: InviteCreateAction { client: [Circular *1] },
    InviteDelete: InviteDeleteAction { client: [Circular *1] },
    MessageCreate: MessageCreateAction { client: [Circular *1] },
    MessageDelete: MessageDeleteAction { client: [Circular *1] },
    MessageDeleteBulk: MessageDeleteBulkAction { client: [Circular *1] },
    MessageReactionAdd: MessageReactionAdd { client: [Circular *1] },
    MessageReactionRemove: MessageReactionRemove { client: [Circular *1] },
    MessageReactionRemoveAll: MessageReactionRemoveAll { client: [Circular *1] },
    MessageReactionRemoveEmoji: MessageReactionRemoveEmoji { client: [Circular *1] },
    MessageUpdate: MessageUpdateAction { client: [Circular *1] },
    PresenceUpdate: PresenceUpdateAction { client: [Circular *1] },
    StageInstanceCreate: StageInstanceCreateAction { client: [Circular *1] },
    StageInstanceDelete: StageInstanceDeleteAction { client: [Circular *1] },
    StageInstanceUpdate: StageInstanceUpdateAction { client: [Circular *1] },
    ThreadCreate: ThreadCreateAction { client: [Circular *1] },
    ThreadDelete: ThreadDeleteAction { client: [Circular *1] },
    ThreadListSync: ThreadListSyncAction { client: [Circular *1] },
    ThreadMemberUpdate: ThreadMemberUpdateAction { client: [Circular *1] },
    ThreadMembersUpdate: ThreadMembersUpdateAction { client: [Circular *1] },
    TypingStart: TypingStart { client: [Circular *1] },
    UserUpdate: UserUpdateAction { client: [Circular *1] },
    VoiceStateUpdate: VoiceStateUpdate { client: [Circular *1] },
    WebhooksUpdate: WebhooksUpdate { client: [Circular *1] }
  },
  voice: ClientVoiceManager {
    adapters: Map(1) { '893532780946919536' => [Object] }
  },
  shard: null,
  users: UserManager {},
  guilds: GuildManager {},
  channels: ChannelManager {},
  sweepers: Sweepers {
    options: {},
    intervals: {
      applicationCommands: null,
      bans: null,
      emojis: null,
      invites: null,
      guildMembers: null,
      messages: null,
      presences: null,
      reactions: null,
      stageInstances: null,
      stickers: null,
      threadMembers: null,
      threads: null,
      users: null,
      voiceStates: null
    }
  },
  presence: ClientPresence {
    userId: null,
    guild: null,
    status: 'online',
    activities: [],
    clientStatus: null
  },
  user: ClientUser {
    id: '894060283373449317',
    bot: true,
    system: false,
    flags: UserFlags { bitfield: 0 },
    username: 'Potato bot',
    discriminator: '1627',
    avatar: 'f169fbb08deede7893419429cf1bc9ab',
    banner: null,
    accentColor: null,
    verified: true,
    mfaEnabled: false
  },
  application: ClientApplication {
    id: '894060283373449317',
    name: null,
    description: null,
    icon: null,
    flags: ApplicationFlags { bitfield: 303104 },
    cover: null,
    rpcOrigins: [],
    botRequireCodeGrant: null,
    botPublic: null,
    owner: null,
    commands: ApplicationCommandManager {
      permissions: [ApplicationCommandPermissionsManager]
    }
  },
  readyAt: 2022-02-23T01:47:22.497Z,
  eco: EconomyManager {
    noNegative: undefined,
    prefix: undefined,
    adapter: { name: 'sqlite', options: undefined },
    db: SqliteManager {
      table: 'money',
      filename: 'eco',
      sqliteOptions: {},
      hasInit: true,
      db: [Database]
    }
  },
  db: table {
    tableName: 'inv',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  config: {
    token: 'ODk0MDYwMjgzMzczNDQ5MzE3.YVkghg.ik3wBzG3rjGWnsQ_o3S5edt12fM',
    prefix: 'potat',
    admins: [
      '709950767670493275',
      '879207914005479514',
      '829171854681964604'
    ],
    debug: true,
    countChannel: '',
    opt: {
      DJ: [Object],
      maxVol: 250,
      loopMessage: false,
      discordPlayer: [Object]
    }
  },
  shop: { laptop: { cost: 1000 }, potato: { cost: 1 } },
  job: table {
    tableName: 'job',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  commands: Collection(50) [Map] {
    'addmoney' => {
      name: 'addmoney',
      aliases: [Array],
      usage: 'addmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'bal' => {
      name: 'bal',
      aliases: [Array],
      usage: 'bal',
      execute: [AsyncFunction: execute]
    },
    'beg' => {
      name: 'beg',
      aliases: [],
      usage: 'beg',
      execute: [AsyncFunction: execute]
    },
    'buy' => {
      name: 'buy',
      aliases: [],
      usage: 'buy <item>',
      execute: [AsyncFunction: execute]
    },
    'daily' => {
      name: 'daily',
      aliases: [],
      usage: 'daily',
      execute: [AsyncFunction: execute]
    },
    'inventory' => {
      name: 'inventory',
      aliases: [Array],
      usage: 'inv',
      execute: [AsyncFunction: execute]
    },
    'lb' => {
      name: 'lb',
      aliases: [Array],
      usage: 'leaderboard',
      execute: [AsyncFunction: execute]
    },
    'search' => {
      name: 'search',
      aliases: [],
      utilisation: 'search [song name]',
      execute: [AsyncFunction: execute]
    },
    'setmoney' => {
      name: 'setmoney',
      usage: 'setmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'transfer' => {
      name: 'transfer',
      aliases: [Array],
      usage: 'transfer <member> <amount>',
      execute: [AsyncFunction: execute]
    },
    'weekly' => {
      name: 'weekly',
      usage: 'weekly',
      execute: [AsyncFunction: execute]
    },
    'work' => {
      name: 'work',
      aliases: [],
      usage: 'work',
      cooldown: 3600,
      execute: [Function: execute]
    },
    'say' => {
      name: 'say',
      aliases: [Array],
      description: 'make the bot repeat what you said',
      execute: [Function: execute]
    },
    'sayembed' => {
      name: 'sayembed',
      description: 'say something embed',
      usage: '<title, description>',
      execute: [Function: execute]
    },
    'train' => {
      name: 'train',
      description: 'random thing idk',
      execute: [Function: execute]
    },
    'fasttype' => {
      name: 'fasttype',
      description: 'type fast',
      execute: [AsyncFunction: execute]
    },
    'games' => {
      name: 'games',
      description: 'play some games',
      execute: [Function: execute]
    },
    'settings' => { name: 'settings', execute: [Function: execute] },
    'slots' => {
      name: 'slots',
      description: 'play some games',
      execute: [Function: execute]
    },
    'tictactoe' => {
      name: 'tictactoe',
      description: 'play tictactoe!',
      expectedArgs: '<opponent>',
      minArgs: 1,
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'addfakemember' => { name: 'addfakemember', execute: [Function: execute] },
    'change_status' => { name: 'change_status', execute: [Function: execute] },
    'dev' => {
      name: 'dev',
      description: 'be a dev by completing a form!',
      execute: [AsyncFunction: execute]
    },
    'help' => {
      name: 'help',
      aliases: [Array],
      description: 'List all of my commands or info about a specific command.',
      usage: '[command name]',
      cooldown: 5,
      execute: [Function: execute]
    },
    'ping' => {
      name: 'ping',
      description: 'Ping!',
      execute: [Function: execute]
    },
    'poll' => {
      name: 'poll',
      description: 'poll',
      usage: 'Title + Option 1 + Option 2 + Option 3 + etc',
      execute: [Function: execute]
    },
    'server' => {
      name: 'server',
      aliases: [Array],
      description: 'servers info...',
      cooldown: 5,
      guildOnly: true,
      args: false,
      execute: [Function: execute]
    },
    'suggest' => {
      name: 'suggest',
      description: 'suggest',
      usage: '<suggestion>',
      execute: [Function: execute]
    },
    'ban' => {
      name: 'ban',
      description: 'This command bans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'giverole' => {
      name: 'giverole',
      description: 'give someone a role',
      permission: 'MANAGE_MEMBERS',
      guildOnly: true,
      execute: [Function: execute]
    },
    'kick' => {
      name: 'kick',
      permissions: 'KICK_MEMBERS',
      description: 'this command kicks a member',
      execute: [Function: execute]
    },
    'mute' => {
      name: 'mute',
      description: 'mute someone',
      permissions: 'MANAGE_MESSAGES',
      guildOnly: true,
      execute: [Function: execute]
    },
    'reload' => {
      name: 'reload',
      description: 'Reloads a command',
      args: true,
      execute: [Function: execute]
    },
    'removerole' => {
      name: 'removerole',
      description: "remove someone's role",
      execute: [Function: execute]
    },
    'unban' => {
      name: 'unban',
      description: 'This command unbans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'back' => { name: 'back', aliases: [], execute: [AsyncFunction: execute] },
    'clear' => { name: 'clear', aliases: [], execute: [AsyncFunction: execute] },
    'filter' => {
      name: 'filter',
      aliases: [],
      usage: 'filter [filter name]',
      execute: [AsyncFunction: execute]
    },
    'loop' => {
      name: 'loop',
      aliases: [],
      usage: 'loop [song|queue]',
      execute: [Function: execute]
    },
    'nowplaying' => {
      name: 'nowplaying',
      aliases: [Array],
      execute: [Function: execute]
    },
    'pause' => { name: 'pause', aliases: [], execute: [Function: execute] },
    'play' => {
      name: 'play',
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'progress' => {
      name: 'progress',
      aliases: [Array],
      utilisation: 'progress',
      voiceChannel: true,
      execute: [AsyncFunction: execute]
    },
    'queue' => {
      name: 'queue',
      aliases: [Array],
      utilisation: '{prefix}queue',
      voiceChannel: true,
      execute: [Function: execute]
    },
    'remove' => { name: 'remove', aliases: [], execute: [AsyncFunction: execute] },
    'resume' => { name: 'resume', aliases: [], execute: [Function: execute] },
    'save' => { name: 'save', aliases: [], execute: [AsyncFunction: execute] },
    'skip' => { name: 'skip', aliases: [Array], execute: [Function: execute] },
    'stop' => { name: 'stop', aliases: [Array], execute: [Function: execute] },
    'volume' => {
      name: 'volume',
      aliases: [Array],
      utilisation: 'volume [1-250]',
      voiceChannel: true,
      execute: [Function: execute]
    }
  },
  cooldowns: Collection(3) [Map] {
    'ping' => Collection(0) [Map] {},
    'play' => Collection(1) [Map] { '709950767670493275' => 1645581191262 },
    'skip' => Collection(0) [Map] {}
  },
  player: Player {
    _events: [Object: null prototype] {
      error: [Function (anonymous)],
      connectionError: [Function (anonymous)],
      trackStart: [Function (anonymous)],
      trackAdd: [Function (anonymous)],
      botDisconnect: [Function (anonymous)],
      channelEmpty: [Function (anonymous)],
      queueEnd: [Function (anonymous)]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    options: {
      autoRegisterExtractor: true,
      ytdlOptions: [Object],
      connectionTimeout: 20000
    },
    queues: Collection(1) [Map] { '893532780946919536' => [Queue] },
    voiceUtils: VoiceUtils { cache: [Collection [Map]] },
    extractors: Collection(0) [Map] {},
    requiredEvents: [ 'error', 'connectionError' ],
    client: [Circular *1],
    [Symbol(kCapture)]: false
  },
  [Symbol(kCapture)]: false
}
<ref *1> Client {
  _events: [Object: null prototype] {
    shardDisconnect: [Function (anonymous)],
    voiceStateUpdate: [Function: bound _handleVoiceState],
    guildMemberAdd: [Function (anonymous)],
    message: [Function (anonymous)],
    ready: [Function (anonymous)]
  },
  _eventsCount: 5,
  _maxListeners: undefined,
  options: {
    intents: 643,
    waitGuildTimeout: 15000,
    shardCount: 1,
    makeCache: [Function (anonymous)],
    messageCacheLifetime: 0,
    messageSweepInterval: 0,
    invalidRequestWarningInterval: 0,
    partials: [],
    restWsBridgeTimeout: 5000,
    restRequestTimeout: 15000,
    restGlobalRateLimit: 0,
    retryLimit: 1,
    restTimeOffset: 500,
    restSweepInterval: 60,
    failIfNotExists: true,
    userAgentSuffix: [],
    presence: { status: 'online', user: [Object] },
    sweepers: {},
    ws: {
      large_threshold: 50,
      compress: false,
      properties: [Object],
      version: 9,
      presence: [Object]
    },
    http: {
      agent: {},
      version: 9,
      api: 'https://discord.com/api',
      cdn: 'https://cdn.discordapp.com',
      invite: 'https://discord.gg',
      template: 'https://discord.new',
      scheduledEvent: 'https://discord.com/events'
    },
    shards: [ 0 ]
  },
  rest: RESTManager {
    client: [Circular *1],
    handlers: Collection(1) [Map] {
      '/channels/894764535892819988/messages' => [RequestHandler]
    },
    versioned: true,
    globalLimit: Infinity,
    globalRemaining: Infinity,
    globalReset: 1645581205225,
    globalDelay: null,
    sweepInterval: Timeout {
      _idleTimeout: 60000,
      _idlePrev: [TimersList],
      _idleNext: [Timeout],
      _idleStart: 362562,
      _onTimeout: [Function (anonymous)],
      _timerArgs: undefined,
      _repeat: 60000,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(kHasPrimitive)]: false,
      [Symbol(asyncId)]: 12,
      [Symbol(triggerId)]: 1
    }
  },
  _cleanups: Set(50) {
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ]
  },
  _finalizers: FinalizationRegistry {},
  ws: WebSocketManager {
    _events: [Object: null prototype] {},
    _eventsCount: 0,
    _maxListeners: undefined,
    gateway: 'wss://gateway.discord.gg/',
    totalShards: 1,
    shards: Collection(1) [Map] { 0 => [WebSocketShard] },
    status: 0,
    destroyed: false,
    reconnecting: false,
    [Symbol(kCapture)]: false
  },
  actions: ActionsManager {
    client: [Circular *1],
    ChannelCreate: ChannelCreateAction { client: [Circular *1] },
    ChannelDelete: ChannelDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    ChannelUpdate: ChannelUpdateAction { client: [Circular *1] },
    GuildBanAdd: GuildBanAdd { client: [Circular *1] },
    GuildBanRemove: GuildBanRemove { client: [Circular *1] },
    GuildChannelsPositionUpdate: GuildChannelsPositionUpdate { client: [Circular *1] },
    GuildDelete: GuildDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    GuildEmojiCreate: GuildEmojiCreateAction { client: [Circular *1] },
    GuildEmojiDelete: GuildEmojiDeleteAction { client: [Circular *1] },
    GuildEmojiUpdate: GuildEmojiUpdateAction { client: [Circular *1] },
    GuildEmojisUpdate: GuildEmojisUpdateAction { client: [Circular *1] },
    GuildIntegrationsUpdate: GuildIntegrationsUpdate { client: [Circular *1] },
    GuildMemberRemove: GuildMemberRemoveAction { client: [Circular *1] },
    GuildMemberUpdate: GuildMemberUpdateAction { client: [Circular *1] },
    GuildRoleCreate: GuildRoleCreate { client: [Circular *1] },
    GuildRoleDelete: GuildRoleDeleteAction { client: [Circular *1] },
    GuildRoleUpdate: GuildRoleUpdateAction { client: [Circular *1] },
    GuildRolesPositionUpdate: GuildRolesPositionUpdate { client: [Circular *1] },
    GuildScheduledEventCreate: GuildScheduledEventCreateAction { client: [Circular *1] },
    GuildScheduledEventDelete: GuildScheduledEventDeleteAction { client: [Circular *1] },
    GuildScheduledEventUpdate: GuildScheduledEventUpdateAction { client: [Circular *1] },
    GuildScheduledEventUserAdd: GuildScheduledEventUserAddAction { client: [Circular *1] },
    GuildScheduledEventUserRemove: GuildScheduledEventUserRemoveAction { client: [Circular *1] },
    GuildStickerCreate: GuildStickerCreateAction { client: [Circular *1] },
    GuildStickerDelete: GuildStickerDeleteAction { client: [Circular *1] },
    GuildStickerUpdate: GuildStickerUpdateAction { client: [Circular *1] },
    GuildStickersUpdate: GuildStickersUpdateAction { client: [Circular *1] },
    GuildUpdate: GuildUpdateAction { client: [Circular *1] },
    InteractionCreate: InteractionCreateAction { client: [Circular *1] },
    InviteCreate: InviteCreateAction { client: [Circular *1] },
    InviteDelete: InviteDeleteAction { client: [Circular *1] },
    MessageCreate: MessageCreateAction { client: [Circular *1] },
    MessageDelete: MessageDeleteAction { client: [Circular *1] },
    MessageDeleteBulk: MessageDeleteBulkAction { client: [Circular *1] },
    MessageReactionAdd: MessageReactionAdd { client: [Circular *1] },
    MessageReactionRemove: MessageReactionRemove { client: [Circular *1] },
    MessageReactionRemoveAll: MessageReactionRemoveAll { client: [Circular *1] },
    MessageReactionRemoveEmoji: MessageReactionRemoveEmoji { client: [Circular *1] },
    MessageUpdate: MessageUpdateAction { client: [Circular *1] },
    PresenceUpdate: PresenceUpdateAction { client: [Circular *1] },
    StageInstanceCreate: StageInstanceCreateAction { client: [Circular *1] },
    StageInstanceDelete: StageInstanceDeleteAction { client: [Circular *1] },
    StageInstanceUpdate: StageInstanceUpdateAction { client: [Circular *1] },
    ThreadCreate: ThreadCreateAction { client: [Circular *1] },
    ThreadDelete: ThreadDeleteAction { client: [Circular *1] },
    ThreadListSync: ThreadListSyncAction { client: [Circular *1] },
    ThreadMemberUpdate: ThreadMemberUpdateAction { client: [Circular *1] },
    ThreadMembersUpdate: ThreadMembersUpdateAction { client: [Circular *1] },
    TypingStart: TypingStart { client: [Circular *1] },
    UserUpdate: UserUpdateAction { client: [Circular *1] },
    VoiceStateUpdate: VoiceStateUpdate { client: [Circular *1] },
    WebhooksUpdate: WebhooksUpdate { client: [Circular *1] }
  },
  voice: ClientVoiceManager {
    adapters: Map(1) { '893532780946919536' => [Object] }
  },
  shard: null,
  users: UserManager {},
  guilds: GuildManager {},
  channels: ChannelManager {},
  sweepers: Sweepers {
    options: {},
    intervals: {
      applicationCommands: null,
      bans: null,
      emojis: null,
      invites: null,
      guildMembers: null,
      messages: null,
      presences: null,
      reactions: null,
      stageInstances: null,
      stickers: null,
      threadMembers: null,
      threads: null,
      users: null,
      voiceStates: null
    }
  },
  presence: ClientPresence {
    userId: null,
    guild: null,
    status: 'online',
    activities: [],
    clientStatus: null
  },
  user: ClientUser {
    id: '894060283373449317',
    bot: true,
    system: false,
    flags: UserFlags { bitfield: 0 },
    username: 'Potato bot',
    discriminator: '1627',
    avatar: 'f169fbb08deede7893419429cf1bc9ab',
    banner: null,
    accentColor: null,
    verified: true,
    mfaEnabled: false
  },
  application: ClientApplication {
    id: '894060283373449317',
    name: null,
    description: null,
    icon: null,
    flags: ApplicationFlags { bitfield: 303104 },
    cover: null,
    rpcOrigins: [],
    botRequireCodeGrant: null,
    botPublic: null,
    owner: null,
    commands: ApplicationCommandManager {
      permissions: [ApplicationCommandPermissionsManager]
    }
  },
  readyAt: 2022-02-23T01:47:22.497Z,
  eco: EconomyManager {
    noNegative: undefined,
    prefix: undefined,
    adapter: { name: 'sqlite', options: undefined },
    db: SqliteManager {
      table: 'money',
      filename: 'eco',
      sqliteOptions: {},
      hasInit: true,
      db: [Database]
    }
  },
  db: table {
    tableName: 'inv',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  config: {
    token: 'ODk0MDYwMjgzMzczNDQ5MzE3.YVkghg.ik3wBzG3rjGWnsQ_o3S5edt12fM',
    prefix: 'potat',
    admins: [
      '709950767670493275',
      '879207914005479514',
      '829171854681964604'
    ],
    debug: true,
    countChannel: '',
    opt: {
      DJ: [Object],
      maxVol: 250,
      loopMessage: false,
      discordPlayer: [Object]
    }
  },
  shop: { laptop: { cost: 1000 }, potato: { cost: 1 } },
  job: table {
    tableName: 'job',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  commands: Collection(50) [Map] {
    'addmoney' => {
      name: 'addmoney',
      aliases: [Array],
      usage: 'addmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'bal' => {
      name: 'bal',
      aliases: [Array],
      usage: 'bal',
      execute: [AsyncFunction: execute]
    },
    'beg' => {
      name: 'beg',
      aliases: [],
      usage: 'beg',
      execute: [AsyncFunction: execute]
    },
    'buy' => {
      name: 'buy',
      aliases: [],
      usage: 'buy <item>',
      execute: [AsyncFunction: execute]
    },
    'daily' => {
      name: 'daily',
      aliases: [],
      usage: 'daily',
      execute: [AsyncFunction: execute]
    },
    'inventory' => {
      name: 'inventory',
      aliases: [Array],
      usage: 'inv',
      execute: [AsyncFunction: execute]
    },
    'lb' => {
      name: 'lb',
      aliases: [Array],
      usage: 'leaderboard',
      execute: [AsyncFunction: execute]
    },
    'search' => {
      name: 'search',
      aliases: [],
      utilisation: 'search [song name]',
      execute: [AsyncFunction: execute]
    },
    'setmoney' => {
      name: 'setmoney',
      usage: 'setmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'transfer' => {
      name: 'transfer',
      aliases: [Array],
      usage: 'transfer <member> <amount>',
      execute: [AsyncFunction: execute]
    },
    'weekly' => {
      name: 'weekly',
      usage: 'weekly',
      execute: [AsyncFunction: execute]
    },
    'work' => {
      name: 'work',
      aliases: [],
      usage: 'work',
      cooldown: 3600,
      execute: [Function: execute]
    },
    'say' => {
      name: 'say',
      aliases: [Array],
      description: 'make the bot repeat what you said',
      execute: [Function: execute]
    },
    'sayembed' => {
      name: 'sayembed',
      description: 'say something embed',
      usage: '<title, description>',
      execute: [Function: execute]
    },
    'train' => {
      name: 'train',
      description: 'random thing idk',
      execute: [Function: execute]
    },
    'fasttype' => {
      name: 'fasttype',
      description: 'type fast',
      execute: [AsyncFunction: execute]
    },
    'games' => {
      name: 'games',
      description: 'play some games',
      execute: [Function: execute]
    },
    'settings' => { name: 'settings', execute: [Function: execute] },
    'slots' => {
      name: 'slots',
      description: 'play some games',
      execute: [Function: execute]
    },
    'tictactoe' => {
      name: 'tictactoe',
      description: 'play tictactoe!',
      expectedArgs: '<opponent>',
      minArgs: 1,
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'addfakemember' => { name: 'addfakemember', execute: [Function: execute] },
    'change_status' => { name: 'change_status', execute: [Function: execute] },
    'dev' => {
      name: 'dev',
      description: 'be a dev by completing a form!',
      execute: [AsyncFunction: execute]
    },
    'help' => {
      name: 'help',
      aliases: [Array],
      description: 'List all of my commands or info about a specific command.',
      usage: '[command name]',
      cooldown: 5,
      execute: [Function: execute]
    },
    'ping' => {
      name: 'ping',
      description: 'Ping!',
      execute: [Function: execute]
    },
    'poll' => {
      name: 'poll',
      description: 'poll',
      usage: 'Title + Option 1 + Option 2 + Option 3 + etc',
      execute: [Function: execute]
    },
    'server' => {
      name: 'server',
      aliases: [Array],
      description: 'servers info...',
      cooldown: 5,
      guildOnly: true,
      args: false,
      execute: [Function: execute]
    },
    'suggest' => {
      name: 'suggest',
      description: 'suggest',
      usage: '<suggestion>',
      execute: [Function: execute]
    },
    'ban' => {
      name: 'ban',
      description: 'This command bans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'giverole' => {
      name: 'giverole',
      description: 'give someone a role',
      permission: 'MANAGE_MEMBERS',
      guildOnly: true,
      execute: [Function: execute]
    },
    'kick' => {
      name: 'kick',
      permissions: 'KICK_MEMBERS',
      description: 'this command kicks a member',
      execute: [Function: execute]
    },
    'mute' => {
      name: 'mute',
      description: 'mute someone',
      permissions: 'MANAGE_MESSAGES',
      guildOnly: true,
      execute: [Function: execute]
    },
    'reload' => {
      name: 'reload',
      description: 'Reloads a command',
      args: true,
      execute: [Function: execute]
    },
    'removerole' => {
      name: 'removerole',
      description: "remove someone's role",
      execute: [Function: execute]
    },
    'unban' => {
      name: 'unban',
      description: 'This command unbans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'back' => { name: 'back', aliases: [], execute: [AsyncFunction: execute] },
    'clear' => { name: 'clear', aliases: [], execute: [AsyncFunction: execute] },
    'filter' => {
      name: 'filter',
      aliases: [],
      usage: 'filter [filter name]',
      execute: [AsyncFunction: execute]
    },
    'loop' => {
      name: 'loop',
      aliases: [],
      usage: 'loop [song|queue]',
      execute: [Function: execute]
    },
    'nowplaying' => {
      name: 'nowplaying',
      aliases: [Array],
      execute: [Function: execute]
    },
    'pause' => { name: 'pause', aliases: [], execute: [Function: execute] },
    'play' => {
      name: 'play',
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'progress' => {
      name: 'progress',
      aliases: [Array],
      utilisation: 'progress',
      voiceChannel: true,
      execute: [AsyncFunction: execute]
    },
    'queue' => {
      name: 'queue',
      aliases: [Array],
      utilisation: '{prefix}queue',
      voiceChannel: true,
      execute: [Function: execute]
    },
    'remove' => { name: 'remove', aliases: [], execute: [AsyncFunction: execute] },
    'resume' => { name: 'resume', aliases: [], execute: [Function: execute] },
    'save' => { name: 'save', aliases: [], execute: [AsyncFunction: execute] },
    'skip' => { name: 'skip', aliases: [Array], execute: [Function: execute] },
    'stop' => { name: 'stop', aliases: [Array], execute: [Function: execute] },
    'volume' => {
      name: 'volume',
      aliases: [Array],
      utilisation: 'volume [1-250]',
      voiceChannel: true,
      execute: [Function: execute]
    }
  },
  cooldowns: Collection(4) [Map] {
    'ping' => Collection(0) [Map] {},
    'play' => Collection(1) [Map] { '709950767670493275' => 1645581211224 },
    'skip' => Collection(0) [Map] {},
    'queue' => Collection(0) [Map] {}
  },
  player: Player {
    _events: [Object: null prototype] {
      error: [Function (anonymous)],
      connectionError: [Function (anonymous)],
      trackStart: [Function (anonymous)],
      trackAdd: [Function (anonymous)],
      botDisconnect: [Function (anonymous)],
      channelEmpty: [Function (anonymous)],
      queueEnd: [Function (anonymous)]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    options: {
      autoRegisterExtractor: true,
      ytdlOptions: [Object],
      connectionTimeout: 20000
    },
    queues: Collection(1) [Map] { '893532780946919536' => [Queue] },
    voiceUtils: VoiceUtils { cache: [Collection [Map]] },
    extractors: Collection(0) [Map] {},
    requiredEvents: [ 'error', 'connectionError' ],
    client: [Circular *1],
    [Symbol(kCapture)]: false
  },
  [Symbol(kCapture)]: false
}
<ref *1> Client {
  _events: [Object: null prototype] {
    shardDisconnect: [Function (anonymous)],
    voiceStateUpdate: [Function: bound _handleVoiceState],
    guildMemberAdd: [Function (anonymous)],
    message: [Function (anonymous)],
    ready: [Function (anonymous)]
  },
  _eventsCount: 5,
  _maxListeners: undefined,
  options: {
    intents: 643,
    waitGuildTimeout: 15000,
    shardCount: 1,
    makeCache: [Function (anonymous)],
    messageCacheLifetime: 0,
    messageSweepInterval: 0,
    invalidRequestWarningInterval: 0,
    partials: [],
    restWsBridgeTimeout: 5000,
    restRequestTimeout: 15000,
    restGlobalRateLimit: 0,
    retryLimit: 1,
    restTimeOffset: 500,
    restSweepInterval: 60,
    failIfNotExists: true,
    userAgentSuffix: [],
    presence: { status: 'online', user: [Object] },
    sweepers: {},
    ws: {
      large_threshold: 50,
      compress: false,
      properties: [Object],
      version: 9,
      presence: [Object]
    },
    http: {
      agent: {},
      version: 9,
      api: 'https://discord.com/api',
      cdn: 'https://cdn.discordapp.com',
      invite: 'https://discord.gg',
      template: 'https://discord.new',
      scheduledEvent: 'https://discord.com/events'
    },
    shards: [ 0 ]
  },
  rest: RESTManager {
    client: [Circular *1],
    handlers: Collection(1) [Map] {
      '/channels/894764535892819988/messages' => [RequestHandler]
    },
    versioned: true,
    globalLimit: Infinity,
    globalRemaining: Infinity,
    globalReset: 1645581228028,
    globalDelay: null,
    sweepInterval: Timeout {
      _idleTimeout: 60000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 362562,
      _onTimeout: [Function (anonymous)],
      _timerArgs: undefined,
      _repeat: 60000,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(kHasPrimitive)]: false,
      [Symbol(asyncId)]: 12,
      [Symbol(triggerId)]: 1
    }
  },
  _cleanups: Set(50) {
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ]
  },
  _finalizers: FinalizationRegistry {},
  ws: WebSocketManager {
    _events: [Object: null prototype] {},
    _eventsCount: 0,
    _maxListeners: undefined,
    gateway: 'wss://gateway.discord.gg/',
    totalShards: 1,
    shards: Collection(1) [Map] { 0 => [WebSocketShard] },
    status: 0,
    destroyed: false,
    reconnecting: false,
    [Symbol(kCapture)]: false
  },
  actions: ActionsManager {
    client: [Circular *1],
    ChannelCreate: ChannelCreateAction { client: [Circular *1] },
    ChannelDelete: ChannelDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    ChannelUpdate: ChannelUpdateAction { client: [Circular *1] },
    GuildBanAdd: GuildBanAdd { client: [Circular *1] },
    GuildBanRemove: GuildBanRemove { client: [Circular *1] },
    GuildChannelsPositionUpdate: GuildChannelsPositionUpdate { client: [Circular *1] },
    GuildDelete: GuildDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    GuildEmojiCreate: GuildEmojiCreateAction { client: [Circular *1] },
    GuildEmojiDelete: GuildEmojiDeleteAction { client: [Circular *1] },
    GuildEmojiUpdate: GuildEmojiUpdateAction { client: [Circular *1] },
    GuildEmojisUpdate: GuildEmojisUpdateAction { client: [Circular *1] },
    GuildIntegrationsUpdate: GuildIntegrationsUpdate { client: [Circular *1] },
    GuildMemberRemove: GuildMemberRemoveAction { client: [Circular *1] },
    GuildMemberUpdate: GuildMemberUpdateAction { client: [Circular *1] },
    GuildRoleCreate: GuildRoleCreate { client: [Circular *1] },
    GuildRoleDelete: GuildRoleDeleteAction { client: [Circular *1] },
    GuildRoleUpdate: GuildRoleUpdateAction { client: [Circular *1] },
    GuildRolesPositionUpdate: GuildRolesPositionUpdate { client: [Circular *1] },
    GuildScheduledEventCreate: GuildScheduledEventCreateAction { client: [Circular *1] },
    GuildScheduledEventDelete: GuildScheduledEventDeleteAction { client: [Circular *1] },
    GuildScheduledEventUpdate: GuildScheduledEventUpdateAction { client: [Circular *1] },
    GuildScheduledEventUserAdd: GuildScheduledEventUserAddAction { client: [Circular *1] },
    GuildScheduledEventUserRemove: GuildScheduledEventUserRemoveAction { client: [Circular *1] },
    GuildStickerCreate: GuildStickerCreateAction { client: [Circular *1] },
    GuildStickerDelete: GuildStickerDeleteAction { client: [Circular *1] },
    GuildStickerUpdate: GuildStickerUpdateAction { client: [Circular *1] },
    GuildStickersUpdate: GuildStickersUpdateAction { client: [Circular *1] },
    GuildUpdate: GuildUpdateAction { client: [Circular *1] },
    InteractionCreate: InteractionCreateAction { client: [Circular *1] },
    InviteCreate: InviteCreateAction { client: [Circular *1] },
    InviteDelete: InviteDeleteAction { client: [Circular *1] },
    MessageCreate: MessageCreateAction { client: [Circular *1] },
    MessageDelete: MessageDeleteAction { client: [Circular *1] },
    MessageDeleteBulk: MessageDeleteBulkAction { client: [Circular *1] },
    MessageReactionAdd: MessageReactionAdd { client: [Circular *1] },
    MessageReactionRemove: MessageReactionRemove { client: [Circular *1] },
    MessageReactionRemoveAll: MessageReactionRemoveAll { client: [Circular *1] },
    MessageReactionRemoveEmoji: MessageReactionRemoveEmoji { client: [Circular *1] },
    MessageUpdate: MessageUpdateAction { client: [Circular *1] },
    PresenceUpdate: PresenceUpdateAction { client: [Circular *1] },
    StageInstanceCreate: StageInstanceCreateAction { client: [Circular *1] },
    StageInstanceDelete: StageInstanceDeleteAction { client: [Circular *1] },
    StageInstanceUpdate: StageInstanceUpdateAction { client: [Circular *1] },
    ThreadCreate: ThreadCreateAction { client: [Circular *1] },
    ThreadDelete: ThreadDeleteAction { client: [Circular *1] },
    ThreadListSync: ThreadListSyncAction { client: [Circular *1] },
    ThreadMemberUpdate: ThreadMemberUpdateAction { client: [Circular *1] },
    ThreadMembersUpdate: ThreadMembersUpdateAction { client: [Circular *1] },
    TypingStart: TypingStart { client: [Circular *1] },
    UserUpdate: UserUpdateAction { client: [Circular *1] },
    VoiceStateUpdate: VoiceStateUpdate { client: [Circular *1] },
    WebhooksUpdate: WebhooksUpdate { client: [Circular *1] }
  },
  voice: ClientVoiceManager {
    adapters: Map(1) { '893532780946919536' => [Object] }
  },
  shard: null,
  users: UserManager {},
  guilds: GuildManager {},
  channels: ChannelManager {},
  sweepers: Sweepers {
    options: {},
    intervals: {
      applicationCommands: null,
      bans: null,
      emojis: null,
      invites: null,
      guildMembers: null,
      messages: null,
      presences: null,
      reactions: null,
      stageInstances: null,
      stickers: null,
      threadMembers: null,
      threads: null,
      users: null,
      voiceStates: null
    }
  },
  presence: ClientPresence {
    userId: null,
    guild: null,
    status: 'online',
    activities: [],
    clientStatus: null
  },
  user: ClientUser {
    id: '894060283373449317',
    bot: true,
    system: false,
    flags: UserFlags { bitfield: 0 },
    username: 'Potato bot',
    discriminator: '1627',
    avatar: 'f169fbb08deede7893419429cf1bc9ab',
    banner: null,
    accentColor: null,
    verified: true,
    mfaEnabled: false
  },
  application: ClientApplication {
    id: '894060283373449317',
    name: null,
    description: null,
    icon: null,
    flags: ApplicationFlags { bitfield: 303104 },
    cover: null,
    rpcOrigins: [],
    botRequireCodeGrant: null,
    botPublic: null,
    owner: null,
    commands: ApplicationCommandManager {
      permissions: [ApplicationCommandPermissionsManager]
    }
  },
  readyAt: 2022-02-23T01:47:22.497Z,
  eco: EconomyManager {
    noNegative: undefined,
    prefix: undefined,
    adapter: { name: 'sqlite', options: undefined },
    db: SqliteManager {
      table: 'money',
      filename: 'eco',
      sqliteOptions: {},
      hasInit: true,
      db: [Database]
    }
  },
  db: table {
    tableName: 'inv',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  config: {
    token: 'ODk0MDYwMjgzMzczNDQ5MzE3.YVkghg.ik3wBzG3rjGWnsQ_o3S5edt12fM',
    prefix: 'potat',
    admins: [
      '709950767670493275',
      '879207914005479514',
      '829171854681964604'
    ],
    debug: true,
    countChannel: '',
    opt: {
      DJ: [Object],
      maxVol: 250,
      loopMessage: false,
      discordPlayer: [Object]
    }
  },
  shop: { laptop: { cost: 1000 }, potato: { cost: 1 } },
  job: table {
    tableName: 'job',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  commands: Collection(50) [Map] {
    'addmoney' => {
      name: 'addmoney',
      aliases: [Array],
      usage: 'addmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'bal' => {
      name: 'bal',
      aliases: [Array],
      usage: 'bal',
      execute: [AsyncFunction: execute]
    },
    'beg' => {
      name: 'beg',
      aliases: [],
      usage: 'beg',
      execute: [AsyncFunction: execute]
    },
    'buy' => {
      name: 'buy',
      aliases: [],
      usage: 'buy <item>',
      execute: [AsyncFunction: execute]
    },
    'daily' => {
      name: 'daily',
      aliases: [],
      usage: 'daily',
      execute: [AsyncFunction: execute]
    },
    'inventory' => {
      name: 'inventory',
      aliases: [Array],
      usage: 'inv',
      execute: [AsyncFunction: execute]
    },
    'lb' => {
      name: 'lb',
      aliases: [Array],
      usage: 'leaderboard',
      execute: [AsyncFunction: execute]
    },
    'search' => {
      name: 'search',
      aliases: [],
      utilisation: 'search [song name]',
      execute: [AsyncFunction: execute]
    },
    'setmoney' => {
      name: 'setmoney',
      usage: 'setmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'transfer' => {
      name: 'transfer',
      aliases: [Array],
      usage: 'transfer <member> <amount>',
      execute: [AsyncFunction: execute]
    },
    'weekly' => {
      name: 'weekly',
      usage: 'weekly',
      execute: [AsyncFunction: execute]
    },
    'work' => {
      name: 'work',
      aliases: [],
      usage: 'work',
      cooldown: 3600,
      execute: [Function: execute]
    },
    'say' => {
      name: 'say',
      aliases: [Array],
      description: 'make the bot repeat what you said',
      execute: [Function: execute]
    },
    'sayembed' => {
      name: 'sayembed',
      description: 'say something embed',
      usage: '<title, description>',
      execute: [Function: execute]
    },
    'train' => {
      name: 'train',
      description: 'random thing idk',
      execute: [Function: execute]
    },
    'fasttype' => {
      name: 'fasttype',
      description: 'type fast',
      execute: [AsyncFunction: execute]
    },
    'games' => {
      name: 'games',
      description: 'play some games',
      execute: [Function: execute]
    },
    'settings' => { name: 'settings', execute: [Function: execute] },
    'slots' => {
      name: 'slots',
      description: 'play some games',
      execute: [Function: execute]
    },
    'tictactoe' => {
      name: 'tictactoe',
      description: 'play tictactoe!',
      expectedArgs: '<opponent>',
      minArgs: 1,
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'addfakemember' => { name: 'addfakemember', execute: [Function: execute] },
    'change_status' => { name: 'change_status', execute: [Function: execute] },
    'dev' => {
      name: 'dev',
      description: 'be a dev by completing a form!',
      execute: [AsyncFunction: execute]
    },
    'help' => {
      name: 'help',
      aliases: [Array],
      description: 'List all of my commands or info about a specific command.',
      usage: '[command name]',
      cooldown: 5,
      execute: [Function: execute]
    },
    'ping' => {
      name: 'ping',
      description: 'Ping!',
      execute: [Function: execute]
    },
    'poll' => {
      name: 'poll',
      description: 'poll',
      usage: 'Title + Option 1 + Option 2 + Option 3 + etc',
      execute: [Function: execute]
    },
    'server' => {
      name: 'server',
      aliases: [Array],
      description: 'servers info...',
      cooldown: 5,
      guildOnly: true,
      args: false,
      execute: [Function: execute]
    },
    'suggest' => {
      name: 'suggest',
      description: 'suggest',
      usage: '<suggestion>',
      execute: [Function: execute]
    },
    'ban' => {
      name: 'ban',
      description: 'This command bans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'giverole' => {
      name: 'giverole',
      description: 'give someone a role',
      permission: 'MANAGE_MEMBERS',
      guildOnly: true,
      execute: [Function: execute]
    },
    'kick' => {
      name: 'kick',
      permissions: 'KICK_MEMBERS',
      description: 'this command kicks a member',
      execute: [Function: execute]
    },
    'mute' => {
      name: 'mute',
      description: 'mute someone',
      permissions: 'MANAGE_MESSAGES',
      guildOnly: true,
      execute: [Function: execute]
    },
    'reload' => {
      name: 'reload',
      description: 'Reloads a command',
      args: true,
      execute: [Function: execute]
    },
    'removerole' => {
      name: 'removerole',
      description: "remove someone's role",
      execute: [Function: execute]
    },
    'unban' => {
      name: 'unban',
      description: 'This command unbans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'back' => { name: 'back', aliases: [], execute: [AsyncFunction: execute] },
    'clear' => { name: 'clear', aliases: [], execute: [AsyncFunction: execute] },
    'filter' => {
      name: 'filter',
      aliases: [],
      usage: 'filter [filter name]',
      execute: [AsyncFunction: execute]
    },
    'loop' => {
      name: 'loop',
      aliases: [],
      usage: 'loop [song|queue]',
      execute: [Function: execute]
    },
    'nowplaying' => {
      name: 'nowplaying',
      aliases: [Array],
      execute: [Function: execute]
    },
    'pause' => { name: 'pause', aliases: [], execute: [Function: execute] },
    'play' => {
      name: 'play',
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'progress' => {
      name: 'progress',
      aliases: [Array],
      utilisation: 'progress',
      voiceChannel: true,
      execute: [AsyncFunction: execute]
    },
    'queue' => {
      name: 'queue',
      aliases: [Array],
      utilisation: '{prefix}queue',
      voiceChannel: true,
      execute: [Function: execute]
    },
    'remove' => { name: 'remove', aliases: [], execute: [AsyncFunction: execute] },
    'resume' => { name: 'resume', aliases: [], execute: [Function: execute] },
    'save' => { name: 'save', aliases: [], execute: [AsyncFunction: execute] },
    'skip' => { name: 'skip', aliases: [Array], execute: [Function: execute] },
    'stop' => { name: 'stop', aliases: [Array], execute: [Function: execute] },
    'volume' => {
      name: 'volume',
      aliases: [Array],
      utilisation: 'volume [1-250]',
      voiceChannel: true,
      execute: [Function: execute]
    }
  },
  cooldowns: Collection(5) [Map] {
    'ping' => Collection(0) [Map] {},
    'play' => Collection(1) [Map] { '709950767670493275' => 1645581241970 },
    'skip' => Collection(0) [Map] {},
    'queue' => Collection(0) [Map] {},
    'remove' => Collection(0) [Map] {}
  },
  player: Player {
    _events: [Object: null prototype] {
      error: [Function (anonymous)],
      connectionError: [Function (anonymous)],
      trackStart: [Function (anonymous)],
      trackAdd: [Function (anonymous)],
      botDisconnect: [Function (anonymous)],
      channelEmpty: [Function (anonymous)],
      queueEnd: [Function (anonymous)]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    options: {
      autoRegisterExtractor: true,
      ytdlOptions: [Object],
      connectionTimeout: 20000
    },
    queues: Collection(1) [Map] { '893532780946919536' => [Queue] },
    voiceUtils: VoiceUtils { cache: [Collection [Map]] },
    extractors: Collection(0) [Map] {},
    requiredEvents: [ 'error', 'connectionError' ],
    client: [Circular *1],
    [Symbol(kCapture)]: false
  },
  [Symbol(kCapture)]: false
}
<ref *1> Client {
  _events: [Object: null prototype] {
    shardDisconnect: [Function (anonymous)],
    voiceStateUpdate: [Function: bound _handleVoiceState],
    guildMemberAdd: [Function (anonymous)],
    message: [Function (anonymous)],
    ready: [Function (anonymous)]
  },
  _eventsCount: 5,
  _maxListeners: 10,
  options: {
    intents: 643,
    waitGuildTimeout: 15000,
    shardCount: 1,
    makeCache: [Function (anonymous)],
    messageCacheLifetime: 0,
    messageSweepInterval: 0,
    invalidRequestWarningInterval: 0,
    partials: [],
    restWsBridgeTimeout: 5000,
    restRequestTimeout: 15000,
    restGlobalRateLimit: 0,
    retryLimit: 1,
    restTimeOffset: 500,
    restSweepInterval: 60,
    failIfNotExists: true,
    userAgentSuffix: [],
    presence: { status: 'online', user: [Object] },
    sweepers: {},
    ws: {
      large_threshold: 50,
      compress: false,
      properties: [Object],
      version: 9,
      presence: [Object]
    },
    http: {
      agent: {},
      version: 9,
      api: 'https://discord.com/api',
      cdn: 'https://cdn.discordapp.com',
      invite: 'https://discord.gg',
      template: 'https://discord.new',
      scheduledEvent: 'https://discord.com/events'
    },
    shards: [ 0 ]
  },
  rest: RESTManager {
    client: [Circular *1],
    handlers: Collection(1) [Map] {
      '/channels/894764535892819988/messages' => [RequestHandler]
    },
    versioned: true,
    globalLimit: Infinity,
    globalRemaining: Infinity,
    globalReset: 1645581268122,
    globalDelay: null,
    sweepInterval: Timeout {
      _idleTimeout: 60000,
      _idlePrev: [TimersList],
      _idleNext: [Timeout],
      _idleStart: 422572,
      _onTimeout: [Function (anonymous)],
      _timerArgs: undefined,
      _repeat: 60000,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(kHasPrimitive)]: false,
      [Symbol(asyncId)]: 12,
      [Symbol(triggerId)]: 1
    }
  },
  _cleanups: Set(50) {
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ]
  },
  _finalizers: FinalizationRegistry {},
  ws: WebSocketManager {
    _events: [Object: null prototype] {},
    _eventsCount: 0,
    _maxListeners: undefined,
    gateway: 'wss://gateway.discord.gg/',
    totalShards: 1,
    shards: Collection(1) [Map] { 0 => [WebSocketShard] },
    status: 0,
    destroyed: false,
    reconnecting: false,
    [Symbol(kCapture)]: false
  },
  actions: ActionsManager {
    client: [Circular *1],
    ChannelCreate: ChannelCreateAction { client: [Circular *1] },
    ChannelDelete: ChannelDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    ChannelUpdate: ChannelUpdateAction { client: [Circular *1] },
    GuildBanAdd: GuildBanAdd { client: [Circular *1] },
    GuildBanRemove: GuildBanRemove { client: [Circular *1] },
    GuildChannelsPositionUpdate: GuildChannelsPositionUpdate { client: [Circular *1] },
    GuildDelete: GuildDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    GuildEmojiCreate: GuildEmojiCreateAction { client: [Circular *1] },
    GuildEmojiDelete: GuildEmojiDeleteAction { client: [Circular *1] },
    GuildEmojiUpdate: GuildEmojiUpdateAction { client: [Circular *1] },
    GuildEmojisUpdate: GuildEmojisUpdateAction { client: [Circular *1] },
    GuildIntegrationsUpdate: GuildIntegrationsUpdate { client: [Circular *1] },
    GuildMemberRemove: GuildMemberRemoveAction { client: [Circular *1] },
    GuildMemberUpdate: GuildMemberUpdateAction { client: [Circular *1] },
    GuildRoleCreate: GuildRoleCreate { client: [Circular *1] },
    GuildRoleDelete: GuildRoleDeleteAction { client: [Circular *1] },
    GuildRoleUpdate: GuildRoleUpdateAction { client: [Circular *1] },
    GuildRolesPositionUpdate: GuildRolesPositionUpdate { client: [Circular *1] },
    GuildScheduledEventCreate: GuildScheduledEventCreateAction { client: [Circular *1] },
    GuildScheduledEventDelete: GuildScheduledEventDeleteAction { client: [Circular *1] },
    GuildScheduledEventUpdate: GuildScheduledEventUpdateAction { client: [Circular *1] },
    GuildScheduledEventUserAdd: GuildScheduledEventUserAddAction { client: [Circular *1] },
    GuildScheduledEventUserRemove: GuildScheduledEventUserRemoveAction { client: [Circular *1] },
    GuildStickerCreate: GuildStickerCreateAction { client: [Circular *1] },
    GuildStickerDelete: GuildStickerDeleteAction { client: [Circular *1] },
    GuildStickerUpdate: GuildStickerUpdateAction { client: [Circular *1] },
    GuildStickersUpdate: GuildStickersUpdateAction { client: [Circular *1] },
    GuildUpdate: GuildUpdateAction { client: [Circular *1] },
    InteractionCreate: InteractionCreateAction { client: [Circular *1] },
    InviteCreate: InviteCreateAction { client: [Circular *1] },
    InviteDelete: InviteDeleteAction { client: [Circular *1] },
    MessageCreate: MessageCreateAction { client: [Circular *1] },
    MessageDelete: MessageDeleteAction { client: [Circular *1] },
    MessageDeleteBulk: MessageDeleteBulkAction { client: [Circular *1] },
    MessageReactionAdd: MessageReactionAdd { client: [Circular *1] },
    MessageReactionRemove: MessageReactionRemove { client: [Circular *1] },
    MessageReactionRemoveAll: MessageReactionRemoveAll { client: [Circular *1] },
    MessageReactionRemoveEmoji: MessageReactionRemoveEmoji { client: [Circular *1] },
    MessageUpdate: MessageUpdateAction { client: [Circular *1] },
    PresenceUpdate: PresenceUpdateAction { client: [Circular *1] },
    StageInstanceCreate: StageInstanceCreateAction { client: [Circular *1] },
    StageInstanceDelete: StageInstanceDeleteAction { client: [Circular *1] },
    StageInstanceUpdate: StageInstanceUpdateAction { client: [Circular *1] },
    ThreadCreate: ThreadCreateAction { client: [Circular *1] },
    ThreadDelete: ThreadDeleteAction { client: [Circular *1] },
    ThreadListSync: ThreadListSyncAction { client: [Circular *1] },
    ThreadMemberUpdate: ThreadMemberUpdateAction { client: [Circular *1] },
    ThreadMembersUpdate: ThreadMembersUpdateAction { client: [Circular *1] },
    TypingStart: TypingStart { client: [Circular *1] },
    UserUpdate: UserUpdateAction { client: [Circular *1] },
    VoiceStateUpdate: VoiceStateUpdate { client: [Circular *1] },
    WebhooksUpdate: WebhooksUpdate { client: [Circular *1] }
  },
  voice: ClientVoiceManager {
    adapters: Map(1) { '893532780946919536' => [Object] }
  },
  shard: null,
  users: UserManager {},
  guilds: GuildManager {},
  channels: ChannelManager {},
  sweepers: Sweepers {
    options: {},
    intervals: {
      applicationCommands: null,
      bans: null,
      emojis: null,
      invites: null,
      guildMembers: null,
      messages: null,
      presences: null,
      reactions: null,
      stageInstances: null,
      stickers: null,
      threadMembers: null,
      threads: null,
      users: null,
      voiceStates: null
    }
  },
  presence: ClientPresence {
    userId: null,
    guild: null,
    status: 'online',
    activities: [],
    clientStatus: null
  },
  user: ClientUser {
    id: '894060283373449317',
    bot: true,
    system: false,
    flags: UserFlags { bitfield: 0 },
    username: 'Potato bot',
    discriminator: '1627',
    avatar: 'f169fbb08deede7893419429cf1bc9ab',
    banner: null,
    accentColor: null,
    verified: true,
    mfaEnabled: false
  },
  application: ClientApplication {
    id: '894060283373449317',
    name: null,
    description: null,
    icon: null,
    flags: ApplicationFlags { bitfield: 303104 },
    cover: null,
    rpcOrigins: [],
    botRequireCodeGrant: null,
    botPublic: null,
    owner: null,
    commands: ApplicationCommandManager {
      permissions: [ApplicationCommandPermissionsManager]
    }
  },
  readyAt: 2022-02-23T01:47:22.497Z,
  eco: EconomyManager {
    noNegative: undefined,
    prefix: undefined,
    adapter: { name: 'sqlite', options: undefined },
    db: SqliteManager {
      table: 'money',
      filename: 'eco',
      sqliteOptions: {},
      hasInit: true,
      db: [Database]
    }
  },
  db: table {
    tableName: 'inv',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  config: {
    token: 'ODk0MDYwMjgzMzczNDQ5MzE3.YVkghg.ik3wBzG3rjGWnsQ_o3S5edt12fM',
    prefix: 'potat',
    admins: [
      '709950767670493275',
      '879207914005479514',
      '829171854681964604'
    ],
    debug: true,
    countChannel: '',
    opt: {
      DJ: [Object],
      maxVol: 250,
      loopMessage: false,
      discordPlayer: [Object]
    }
  },
  shop: { laptop: { cost: 1000 }, potato: { cost: 1 } },
  job: table {
    tableName: 'job',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  commands: Collection(50) [Map] {
    'addmoney' => {
      name: 'addmoney',
      aliases: [Array],
      usage: 'addmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'bal' => {
      name: 'bal',
      aliases: [Array],
      usage: 'bal',
      execute: [AsyncFunction: execute]
    },
    'beg' => {
      name: 'beg',
      aliases: [],
      usage: 'beg',
      execute: [AsyncFunction: execute]
    },
    'buy' => {
      name: 'buy',
      aliases: [],
      usage: 'buy <item>',
      execute: [AsyncFunction: execute]
    },
    'daily' => {
      name: 'daily',
      aliases: [],
      usage: 'daily',
      execute: [AsyncFunction: execute]
    },
    'inventory' => {
      name: 'inventory',
      aliases: [Array],
      usage: 'inv',
      execute: [AsyncFunction: execute]
    },
    'lb' => {
      name: 'lb',
      aliases: [Array],
      usage: 'leaderboard',
      execute: [AsyncFunction: execute]
    },
    'search' => {
      name: 'search',
      aliases: [],
      utilisation: 'search [song name]',
      execute: [AsyncFunction: execute]
    },
    'setmoney' => {
      name: 'setmoney',
      usage: 'setmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'transfer' => {
      name: 'transfer',
      aliases: [Array],
      usage: 'transfer <member> <amount>',
      execute: [AsyncFunction: execute]
    },
    'weekly' => {
      name: 'weekly',
      usage: 'weekly',
      execute: [AsyncFunction: execute]
    },
    'work' => {
      name: 'work',
      aliases: [],
      usage: 'work',
      cooldown: 3600,
      execute: [Function: execute]
    },
    'say' => {
      name: 'say',
      aliases: [Array],
      description: 'make the bot repeat what you said',
      execute: [Function: execute]
    },
    'sayembed' => {
      name: 'sayembed',
      description: 'say something embed',
      usage: '<title, description>',
      execute: [Function: execute]
    },
    'train' => {
      name: 'train',
      description: 'random thing idk',
      execute: [Function: execute]
    },
    'fasttype' => {
      name: 'fasttype',
      description: 'type fast',
      execute: [AsyncFunction: execute]
    },
    'games' => {
      name: 'games',
      description: 'play some games',
      execute: [Function: execute]
    },
    'settings' => { name: 'settings', execute: [Function: execute] },
    'slots' => {
      name: 'slots',
      description: 'play some games',
      execute: [Function: execute]
    },
    'tictactoe' => {
      name: 'tictactoe',
      description: 'play tictactoe!',
      expectedArgs: '<opponent>',
      minArgs: 1,
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'addfakemember' => { name: 'addfakemember', execute: [Function: execute] },
    'change_status' => { name: 'change_status', execute: [Function: execute] },
    'dev' => {
      name: 'dev',
      description: 'be a dev by completing a form!',
      execute: [AsyncFunction: execute]
    },
    'help' => {
      name: 'help',
      aliases: [Array],
      description: 'List all of my commands or info about a specific command.',
      usage: '[command name]',
      cooldown: 5,
      execute: [Function: execute]
    },
    'ping' => {
      name: 'ping',
      description: 'Ping!',
      execute: [Function: execute]
    },
    'poll' => {
      name: 'poll',
      description: 'poll',
      usage: 'Title + Option 1 + Option 2 + Option 3 + etc',
      execute: [Function: execute]
    },
    'server' => {
      name: 'server',
      aliases: [Array],
      description: 'servers info...',
      cooldown: 5,
      guildOnly: true,
      args: false,
      execute: [Function: execute]
    },
    'suggest' => {
      name: 'suggest',
      description: 'suggest',
      usage: '<suggestion>',
      execute: [Function: execute]
    },
    'ban' => {
      name: 'ban',
      description: 'This command bans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'giverole' => {
      name: 'giverole',
      description: 'give someone a role',
      permission: 'MANAGE_MEMBERS',
      guildOnly: true,
      execute: [Function: execute]
    },
    'kick' => {
      name: 'kick',
      permissions: 'KICK_MEMBERS',
      description: 'this command kicks a member',
      execute: [Function: execute]
    },
    'mute' => {
      name: 'mute',
      description: 'mute someone',
      permissions: 'MANAGE_MESSAGES',
      guildOnly: true,
      execute: [Function: execute]
    },
    'reload' => {
      name: 'reload',
      description: 'Reloads a command',
      args: true,
      execute: [Function: execute]
    },
    'removerole' => {
      name: 'removerole',
      description: "remove someone's role",
      execute: [Function: execute]
    },
    'unban' => {
      name: 'unban',
      description: 'This command unbans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'back' => { name: 'back', aliases: [], execute: [AsyncFunction: execute] },
    'clear' => { name: 'clear', aliases: [], execute: [AsyncFunction: execute] },
    'filter' => {
      name: 'filter',
      aliases: [],
      usage: 'filter [filter name]',
      execute: [AsyncFunction: execute]
    },
    'loop' => {
      name: 'loop',
      aliases: [],
      usage: 'loop [song|queue]',
      execute: [Function: execute]
    },
    'nowplaying' => {
      name: 'nowplaying',
      aliases: [Array],
      execute: [Function: execute]
    },
    'pause' => { name: 'pause', aliases: [], execute: [Function: execute] },
    'play' => {
      name: 'play',
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'progress' => {
      name: 'progress',
      aliases: [Array],
      utilisation: 'progress',
      voiceChannel: true,
      execute: [AsyncFunction: execute]
    },
    'queue' => {
      name: 'queue',
      aliases: [Array],
      utilisation: '{prefix}queue',
      voiceChannel: true,
      execute: [Function: execute]
    },
    'remove' => { name: 'remove', aliases: [], execute: [AsyncFunction: execute] },
    'resume' => { name: 'resume', aliases: [], execute: [Function: execute] },
    'save' => { name: 'save', aliases: [], execute: [AsyncFunction: execute] },
    'skip' => { name: 'skip', aliases: [Array], execute: [Function: execute] },
    'stop' => { name: 'stop', aliases: [Array], execute: [Function: execute] },
    'volume' => {
      name: 'volume',
      aliases: [Array],
      utilisation: 'volume [1-250]',
      voiceChannel: true,
      execute: [Function: execute]
    }
  },
  cooldowns: Collection(6) [Map] {
    'ping' => Collection(0) [Map] {},
    'play' => Collection(1) [Map] { '709950767670493275' => 1645581294896 },
    'skip' => Collection(0) [Map] {},
    'queue' => Collection(0) [Map] {},
    'remove' => Collection(0) [Map] {},
    'search' => Collection(0) [Map] {}
  },
  player: Player {
    _events: [Object: null prototype] {
      error: [Function (anonymous)],
      connectionError: [Function (anonymous)],
      trackStart: [Function (anonymous)],
      trackAdd: [Function (anonymous)],
      botDisconnect: [Function (anonymous)],
      channelEmpty: [Function (anonymous)],
      queueEnd: [Function (anonymous)]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    options: {
      autoRegisterExtractor: true,
      ytdlOptions: [Object],
      connectionTimeout: 20000
    },
    queues: Collection(1) [Map] { '893532780946919536' => [Queue] },
    voiceUtils: VoiceUtils { cache: [Collection [Map]] },
    extractors: Collection(0) [Map] {},
    requiredEvents: [ 'error', 'connectionError' ],
    client: [Circular *1],
    [Symbol(kCapture)]: false
  },
  [Symbol(kCapture)]: false
}
<ref *1> Client {
  _events: [Object: null prototype] {
    shardDisconnect: [Function (anonymous)],
    voiceStateUpdate: [Function: bound _handleVoiceState],
    guildMemberAdd: [Function (anonymous)],
    message: [Function (anonymous)],
    ready: [Function (anonymous)]
  },
  _eventsCount: 5,
  _maxListeners: 10,
  options: {
    intents: 643,
    waitGuildTimeout: 15000,
    shardCount: 1,
    makeCache: [Function (anonymous)],
    messageCacheLifetime: 0,
    messageSweepInterval: 0,
    invalidRequestWarningInterval: 0,
    partials: [],
    restWsBridgeTimeout: 5000,
    restRequestTimeout: 15000,
    restGlobalRateLimit: 0,
    retryLimit: 1,
    restTimeOffset: 500,
    restSweepInterval: 60,
    failIfNotExists: true,
    userAgentSuffix: [],
    presence: { status: 'online', user: [Object] },
    sweepers: {},
    ws: {
      large_threshold: 50,
      compress: false,
      properties: [Object],
      version: 9,
      presence: [Object]
    },
    http: {
      agent: {},
      version: 9,
      api: 'https://discord.com/api',
      cdn: 'https://cdn.discordapp.com',
      invite: 'https://discord.gg',
      template: 'https://discord.new',
      scheduledEvent: 'https://discord.com/events'
    },
    shards: [ 0 ]
  },
  rest: RESTManager {
    client: [Circular *1],
    handlers: Collection(1) [Map] {
      '/channels/894764535892819988/messages' => [RequestHandler]
    },
    versioned: true,
    globalLimit: Infinity,
    globalRemaining: Infinity,
    globalReset: 1645581331345,
    globalDelay: null,
    sweepInterval: Timeout {
      _idleTimeout: 60000,
      _idlePrev: [Timeout],
      _idleNext: [TimersList],
      _idleStart: 482580,
      _onTimeout: [Function (anonymous)],
      _timerArgs: undefined,
      _repeat: 60000,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(kHasPrimitive)]: false,
      [Symbol(asyncId)]: 12,
      [Symbol(triggerId)]: 1
    }
  },
  _cleanups: Set(50) {
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ]
  },
  _finalizers: FinalizationRegistry {},
  ws: WebSocketManager {
    _events: [Object: null prototype] {},
    _eventsCount: 0,
    _maxListeners: undefined,
    gateway: 'wss://gateway.discord.gg/',
    totalShards: 1,
    shards: Collection(1) [Map] { 0 => [WebSocketShard] },
    status: 0,
    destroyed: false,
    reconnecting: false,
    [Symbol(kCapture)]: false
  },
  actions: ActionsManager {
    client: [Circular *1],
    ChannelCreate: ChannelCreateAction { client: [Circular *1] },
    ChannelDelete: ChannelDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    ChannelUpdate: ChannelUpdateAction { client: [Circular *1] },
    GuildBanAdd: GuildBanAdd { client: [Circular *1] },
    GuildBanRemove: GuildBanRemove { client: [Circular *1] },
    GuildChannelsPositionUpdate: GuildChannelsPositionUpdate { client: [Circular *1] },
    GuildDelete: GuildDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    GuildEmojiCreate: GuildEmojiCreateAction { client: [Circular *1] },
    GuildEmojiDelete: GuildEmojiDeleteAction { client: [Circular *1] },
    GuildEmojiUpdate: GuildEmojiUpdateAction { client: [Circular *1] },
    GuildEmojisUpdate: GuildEmojisUpdateAction { client: [Circular *1] },
    GuildIntegrationsUpdate: GuildIntegrationsUpdate { client: [Circular *1] },
    GuildMemberRemove: GuildMemberRemoveAction { client: [Circular *1] },
    GuildMemberUpdate: GuildMemberUpdateAction { client: [Circular *1] },
    GuildRoleCreate: GuildRoleCreate { client: [Circular *1] },
    GuildRoleDelete: GuildRoleDeleteAction { client: [Circular *1] },
    GuildRoleUpdate: GuildRoleUpdateAction { client: [Circular *1] },
    GuildRolesPositionUpdate: GuildRolesPositionUpdate { client: [Circular *1] },
    GuildScheduledEventCreate: GuildScheduledEventCreateAction { client: [Circular *1] },
    GuildScheduledEventDelete: GuildScheduledEventDeleteAction { client: [Circular *1] },
    GuildScheduledEventUpdate: GuildScheduledEventUpdateAction { client: [Circular *1] },
    GuildScheduledEventUserAdd: GuildScheduledEventUserAddAction { client: [Circular *1] },
    GuildScheduledEventUserRemove: GuildScheduledEventUserRemoveAction { client: [Circular *1] },
    GuildStickerCreate: GuildStickerCreateAction { client: [Circular *1] },
    GuildStickerDelete: GuildStickerDeleteAction { client: [Circular *1] },
    GuildStickerUpdate: GuildStickerUpdateAction { client: [Circular *1] },
    GuildStickersUpdate: GuildStickersUpdateAction { client: [Circular *1] },
    GuildUpdate: GuildUpdateAction { client: [Circular *1] },
    InteractionCreate: InteractionCreateAction { client: [Circular *1] },
    InviteCreate: InviteCreateAction { client: [Circular *1] },
    InviteDelete: InviteDeleteAction { client: [Circular *1] },
    MessageCreate: MessageCreateAction { client: [Circular *1] },
    MessageDelete: MessageDeleteAction { client: [Circular *1] },
    MessageDeleteBulk: MessageDeleteBulkAction { client: [Circular *1] },
    MessageReactionAdd: MessageReactionAdd { client: [Circular *1] },
    MessageReactionRemove: MessageReactionRemove { client: [Circular *1] },
    MessageReactionRemoveAll: MessageReactionRemoveAll { client: [Circular *1] },
    MessageReactionRemoveEmoji: MessageReactionRemoveEmoji { client: [Circular *1] },
    MessageUpdate: MessageUpdateAction { client: [Circular *1] },
    PresenceUpdate: PresenceUpdateAction { client: [Circular *1] },
    StageInstanceCreate: StageInstanceCreateAction { client: [Circular *1] },
    StageInstanceDelete: StageInstanceDeleteAction { client: [Circular *1] },
    StageInstanceUpdate: StageInstanceUpdateAction { client: [Circular *1] },
    ThreadCreate: ThreadCreateAction { client: [Circular *1] },
    ThreadDelete: ThreadDeleteAction { client: [Circular *1] },
    ThreadListSync: ThreadListSyncAction { client: [Circular *1] },
    ThreadMemberUpdate: ThreadMemberUpdateAction { client: [Circular *1] },
    ThreadMembersUpdate: ThreadMembersUpdateAction { client: [Circular *1] },
    TypingStart: TypingStart { client: [Circular *1] },
    UserUpdate: UserUpdateAction { client: [Circular *1] },
    VoiceStateUpdate: VoiceStateUpdate { client: [Circular *1] },
    WebhooksUpdate: WebhooksUpdate { client: [Circular *1] }
  },
  voice: ClientVoiceManager {
    adapters: Map(1) { '893532780946919536' => [Object] }
  },
  shard: null,
  users: UserManager {},
  guilds: GuildManager {},
  channels: ChannelManager {},
  sweepers: Sweepers {
    options: {},
    intervals: {
      applicationCommands: null,
      bans: null,
      emojis: null,
      invites: null,
      guildMembers: null,
      messages: null,
      presences: null,
      reactions: null,
      stageInstances: null,
      stickers: null,
      threadMembers: null,
      threads: null,
      users: null,
      voiceStates: null
    }
  },
  presence: ClientPresence {
    userId: null,
    guild: null,
    status: 'online',
    activities: [],
    clientStatus: null
  },
  user: ClientUser {
    id: '894060283373449317',
    bot: true,
    system: false,
    flags: UserFlags { bitfield: 0 },
    username: 'Potato bot',
    discriminator: '1627',
    avatar: 'f169fbb08deede7893419429cf1bc9ab',
    banner: null,
    accentColor: null,
    verified: true,
    mfaEnabled: false
  },
  application: ClientApplication {
    id: '894060283373449317',
    name: null,
    description: null,
    icon: null,
    flags: ApplicationFlags { bitfield: 303104 },
    cover: null,
    rpcOrigins: [],
    botRequireCodeGrant: null,
    botPublic: null,
    owner: null,
    commands: ApplicationCommandManager {
      permissions: [ApplicationCommandPermissionsManager]
    }
  },
  readyAt: 2022-02-23T01:47:22.497Z,
  eco: EconomyManager {
    noNegative: undefined,
    prefix: undefined,
    adapter: { name: 'sqlite', options: undefined },
    db: SqliteManager {
      table: 'money',
      filename: 'eco',
      sqliteOptions: {},
      hasInit: true,
      db: [Database]
    }
  },
  db: table {
    tableName: 'inv',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  config: {
    token: 'ODk0MDYwMjgzMzczNDQ5MzE3.YVkghg.ik3wBzG3rjGWnsQ_o3S5edt12fM',
    prefix: 'potat',
    admins: [
      '709950767670493275',
      '879207914005479514',
      '829171854681964604'
    ],
    debug: true,
    countChannel: '',
    opt: {
      DJ: [Object],
      maxVol: 250,
      loopMessage: false,
      discordPlayer: [Object]
    }
  },
  shop: { laptop: { cost: 1000 }, potato: { cost: 1 } },
  job: table {
    tableName: 'job',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  commands: Collection(50) [Map] {
    'addmoney' => {
      name: 'addmoney',
      aliases: [Array],
      usage: 'addmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'bal' => {
      name: 'bal',
      aliases: [Array],
      usage: 'bal',
      execute: [AsyncFunction: execute]
    },
    'beg' => {
      name: 'beg',
      aliases: [],
      usage: 'beg',
      execute: [AsyncFunction: execute]
    },
    'buy' => {
      name: 'buy',
      aliases: [],
      usage: 'buy <item>',
      execute: [AsyncFunction: execute]
    },
    'daily' => {
      name: 'daily',
      aliases: [],
      usage: 'daily',
      execute: [AsyncFunction: execute]
    },
    'inventory' => {
      name: 'inventory',
      aliases: [Array],
      usage: 'inv',
      execute: [AsyncFunction: execute]
    },
    'lb' => {
      name: 'lb',
      aliases: [Array],
      usage: 'leaderboard',
      execute: [AsyncFunction: execute]
    },
    'search' => {
      name: 'search',
      aliases: [],
      utilisation: 'search [song name]',
      execute: [AsyncFunction: execute]
    },
    'setmoney' => {
      name: 'setmoney',
      usage: 'setmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'transfer' => {
      name: 'transfer',
      aliases: [Array],
      usage: 'transfer <member> <amount>',
      execute: [AsyncFunction: execute]
    },
    'weekly' => {
      name: 'weekly',
      usage: 'weekly',
      execute: [AsyncFunction: execute]
    },
    'work' => {
      name: 'work',
      aliases: [],
      usage: 'work',
      cooldown: 3600,
      execute: [Function: execute]
    },
    'say' => {
      name: 'say',
      aliases: [Array],
      description: 'make the bot repeat what you said',
      execute: [Function: execute]
    },
    'sayembed' => {
      name: 'sayembed',
      description: 'say something embed',
      usage: '<title, description>',
      execute: [Function: execute]
    },
    'train' => {
      name: 'train',
      description: 'random thing idk',
      execute: [Function: execute]
    },
    'fasttype' => {
      name: 'fasttype',
      description: 'type fast',
      execute: [AsyncFunction: execute]
    },
    'games' => {
      name: 'games',
      description: 'play some games',
      execute: [Function: execute]
    },
    'settings' => { name: 'settings', execute: [Function: execute] },
    'slots' => {
      name: 'slots',
      description: 'play some games',
      execute: [Function: execute]
    },
    'tictactoe' => {
      name: 'tictactoe',
      description: 'play tictactoe!',
      expectedArgs: '<opponent>',
      minArgs: 1,
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'addfakemember' => { name: 'addfakemember', execute: [Function: execute] },
    'change_status' => { name: 'change_status', execute: [Function: execute] },
    'dev' => {
      name: 'dev',
      description: 'be a dev by completing a form!',
      execute: [AsyncFunction: execute]
    },
    'help' => {
      name: 'help',
      aliases: [Array],
      description: 'List all of my commands or info about a specific command.',
      usage: '[command name]',
      cooldown: 5,
      execute: [Function: execute]
    },
    'ping' => {
      name: 'ping',
      description: 'Ping!',
      execute: [Function: execute]
    },
    'poll' => {
      name: 'poll',
      description: 'poll',
      usage: 'Title + Option 1 + Option 2 + Option 3 + etc',
      execute: [Function: execute]
    },
    'server' => {
      name: 'server',
      aliases: [Array],
      description: 'servers info...',
      cooldown: 5,
      guildOnly: true,
      args: false,
      execute: [Function: execute]
    },
    'suggest' => {
      name: 'suggest',
      description: 'suggest',
      usage: '<suggestion>',
      execute: [Function: execute]
    },
    'ban' => {
      name: 'ban',
      description: 'This command bans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'giverole' => {
      name: 'giverole',
      description: 'give someone a role',
      permission: 'MANAGE_MEMBERS',
      guildOnly: true,
      execute: [Function: execute]
    },
    'kick' => {
      name: 'kick',
      permissions: 'KICK_MEMBERS',
      description: 'this command kicks a member',
      execute: [Function: execute]
    },
    'mute' => {
      name: 'mute',
      description: 'mute someone',
      permissions: 'MANAGE_MESSAGES',
      guildOnly: true,
      execute: [Function: execute]
    },
    'reload' => {
      name: 'reload',
      description: 'Reloads a command',
      args: true,
      execute: [Function: execute]
    },
    'removerole' => {
      name: 'removerole',
      description: "remove someone's role",
      execute: [Function: execute]
    },
    'unban' => {
      name: 'unban',
      description: 'This command unbans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'back' => { name: 'back', aliases: [], execute: [AsyncFunction: execute] },
    'clear' => { name: 'clear', aliases: [], execute: [AsyncFunction: execute] },
    'filter' => {
      name: 'filter',
      aliases: [],
      usage: 'filter [filter name]',
      execute: [AsyncFunction: execute]
    },
    'loop' => {
      name: 'loop',
      aliases: [],
      usage: 'loop [song|queue]',
      execute: [Function: execute]
    },
    'nowplaying' => {
      name: 'nowplaying',
      aliases: [Array],
      execute: [Function: execute]
    },
    'pause' => { name: 'pause', aliases: [], execute: [Function: execute] },
    'play' => {
      name: 'play',
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'progress' => {
      name: 'progress',
      aliases: [Array],
      utilisation: 'progress',
      voiceChannel: true,
      execute: [AsyncFunction: execute]
    },
    'queue' => {
      name: 'queue',
      aliases: [Array],
      utilisation: '{prefix}queue',
      voiceChannel: true,
      execute: [Function: execute]
    },
    'remove' => { name: 'remove', aliases: [], execute: [AsyncFunction: execute] },
    'resume' => { name: 'resume', aliases: [], execute: [Function: execute] },
    'save' => { name: 'save', aliases: [], execute: [AsyncFunction: execute] },
    'skip' => { name: 'skip', aliases: [Array], execute: [Function: execute] },
    'stop' => { name: 'stop', aliases: [Array], execute: [Function: execute] },
    'volume' => {
      name: 'volume',
      aliases: [Array],
      utilisation: 'volume [1-250]',
      voiceChannel: true,
      execute: [Function: execute]
    }
  },
  cooldowns: Collection(6) [Map] {
    'ping' => Collection(0) [Map] {},
    'play' => Collection(1) [Map] { '709950767670493275' => 1645581370309 },
    'skip' => Collection(0) [Map] {},
    'queue' => Collection(0) [Map] {},
    'remove' => Collection(0) [Map] {},
    'search' => Collection(0) [Map] {}
  },
  player: Player {
    _events: [Object: null prototype] {
      error: [Function (anonymous)],
      connectionError: [Function (anonymous)],
      trackStart: [Function (anonymous)],
      trackAdd: [Function (anonymous)],
      botDisconnect: [Function (anonymous)],
      channelEmpty: [Function (anonymous)],
      queueEnd: [Function (anonymous)]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    options: {
      autoRegisterExtractor: true,
      ytdlOptions: [Object],
      connectionTimeout: 20000
    },
    queues: Collection(1) [Map] { '893532780946919536' => [Queue] },
    voiceUtils: VoiceUtils { cache: [Collection [Map]] },
    extractors: Collection(0) [Map] {},
    requiredEvents: [ 'error', 'connectionError' ],
    client: [Circular *1],
    [Symbol(kCapture)]: false
  },
  [Symbol(kCapture)]: false
}
<ref *1> Client {
  _events: [Object: null prototype] {
    shardDisconnect: [Function (anonymous)],
    voiceStateUpdate: [Function: bound _handleVoiceState],
    guildMemberAdd: [Function (anonymous)],
    message: [Function (anonymous)],
    ready: [Function (anonymous)]
  },
  _eventsCount: 5,
  _maxListeners: 10,
  options: {
    intents: 643,
    waitGuildTimeout: 15000,
    shardCount: 1,
    makeCache: [Function (anonymous)],
    messageCacheLifetime: 0,
    messageSweepInterval: 0,
    invalidRequestWarningInterval: 0,
    partials: [],
    restWsBridgeTimeout: 5000,
    restRequestTimeout: 15000,
    restGlobalRateLimit: 0,
    retryLimit: 1,
    restTimeOffset: 500,
    restSweepInterval: 60,
    failIfNotExists: true,
    userAgentSuffix: [],
    presence: { status: 'online', user: [Object] },
    sweepers: {},
    ws: {
      large_threshold: 50,
      compress: false,
      properties: [Object],
      version: 9,
      presence: [Object]
    },
    http: {
      agent: {},
      version: 9,
      api: 'https://discord.com/api',
      cdn: 'https://cdn.discordapp.com',
      invite: 'https://discord.gg',
      template: 'https://discord.new',
      scheduledEvent: 'https://discord.com/events'
    },
    shards: [ 0 ]
  },
  rest: RESTManager {
    client: [Circular *1],
    handlers: Collection(0) [Map] {},
    versioned: true,
    globalLimit: Infinity,
    globalRemaining: Infinity,
    globalReset: 1645581372259,
    globalDelay: null,
    sweepInterval: Timeout {
      _idleTimeout: 60000,
      _idlePrev: [TimersList],
      _idleNext: [Timeout],
      _idleStart: 542580,
      _onTimeout: [Function (anonymous)],
      _timerArgs: undefined,
      _repeat: 60000,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(kHasPrimitive)]: false,
      [Symbol(asyncId)]: 12,
      [Symbol(triggerId)]: 1
    }
  },
  _cleanups: Set(50) {
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ]
  },
  _finalizers: FinalizationRegistry {},
  ws: WebSocketManager {
    _events: [Object: null prototype] {},
    _eventsCount: 0,
    _maxListeners: undefined,
    gateway: 'wss://gateway.discord.gg/',
    totalShards: 1,
    shards: Collection(1) [Map] { 0 => [WebSocketShard] },
    status: 0,
    destroyed: false,
    reconnecting: false,
    [Symbol(kCapture)]: false
  },
  actions: ActionsManager {
    client: [Circular *1],
    ChannelCreate: ChannelCreateAction { client: [Circular *1] },
    ChannelDelete: ChannelDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    ChannelUpdate: ChannelUpdateAction { client: [Circular *1] },
    GuildBanAdd: GuildBanAdd { client: [Circular *1] },
    GuildBanRemove: GuildBanRemove { client: [Circular *1] },
    GuildChannelsPositionUpdate: GuildChannelsPositionUpdate { client: [Circular *1] },
    GuildDelete: GuildDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    GuildEmojiCreate: GuildEmojiCreateAction { client: [Circular *1] },
    GuildEmojiDelete: GuildEmojiDeleteAction { client: [Circular *1] },
    GuildEmojiUpdate: GuildEmojiUpdateAction { client: [Circular *1] },
    GuildEmojisUpdate: GuildEmojisUpdateAction { client: [Circular *1] },
    GuildIntegrationsUpdate: GuildIntegrationsUpdate { client: [Circular *1] },
    GuildMemberRemove: GuildMemberRemoveAction { client: [Circular *1] },
    GuildMemberUpdate: GuildMemberUpdateAction { client: [Circular *1] },
    GuildRoleCreate: GuildRoleCreate { client: [Circular *1] },
    GuildRoleDelete: GuildRoleDeleteAction { client: [Circular *1] },
    GuildRoleUpdate: GuildRoleUpdateAction { client: [Circular *1] },
    GuildRolesPositionUpdate: GuildRolesPositionUpdate { client: [Circular *1] },
    GuildScheduledEventCreate: GuildScheduledEventCreateAction { client: [Circular *1] },
    GuildScheduledEventDelete: GuildScheduledEventDeleteAction { client: [Circular *1] },
    GuildScheduledEventUpdate: GuildScheduledEventUpdateAction { client: [Circular *1] },
    GuildScheduledEventUserAdd: GuildScheduledEventUserAddAction { client: [Circular *1] },
    GuildScheduledEventUserRemove: GuildScheduledEventUserRemoveAction { client: [Circular *1] },
    GuildStickerCreate: GuildStickerCreateAction { client: [Circular *1] },
    GuildStickerDelete: GuildStickerDeleteAction { client: [Circular *1] },
    GuildStickerUpdate: GuildStickerUpdateAction { client: [Circular *1] },
    GuildStickersUpdate: GuildStickersUpdateAction { client: [Circular *1] },
    GuildUpdate: GuildUpdateAction { client: [Circular *1] },
    InteractionCreate: InteractionCreateAction { client: [Circular *1] },
    InviteCreate: InviteCreateAction { client: [Circular *1] },
    InviteDelete: InviteDeleteAction { client: [Circular *1] },
    MessageCreate: MessageCreateAction { client: [Circular *1] },
    MessageDelete: MessageDeleteAction { client: [Circular *1] },
    MessageDeleteBulk: MessageDeleteBulkAction { client: [Circular *1] },
    MessageReactionAdd: MessageReactionAdd { client: [Circular *1] },
    MessageReactionRemove: MessageReactionRemove { client: [Circular *1] },
    MessageReactionRemoveAll: MessageReactionRemoveAll { client: [Circular *1] },
    MessageReactionRemoveEmoji: MessageReactionRemoveEmoji { client: [Circular *1] },
    MessageUpdate: MessageUpdateAction { client: [Circular *1] },
    PresenceUpdate: PresenceUpdateAction { client: [Circular *1] },
    StageInstanceCreate: StageInstanceCreateAction { client: [Circular *1] },
    StageInstanceDelete: StageInstanceDeleteAction { client: [Circular *1] },
    StageInstanceUpdate: StageInstanceUpdateAction { client: [Circular *1] },
    ThreadCreate: ThreadCreateAction { client: [Circular *1] },
    ThreadDelete: ThreadDeleteAction { client: [Circular *1] },
    ThreadListSync: ThreadListSyncAction { client: [Circular *1] },
    ThreadMemberUpdate: ThreadMemberUpdateAction { client: [Circular *1] },
    ThreadMembersUpdate: ThreadMembersUpdateAction { client: [Circular *1] },
    TypingStart: TypingStart { client: [Circular *1] },
    UserUpdate: UserUpdateAction { client: [Circular *1] },
    VoiceStateUpdate: VoiceStateUpdate { client: [Circular *1] },
    WebhooksUpdate: WebhooksUpdate { client: [Circular *1] }
  },
  voice: ClientVoiceManager {
    adapters: Map(1) { '893532780946919536' => [Object] }
  },
  shard: null,
  users: UserManager {},
  guilds: GuildManager {},
  channels: ChannelManager {},
  sweepers: Sweepers {
    options: {},
    intervals: {
      applicationCommands: null,
      bans: null,
      emojis: null,
      invites: null,
      guildMembers: null,
      messages: null,
      presences: null,
      reactions: null,
      stageInstances: null,
      stickers: null,
      threadMembers: null,
      threads: null,
      users: null,
      voiceStates: null
    }
  },
  presence: ClientPresence {
    userId: null,
    guild: null,
    status: 'online',
    activities: [],
    clientStatus: null
  },
  user: ClientUser {
    id: '894060283373449317',
    bot: true,
    system: false,
    flags: UserFlags { bitfield: 0 },
    username: 'Potato bot',
    discriminator: '1627',
    avatar: 'f169fbb08deede7893419429cf1bc9ab',
    banner: null,
    accentColor: null,
    verified: true,
    mfaEnabled: false
  },
  application: ClientApplication {
    id: '894060283373449317',
    name: null,
    description: null,
    icon: null,
    flags: ApplicationFlags { bitfield: 303104 },
    cover: null,
    rpcOrigins: [],
    botRequireCodeGrant: null,
    botPublic: null,
    owner: null,
    commands: ApplicationCommandManager {
      permissions: [ApplicationCommandPermissionsManager]
    }
  },
  readyAt: 2022-02-23T01:47:22.497Z,
  eco: EconomyManager {
    noNegative: undefined,
    prefix: undefined,
    adapter: { name: 'sqlite', options: undefined },
    db: SqliteManager {
      table: 'money',
      filename: 'eco',
      sqliteOptions: {},
      hasInit: true,
      db: [Database]
    }
  },
  db: table {
    tableName: 'inv',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  config: {
    token: 'ODk0MDYwMjgzMzczNDQ5MzE3.YVkghg.ik3wBzG3rjGWnsQ_o3S5edt12fM',
    prefix: 'potat',
    admins: [
      '709950767670493275',
      '879207914005479514',
      '829171854681964604'
    ],
    debug: true,
    countChannel: '',
    opt: {
      DJ: [Object],
      maxVol: 250,
      loopMessage: false,
      discordPlayer: [Object]
    }
  },
  shop: { laptop: { cost: 1000 }, potato: { cost: 1 } },
  job: table {
    tableName: 'job',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  commands: Collection(50) [Map] {
    'addmoney' => {
      name: 'addmoney',
      aliases: [Array],
      usage: 'addmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'bal' => {
      name: 'bal',
      aliases: [Array],
      usage: 'bal',
      execute: [AsyncFunction: execute]
    },
    'beg' => {
      name: 'beg',
      aliases: [],
      usage: 'beg',
      execute: [AsyncFunction: execute]
    },
    'buy' => {
      name: 'buy',
      aliases: [],
      usage: 'buy <item>',
      execute: [AsyncFunction: execute]
    },
    'daily' => {
      name: 'daily',
      aliases: [],
      usage: 'daily',
      execute: [AsyncFunction: execute]
    },
    'inventory' => {
      name: 'inventory',
      aliases: [Array],
      usage: 'inv',
      execute: [AsyncFunction: execute]
    },
    'lb' => {
      name: 'lb',
      aliases: [Array],
      usage: 'leaderboard',
      execute: [AsyncFunction: execute]
    },
    'search' => {
      name: 'search',
      aliases: [],
      utilisation: 'search [song name]',
      execute: [AsyncFunction: execute]
    },
    'setmoney' => {
      name: 'setmoney',
      usage: 'setmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'transfer' => {
      name: 'transfer',
      aliases: [Array],
      usage: 'transfer <member> <amount>',
      execute: [AsyncFunction: execute]
    },
    'weekly' => {
      name: 'weekly',
      usage: 'weekly',
      execute: [AsyncFunction: execute]
    },
    'work' => {
      name: 'work',
      aliases: [],
      usage: 'work',
      cooldown: 3600,
      execute: [Function: execute]
    },
    'say' => {
      name: 'say',
      aliases: [Array],
      description: 'make the bot repeat what you said',
      execute: [Function: execute]
    },
    'sayembed' => {
      name: 'sayembed',
      description: 'say something embed',
      usage: '<title, description>',
      execute: [Function: execute]
    },
    'train' => {
      name: 'train',
      description: 'random thing idk',
      execute: [Function: execute]
    },
    'fasttype' => {
      name: 'fasttype',
      description: 'type fast',
      execute: [AsyncFunction: execute]
    },
    'games' => {
      name: 'games',
      description: 'play some games',
      execute: [Function: execute]
    },
    'settings' => { name: 'settings', execute: [Function: execute] },
    'slots' => {
      name: 'slots',
      description: 'play some games',
      execute: [Function: execute]
    },
    'tictactoe' => {
      name: 'tictactoe',
      description: 'play tictactoe!',
      expectedArgs: '<opponent>',
      minArgs: 1,
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'addfakemember' => { name: 'addfakemember', execute: [Function: execute] },
    'change_status' => { name: 'change_status', execute: [Function: execute] },
    'dev' => {
      name: 'dev',
      description: 'be a dev by completing a form!',
      execute: [AsyncFunction: execute]
    },
    'help' => {
      name: 'help',
      aliases: [Array],
      description: 'List all of my commands or info about a specific command.',
      usage: '[command name]',
      cooldown: 5,
      execute: [Function: execute]
    },
    'ping' => {
      name: 'ping',
      description: 'Ping!',
      execute: [Function: execute]
    },
    'poll' => {
      name: 'poll',
      description: 'poll',
      usage: 'Title + Option 1 + Option 2 + Option 3 + etc',
      execute: [Function: execute]
    },
    'server' => {
      name: 'server',
      aliases: [Array],
      description: 'servers info...',
      cooldown: 5,
      guildOnly: true,
      args: false,
      execute: [Function: execute]
    },
    'suggest' => {
      name: 'suggest',
      description: 'suggest',
      usage: '<suggestion>',
      execute: [Function: execute]
    },
    'ban' => {
      name: 'ban',
      description: 'This command bans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'giverole' => {
      name: 'giverole',
      description: 'give someone a role',
      permission: 'MANAGE_MEMBERS',
      guildOnly: true,
      execute: [Function: execute]
    },
    'kick' => {
      name: 'kick',
      permissions: 'KICK_MEMBERS',
      description: 'this command kicks a member',
      execute: [Function: execute]
    },
    'mute' => {
      name: 'mute',
      description: 'mute someone',
      permissions: 'MANAGE_MESSAGES',
      guildOnly: true,
      execute: [Function: execute]
    },
    'reload' => {
      name: 'reload',
      description: 'Reloads a command',
      args: true,
      execute: [Function: execute]
    },
    'removerole' => {
      name: 'removerole',
      description: "remove someone's role",
      execute: [Function: execute]
    },
    'unban' => {
      name: 'unban',
      description: 'This command unbans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'back' => { name: 'back', aliases: [], execute: [AsyncFunction: execute] },
    'clear' => { name: 'clear', aliases: [], execute: [AsyncFunction: execute] },
    'filter' => {
      name: 'filter',
      aliases: [],
      usage: 'filter [filter name]',
      execute: [AsyncFunction: execute]
    },
    'loop' => {
      name: 'loop',
      aliases: [],
      usage: 'loop [song|queue]',
      execute: [Function: execute]
    },
    'nowplaying' => {
      name: 'nowplaying',
      aliases: [Array],
      execute: [Function: execute]
    },
    'pause' => { name: 'pause', aliases: [], execute: [Function: execute] },
    'play' => {
      name: 'play',
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'progress' => {
      name: 'progress',
      aliases: [Array],
      utilisation: 'progress',
      voiceChannel: true,
      execute: [AsyncFunction: execute]
    },
    'queue' => {
      name: 'queue',
      aliases: [Array],
      utilisation: '{prefix}queue',
      voiceChannel: true,
      execute: [Function: execute]
    },
    'remove' => { name: 'remove', aliases: [], execute: [AsyncFunction: execute] },
    'resume' => { name: 'resume', aliases: [], execute: [Function: execute] },
    'save' => { name: 'save', aliases: [], execute: [AsyncFunction: execute] },
    'skip' => { name: 'skip', aliases: [Array], execute: [Function: execute] },
    'stop' => { name: 'stop', aliases: [Array], execute: [Function: execute] },
    'volume' => {
      name: 'volume',
      aliases: [Array],
      utilisation: 'volume [1-250]',
      voiceChannel: true,
      execute: [Function: execute]
    }
  },
  cooldowns: Collection(6) [Map] {
    'ping' => Collection(0) [Map] {},
    'play' => Collection(1) [Map] { '709950767670493275' => 1645581382975 },
    'skip' => Collection(0) [Map] {},
    'queue' => Collection(0) [Map] {},
    'remove' => Collection(0) [Map] {},
    'search' => Collection(0) [Map] {}
  },
  player: Player {
    _events: [Object: null prototype] {
      error: [Function (anonymous)],
      connectionError: [Function (anonymous)],
      trackStart: [Function (anonymous)],
      trackAdd: [Function (anonymous)],
      botDisconnect: [Function (anonymous)],
      channelEmpty: [Function (anonymous)],
      queueEnd: [Function (anonymous)]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    options: {
      autoRegisterExtractor: true,
      ytdlOptions: [Object],
      connectionTimeout: 20000
    },
    queues: Collection(1) [Map] { '893532780946919536' => [Queue] },
    voiceUtils: VoiceUtils { cache: [Collection [Map]] },
    extractors: Collection(0) [Map] {},
    requiredEvents: [ 'error', 'connectionError' ],
    client: [Circular *1],
    [Symbol(kCapture)]: false
  },
  [Symbol(kCapture)]: false
}
<ref *1> Client {
  _events: [Object: null prototype] {
    shardDisconnect: [Function (anonymous)],
    voiceStateUpdate: [Function: bound _handleVoiceState],
    guildMemberAdd: [Function (anonymous)],
    message: [Function (anonymous)],
    ready: [Function (anonymous)]
  },
  _eventsCount: 5,
  _maxListeners: 10,
  options: {
    intents: 643,
    waitGuildTimeout: 15000,
    shardCount: 1,
    makeCache: [Function (anonymous)],
    messageCacheLifetime: 0,
    messageSweepInterval: 0,
    invalidRequestWarningInterval: 0,
    partials: [],
    restWsBridgeTimeout: 5000,
    restRequestTimeout: 15000,
    restGlobalRateLimit: 0,
    retryLimit: 1,
    restTimeOffset: 500,
    restSweepInterval: 60,
    failIfNotExists: true,
    userAgentSuffix: [],
    presence: { status: 'online', user: [Object] },
    sweepers: {},
    ws: {
      large_threshold: 50,
      compress: false,
      properties: [Object],
      version: 9,
      presence: [Object]
    },
    http: {
      agent: {},
      version: 9,
      api: 'https://discord.com/api',
      cdn: 'https://cdn.discordapp.com',
      invite: 'https://discord.gg',
      template: 'https://discord.new',
      scheduledEvent: 'https://discord.com/events'
    },
    shards: [ 0 ]
  },
  rest: RESTManager {
    client: [Circular *1],
    handlers: Collection(1) [Map] {
      '/channels/894764535892819988/messages' => [RequestHandler]
    },
    versioned: true,
    globalLimit: Infinity,
    globalRemaining: Infinity,
    globalReset: 1645581394676,
    globalDelay: null,
    sweepInterval: Timeout {
      _idleTimeout: 60000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 542580,
      _onTimeout: [Function (anonymous)],
      _timerArgs: undefined,
      _repeat: 60000,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(kHasPrimitive)]: false,
      [Symbol(asyncId)]: 12,
      [Symbol(triggerId)]: 1
    }
  },
  _cleanups: Set(50) {
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ]
  },
  _finalizers: FinalizationRegistry {},
  ws: WebSocketManager {
    _events: [Object: null prototype] {},
    _eventsCount: 0,
    _maxListeners: undefined,
    gateway: 'wss://gateway.discord.gg/',
    totalShards: 1,
    shards: Collection(1) [Map] { 0 => [WebSocketShard] },
    status: 0,
    destroyed: false,
    reconnecting: false,
    [Symbol(kCapture)]: false
  },
  actions: ActionsManager {
    client: [Circular *1],
    ChannelCreate: ChannelCreateAction { client: [Circular *1] },
    ChannelDelete: ChannelDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    ChannelUpdate: ChannelUpdateAction { client: [Circular *1] },
    GuildBanAdd: GuildBanAdd { client: [Circular *1] },
    GuildBanRemove: GuildBanRemove { client: [Circular *1] },
    GuildChannelsPositionUpdate: GuildChannelsPositionUpdate { client: [Circular *1] },
    GuildDelete: GuildDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    GuildEmojiCreate: GuildEmojiCreateAction { client: [Circular *1] },
    GuildEmojiDelete: GuildEmojiDeleteAction { client: [Circular *1] },
    GuildEmojiUpdate: GuildEmojiUpdateAction { client: [Circular *1] },
    GuildEmojisUpdate: GuildEmojisUpdateAction { client: [Circular *1] },
    GuildIntegrationsUpdate: GuildIntegrationsUpdate { client: [Circular *1] },
    GuildMemberRemove: GuildMemberRemoveAction { client: [Circular *1] },
    GuildMemberUpdate: GuildMemberUpdateAction { client: [Circular *1] },
    GuildRoleCreate: GuildRoleCreate { client: [Circular *1] },
    GuildRoleDelete: GuildRoleDeleteAction { client: [Circular *1] },
    GuildRoleUpdate: GuildRoleUpdateAction { client: [Circular *1] },
    GuildRolesPositionUpdate: GuildRolesPositionUpdate { client: [Circular *1] },
    GuildScheduledEventCreate: GuildScheduledEventCreateAction { client: [Circular *1] },
    GuildScheduledEventDelete: GuildScheduledEventDeleteAction { client: [Circular *1] },
    GuildScheduledEventUpdate: GuildScheduledEventUpdateAction { client: [Circular *1] },
    GuildScheduledEventUserAdd: GuildScheduledEventUserAddAction { client: [Circular *1] },
    GuildScheduledEventUserRemove: GuildScheduledEventUserRemoveAction { client: [Circular *1] },
    GuildStickerCreate: GuildStickerCreateAction { client: [Circular *1] },
    GuildStickerDelete: GuildStickerDeleteAction { client: [Circular *1] },
    GuildStickerUpdate: GuildStickerUpdateAction { client: [Circular *1] },
    GuildStickersUpdate: GuildStickersUpdateAction { client: [Circular *1] },
    GuildUpdate: GuildUpdateAction { client: [Circular *1] },
    InteractionCreate: InteractionCreateAction { client: [Circular *1] },
    InviteCreate: InviteCreateAction { client: [Circular *1] },
    InviteDelete: InviteDeleteAction { client: [Circular *1] },
    MessageCreate: MessageCreateAction { client: [Circular *1] },
    MessageDelete: MessageDeleteAction { client: [Circular *1] },
    MessageDeleteBulk: MessageDeleteBulkAction { client: [Circular *1] },
    MessageReactionAdd: MessageReactionAdd { client: [Circular *1] },
    MessageReactionRemove: MessageReactionRemove { client: [Circular *1] },
    MessageReactionRemoveAll: MessageReactionRemoveAll { client: [Circular *1] },
    MessageReactionRemoveEmoji: MessageReactionRemoveEmoji { client: [Circular *1] },
    MessageUpdate: MessageUpdateAction { client: [Circular *1] },
    PresenceUpdate: PresenceUpdateAction { client: [Circular *1] },
    StageInstanceCreate: StageInstanceCreateAction { client: [Circular *1] },
    StageInstanceDelete: StageInstanceDeleteAction { client: [Circular *1] },
    StageInstanceUpdate: StageInstanceUpdateAction { client: [Circular *1] },
    ThreadCreate: ThreadCreateAction { client: [Circular *1] },
    ThreadDelete: ThreadDeleteAction { client: [Circular *1] },
    ThreadListSync: ThreadListSyncAction { client: [Circular *1] },
    ThreadMemberUpdate: ThreadMemberUpdateAction { client: [Circular *1] },
    ThreadMembersUpdate: ThreadMembersUpdateAction { client: [Circular *1] },
    TypingStart: TypingStart { client: [Circular *1] },
    UserUpdate: UserUpdateAction { client: [Circular *1] },
    VoiceStateUpdate: VoiceStateUpdate { client: [Circular *1] },
    WebhooksUpdate: WebhooksUpdate { client: [Circular *1] }
  },
  voice: ClientVoiceManager {
    adapters: Map(1) { '893532780946919536' => [Object] }
  },
  shard: null,
  users: UserManager {},
  guilds: GuildManager {},
  channels: ChannelManager {},
  sweepers: Sweepers {
    options: {},
    intervals: {
      applicationCommands: null,
      bans: null,
      emojis: null,
      invites: null,
      guildMembers: null,
      messages: null,
      presences: null,
      reactions: null,
      stageInstances: null,
      stickers: null,
      threadMembers: null,
      threads: null,
      users: null,
      voiceStates: null
    }
  },
  presence: ClientPresence {
    userId: null,
    guild: null,
    status: 'online',
    activities: [],
    clientStatus: null
  },
  user: ClientUser {
    id: '894060283373449317',
    bot: true,
    system: false,
    flags: UserFlags { bitfield: 0 },
    username: 'Potato bot',
    discriminator: '1627',
    avatar: 'f169fbb08deede7893419429cf1bc9ab',
    banner: null,
    accentColor: null,
    verified: true,
    mfaEnabled: false
  },
  application: ClientApplication {
    id: '894060283373449317',
    name: null,
    description: null,
    icon: null,
    flags: ApplicationFlags { bitfield: 303104 },
    cover: null,
    rpcOrigins: [],
    botRequireCodeGrant: null,
    botPublic: null,
    owner: null,
    commands: ApplicationCommandManager {
      permissions: [ApplicationCommandPermissionsManager]
    }
  },
  readyAt: 2022-02-23T01:47:22.497Z,
  eco: EconomyManager {
    noNegative: undefined,
    prefix: undefined,
    adapter: { name: 'sqlite', options: undefined },
    db: SqliteManager {
      table: 'money',
      filename: 'eco',
      sqliteOptions: {},
      hasInit: true,
      db: [Database]
    }
  },
  db: table {
    tableName: 'inv',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  config: {
    token: 'ODk0MDYwMjgzMzczNDQ5MzE3.YVkghg.ik3wBzG3rjGWnsQ_o3S5edt12fM',
    prefix: 'potat',
    admins: [
      '709950767670493275',
      '879207914005479514',
      '829171854681964604'
    ],
    debug: true,
    countChannel: '',
    opt: {
      DJ: [Object],
      maxVol: 250,
      loopMessage: false,
      discordPlayer: [Object]
    }
  },
  shop: { laptop: { cost: 1000 }, potato: { cost: 1 } },
  job: table {
    tableName: 'job',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  commands: Collection(50) [Map] {
    'addmoney' => {
      name: 'addmoney',
      aliases: [Array],
      usage: 'addmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'bal' => {
      name: 'bal',
      aliases: [Array],
      usage: 'bal',
      execute: [AsyncFunction: execute]
    },
    'beg' => {
      name: 'beg',
      aliases: [],
      usage: 'beg',
      execute: [AsyncFunction: execute]
    },
    'buy' => {
      name: 'buy',
      aliases: [],
      usage: 'buy <item>',
      execute: [AsyncFunction: execute]
    },
    'daily' => {
      name: 'daily',
      aliases: [],
      usage: 'daily',
      execute: [AsyncFunction: execute]
    },
    'inventory' => {
      name: 'inventory',
      aliases: [Array],
      usage: 'inv',
      execute: [AsyncFunction: execute]
    },
    'lb' => {
      name: 'lb',
      aliases: [Array],
      usage: 'leaderboard',
      execute: [AsyncFunction: execute]
    },
    'search' => {
      name: 'search',
      aliases: [],
      utilisation: 'search [song name]',
      execute: [AsyncFunction: execute]
    },
    'setmoney' => {
      name: 'setmoney',
      usage: 'setmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'transfer' => {
      name: 'transfer',
      aliases: [Array],
      usage: 'transfer <member> <amount>',
      execute: [AsyncFunction: execute]
    },
    'weekly' => {
      name: 'weekly',
      usage: 'weekly',
      execute: [AsyncFunction: execute]
    },
    'work' => {
      name: 'work',
      aliases: [],
      usage: 'work',
      cooldown: 3600,
      execute: [Function: execute]
    },
    'say' => {
      name: 'say',
      aliases: [Array],
      description: 'make the bot repeat what you said',
      execute: [Function: execute]
    },
    'sayembed' => {
      name: 'sayembed',
      description: 'say something embed',
      usage: '<title, description>',
      execute: [Function: execute]
    },
    'train' => {
      name: 'train',
      description: 'random thing idk',
      execute: [Function: execute]
    },
    'fasttype' => {
      name: 'fasttype',
      description: 'type fast',
      execute: [AsyncFunction: execute]
    },
    'games' => {
      name: 'games',
      description: 'play some games',
      execute: [Function: execute]
    },
    'settings' => { name: 'settings', execute: [Function: execute] },
    'slots' => {
      name: 'slots',
      description: 'play some games',
      execute: [Function: execute]
    },
    'tictactoe' => {
      name: 'tictactoe',
      description: 'play tictactoe!',
      expectedArgs: '<opponent>',
      minArgs: 1,
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'addfakemember' => { name: 'addfakemember', execute: [Function: execute] },
    'change_status' => { name: 'change_status', execute: [Function: execute] },
    'dev' => {
      name: 'dev',
      description: 'be a dev by completing a form!',
      execute: [AsyncFunction: execute]
    },
    'help' => {
      name: 'help',
      aliases: [Array],
      description: 'List all of my commands or info about a specific command.',
      usage: '[command name]',
      cooldown: 5,
      execute: [Function: execute]
    },
    'ping' => {
      name: 'ping',
      description: 'Ping!',
      execute: [Function: execute]
    },
    'poll' => {
      name: 'poll',
      description: 'poll',
      usage: 'Title + Option 1 + Option 2 + Option 3 + etc',
      execute: [Function: execute]
    },
    'server' => {
      name: 'server',
      aliases: [Array],
      description: 'servers info...',
      cooldown: 5,
      guildOnly: true,
      args: false,
      execute: [Function: execute]
    },
    'suggest' => {
      name: 'suggest',
      description: 'suggest',
      usage: '<suggestion>',
      execute: [Function: execute]
    },
    'ban' => {
      name: 'ban',
      description: 'This command bans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'giverole' => {
      name: 'giverole',
      description: 'give someone a role',
      permission: 'MANAGE_MEMBERS',
      guildOnly: true,
      execute: [Function: execute]
    },
    'kick' => {
      name: 'kick',
      permissions: 'KICK_MEMBERS',
      description: 'this command kicks a member',
      execute: [Function: execute]
    },
    'mute' => {
      name: 'mute',
      description: 'mute someone',
      permissions: 'MANAGE_MESSAGES',
      guildOnly: true,
      execute: [Function: execute]
    },
    'reload' => {
      name: 'reload',
      description: 'Reloads a command',
      args: true,
      execute: [Function: execute]
    },
    'removerole' => {
      name: 'removerole',
      description: "remove someone's role",
      execute: [Function: execute]
    },
    'unban' => {
      name: 'unban',
      description: 'This command unbans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'back' => { name: 'back', aliases: [], execute: [AsyncFunction: execute] },
    'clear' => { name: 'clear', aliases: [], execute: [AsyncFunction: execute] },
    'filter' => {
      name: 'filter',
      aliases: [],
      usage: 'filter [filter name]',
      execute: [AsyncFunction: execute]
    },
    'loop' => {
      name: 'loop',
      aliases: [],
      usage: 'loop [song|queue]',
      execute: [Function: execute]
    },
    'nowplaying' => {
      name: 'nowplaying',
      aliases: [Array],
      execute: [Function: execute]
    },
    'pause' => { name: 'pause', aliases: [], execute: [Function: execute] },
    'play' => {
      name: 'play',
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'progress' => {
      name: 'progress',
      aliases: [Array],
      utilisation: 'progress',
      voiceChannel: true,
      execute: [AsyncFunction: execute]
    },
    'queue' => {
      name: 'queue',
      aliases: [Array],
      utilisation: '{prefix}queue',
      voiceChannel: true,
      execute: [Function: execute]
    },
    'remove' => { name: 'remove', aliases: [], execute: [AsyncFunction: execute] },
    'resume' => { name: 'resume', aliases: [], execute: [Function: execute] },
    'save' => { name: 'save', aliases: [], execute: [AsyncFunction: execute] },
    'skip' => { name: 'skip', aliases: [Array], execute: [Function: execute] },
    'stop' => { name: 'stop', aliases: [Array], execute: [Function: execute] },
    'volume' => {
      name: 'volume',
      aliases: [Array],
      utilisation: 'volume [1-250]',
      voiceChannel: true,
      execute: [Function: execute]
    }
  },
  cooldowns: Collection(6) [Map] {
    'ping' => Collection(0) [Map] {},
    'play' => Collection(1) [Map] { '709950767670493275' => 1645581407649 },
    'skip' => Collection(0) [Map] {},
    'queue' => Collection(0) [Map] {},
    'remove' => Collection(0) [Map] {},
    'search' => Collection(0) [Map] {}
  },
  player: Player {
    _events: [Object: null prototype] {
      error: [Function (anonymous)],
      connectionError: [Function (anonymous)],
      trackStart: [Function (anonymous)],
      trackAdd: [Function (anonymous)],
      botDisconnect: [Function (anonymous)],
      channelEmpty: [Function (anonymous)],
      queueEnd: [Function (anonymous)]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    options: {
      autoRegisterExtractor: true,
      ytdlOptions: [Object],
      connectionTimeout: 20000
    },
    queues: Collection(1) [Map] { '893532780946919536' => [Queue] },
    voiceUtils: VoiceUtils { cache: [Collection [Map]] },
    extractors: Collection(0) [Map] {},
    requiredEvents: [ 'error', 'connectionError' ],
    client: [Circular *1],
    [Symbol(kCapture)]: false
  },
  [Symbol(kCapture)]: false
}
<ref *1> Client {
  _events: [Object: null prototype] {
    shardDisconnect: [Function (anonymous)],
    voiceStateUpdate: [Function: bound _handleVoiceState],
    guildMemberAdd: [Function (anonymous)],
    message: [Function (anonymous)],
    ready: [Function (anonymous)]
  },
  _eventsCount: 5,
  _maxListeners: 10,
  options: {
    intents: 643,
    waitGuildTimeout: 15000,
    shardCount: 1,
    makeCache: [Function (anonymous)],
    messageCacheLifetime: 0,
    messageSweepInterval: 0,
    invalidRequestWarningInterval: 0,
    partials: [],
    restWsBridgeTimeout: 5000,
    restRequestTimeout: 15000,
    restGlobalRateLimit: 0,
    retryLimit: 1,
    restTimeOffset: 500,
    restSweepInterval: 60,
    failIfNotExists: true,
    userAgentSuffix: [],
    presence: { status: 'online', user: [Object] },
    sweepers: {},
    ws: {
      large_threshold: 50,
      compress: false,
      properties: [Object],
      version: 9,
      presence: [Object]
    },
    http: {
      agent: {},
      version: 9,
      api: 'https://discord.com/api',
      cdn: 'https://cdn.discordapp.com',
      invite: 'https://discord.gg',
      template: 'https://discord.new',
      scheduledEvent: 'https://discord.com/events'
    },
    shards: [ 0 ]
  },
  rest: RESTManager {
    client: [Circular *1],
    handlers: Collection(0) [Map] {},
    versioned: true,
    globalLimit: Infinity,
    globalRemaining: Infinity,
    globalReset: 1645581412957,
    globalDelay: null,
    sweepInterval: Timeout {
      _idleTimeout: 60000,
      _idlePrev: [TimersList],
      _idleNext: [Timeout],
      _idleStart: 602588,
      _onTimeout: [Function (anonymous)],
      _timerArgs: undefined,
      _repeat: 60000,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(kHasPrimitive)]: false,
      [Symbol(asyncId)]: 12,
      [Symbol(triggerId)]: 1
    }
  },
  _cleanups: Set(50) {
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ]
  },
  _finalizers: FinalizationRegistry {},
  ws: WebSocketManager {
    _events: [Object: null prototype] {},
    _eventsCount: 0,
    _maxListeners: undefined,
    gateway: 'wss://gateway.discord.gg/',
    totalShards: 1,
    shards: Collection(1) [Map] { 0 => [WebSocketShard] },
    status: 0,
    destroyed: false,
    reconnecting: false,
    [Symbol(kCapture)]: false
  },
  actions: ActionsManager {
    client: [Circular *1],
    ChannelCreate: ChannelCreateAction { client: [Circular *1] },
    ChannelDelete: ChannelDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    ChannelUpdate: ChannelUpdateAction { client: [Circular *1] },
    GuildBanAdd: GuildBanAdd { client: [Circular *1] },
    GuildBanRemove: GuildBanRemove { client: [Circular *1] },
    GuildChannelsPositionUpdate: GuildChannelsPositionUpdate { client: [Circular *1] },
    GuildDelete: GuildDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    GuildEmojiCreate: GuildEmojiCreateAction { client: [Circular *1] },
    GuildEmojiDelete: GuildEmojiDeleteAction { client: [Circular *1] },
    GuildEmojiUpdate: GuildEmojiUpdateAction { client: [Circular *1] },
    GuildEmojisUpdate: GuildEmojisUpdateAction { client: [Circular *1] },
    GuildIntegrationsUpdate: GuildIntegrationsUpdate { client: [Circular *1] },
    GuildMemberRemove: GuildMemberRemoveAction { client: [Circular *1] },
    GuildMemberUpdate: GuildMemberUpdateAction { client: [Circular *1] },
    GuildRoleCreate: GuildRoleCreate { client: [Circular *1] },
    GuildRoleDelete: GuildRoleDeleteAction { client: [Circular *1] },
    GuildRoleUpdate: GuildRoleUpdateAction { client: [Circular *1] },
    GuildRolesPositionUpdate: GuildRolesPositionUpdate { client: [Circular *1] },
    GuildScheduledEventCreate: GuildScheduledEventCreateAction { client: [Circular *1] },
    GuildScheduledEventDelete: GuildScheduledEventDeleteAction { client: [Circular *1] },
    GuildScheduledEventUpdate: GuildScheduledEventUpdateAction { client: [Circular *1] },
    GuildScheduledEventUserAdd: GuildScheduledEventUserAddAction { client: [Circular *1] },
    GuildScheduledEventUserRemove: GuildScheduledEventUserRemoveAction { client: [Circular *1] },
    GuildStickerCreate: GuildStickerCreateAction { client: [Circular *1] },
    GuildStickerDelete: GuildStickerDeleteAction { client: [Circular *1] },
    GuildStickerUpdate: GuildStickerUpdateAction { client: [Circular *1] },
    GuildStickersUpdate: GuildStickersUpdateAction { client: [Circular *1] },
    GuildUpdate: GuildUpdateAction { client: [Circular *1] },
    InteractionCreate: InteractionCreateAction { client: [Circular *1] },
    InviteCreate: InviteCreateAction { client: [Circular *1] },
    InviteDelete: InviteDeleteAction { client: [Circular *1] },
    MessageCreate: MessageCreateAction { client: [Circular *1] },
    MessageDelete: MessageDeleteAction { client: [Circular *1] },
    MessageDeleteBulk: MessageDeleteBulkAction { client: [Circular *1] },
    MessageReactionAdd: MessageReactionAdd { client: [Circular *1] },
    MessageReactionRemove: MessageReactionRemove { client: [Circular *1] },
    MessageReactionRemoveAll: MessageReactionRemoveAll { client: [Circular *1] },
    MessageReactionRemoveEmoji: MessageReactionRemoveEmoji { client: [Circular *1] },
    MessageUpdate: MessageUpdateAction { client: [Circular *1] },
    PresenceUpdate: PresenceUpdateAction { client: [Circular *1] },
    StageInstanceCreate: StageInstanceCreateAction { client: [Circular *1] },
    StageInstanceDelete: StageInstanceDeleteAction { client: [Circular *1] },
    StageInstanceUpdate: StageInstanceUpdateAction { client: [Circular *1] },
    ThreadCreate: ThreadCreateAction { client: [Circular *1] },
    ThreadDelete: ThreadDeleteAction { client: [Circular *1] },
    ThreadListSync: ThreadListSyncAction { client: [Circular *1] },
    ThreadMemberUpdate: ThreadMemberUpdateAction { client: [Circular *1] },
    ThreadMembersUpdate: ThreadMembersUpdateAction { client: [Circular *1] },
    TypingStart: TypingStart { client: [Circular *1] },
    UserUpdate: UserUpdateAction { client: [Circular *1] },
    VoiceStateUpdate: VoiceStateUpdate { client: [Circular *1] },
    WebhooksUpdate: WebhooksUpdate { client: [Circular *1] }
  },
  voice: ClientVoiceManager {
    adapters: Map(1) { '893532780946919536' => [Object] }
  },
  shard: null,
  users: UserManager {},
  guilds: GuildManager {},
  channels: ChannelManager {},
  sweepers: Sweepers {
    options: {},
    intervals: {
      applicationCommands: null,
      bans: null,
      emojis: null,
      invites: null,
      guildMembers: null,
      messages: null,
      presences: null,
      reactions: null,
      stageInstances: null,
      stickers: null,
      threadMembers: null,
      threads: null,
      users: null,
      voiceStates: null
    }
  },
  presence: ClientPresence {
    userId: null,
    guild: null,
    status: 'online',
    activities: [],
    clientStatus: null
  },
  user: ClientUser {
    id: '894060283373449317',
    bot: true,
    system: false,
    flags: UserFlags { bitfield: 0 },
    username: 'Potato bot',
    discriminator: '1627',
    avatar: 'f169fbb08deede7893419429cf1bc9ab',
    banner: null,
    accentColor: null,
    verified: true,
    mfaEnabled: false
  },
  application: ClientApplication {
    id: '894060283373449317',
    name: null,
    description: null,
    icon: null,
    flags: ApplicationFlags { bitfield: 303104 },
    cover: null,
    rpcOrigins: [],
    botRequireCodeGrant: null,
    botPublic: null,
    owner: null,
    commands: ApplicationCommandManager {
      permissions: [ApplicationCommandPermissionsManager]
    }
  },
  readyAt: 2022-02-23T01:47:22.497Z,
  eco: EconomyManager {
    noNegative: undefined,
    prefix: undefined,
    adapter: { name: 'sqlite', options: undefined },
    db: SqliteManager {
      table: 'money',
      filename: 'eco',
      sqliteOptions: {},
      hasInit: true,
      db: [Database]
    }
  },
  db: table {
    tableName: 'inv',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  config: {
    token: 'ODk0MDYwMjgzMzczNDQ5MzE3.YVkghg.ik3wBzG3rjGWnsQ_o3S5edt12fM',
    prefix: 'potat',
    admins: [
      '709950767670493275',
      '879207914005479514',
      '829171854681964604'
    ],
    debug: true,
    countChannel: '',
    opt: {
      DJ: [Object],
      maxVol: 250,
      loopMessage: false,
      discordPlayer: [Object]
    }
  },
  shop: { laptop: { cost: 1000 }, potato: { cost: 1 } },
  job: table {
    tableName: 'job',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  commands: Collection(50) [Map] {
    'addmoney' => {
      name: 'addmoney',
      aliases: [Array],
      usage: 'addmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'bal' => {
      name: 'bal',
      aliases: [Array],
      usage: 'bal',
      execute: [AsyncFunction: execute]
    },
    'beg' => {
      name: 'beg',
      aliases: [],
      usage: 'beg',
      execute: [AsyncFunction: execute]
    },
    'buy' => {
      name: 'buy',
      aliases: [],
      usage: 'buy <item>',
      execute: [AsyncFunction: execute]
    },
    'daily' => {
      name: 'daily',
      aliases: [],
      usage: 'daily',
      execute: [AsyncFunction: execute]
    },
    'inventory' => {
      name: 'inventory',
      aliases: [Array],
      usage: 'inv',
      execute: [AsyncFunction: execute]
    },
    'lb' => {
      name: 'lb',
      aliases: [Array],
      usage: 'leaderboard',
      execute: [AsyncFunction: execute]
    },
    'search' => {
      name: 'search',
      aliases: [],
      utilisation: 'search [song name]',
      execute: [AsyncFunction: execute]
    },
    'setmoney' => {
      name: 'setmoney',
      usage: 'setmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'transfer' => {
      name: 'transfer',
      aliases: [Array],
      usage: 'transfer <member> <amount>',
      execute: [AsyncFunction: execute]
    },
    'weekly' => {
      name: 'weekly',
      usage: 'weekly',
      execute: [AsyncFunction: execute]
    },
    'work' => {
      name: 'work',
      aliases: [],
      usage: 'work',
      cooldown: 3600,
      execute: [Function: execute]
    },
    'say' => {
      name: 'say',
      aliases: [Array],
      description: 'make the bot repeat what you said',
      execute: [Function: execute]
    },
    'sayembed' => {
      name: 'sayembed',
      description: 'say something embed',
      usage: '<title, description>',
      execute: [Function: execute]
    },
    'train' => {
      name: 'train',
      description: 'random thing idk',
      execute: [Function: execute]
    },
    'fasttype' => {
      name: 'fasttype',
      description: 'type fast',
      execute: [AsyncFunction: execute]
    },
    'games' => {
      name: 'games',
      description: 'play some games',
      execute: [Function: execute]
    },
    'settings' => { name: 'settings', execute: [Function: execute] },
    'slots' => {
      name: 'slots',
      description: 'play some games',
      execute: [Function: execute]
    },
    'tictactoe' => {
      name: 'tictactoe',
      description: 'play tictactoe!',
      expectedArgs: '<opponent>',
      minArgs: 1,
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'addfakemember' => { name: 'addfakemember', execute: [Function: execute] },
    'change_status' => { name: 'change_status', execute: [Function: execute] },
    'dev' => {
      name: 'dev',
      description: 'be a dev by completing a form!',
      execute: [AsyncFunction: execute]
    },
    'help' => {
      name: 'help',
      aliases: [Array],
      description: 'List all of my commands or info about a specific command.',
      usage: '[command name]',
      cooldown: 5,
      execute: [Function: execute]
    },
    'ping' => {
      name: 'ping',
      description: 'Ping!',
      execute: [Function: execute]
    },
    'poll' => {
      name: 'poll',
      description: 'poll',
      usage: 'Title + Option 1 + Option 2 + Option 3 + etc',
      execute: [Function: execute]
    },
    'server' => {
      name: 'server',
      aliases: [Array],
      description: 'servers info...',
      cooldown: 5,
      guildOnly: true,
      args: false,
      execute: [Function: execute]
    },
    'suggest' => {
      name: 'suggest',
      description: 'suggest',
      usage: '<suggestion>',
      execute: [Function: execute]
    },
    'ban' => {
      name: 'ban',
      description: 'This command bans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'giverole' => {
      name: 'giverole',
      description: 'give someone a role',
      permission: 'MANAGE_MEMBERS',
      guildOnly: true,
      execute: [Function: execute]
    },
    'kick' => {
      name: 'kick',
      permissions: 'KICK_MEMBERS',
      description: 'this command kicks a member',
      execute: [Function: execute]
    },
    'mute' => {
      name: 'mute',
      description: 'mute someone',
      permissions: 'MANAGE_MESSAGES',
      guildOnly: true,
      execute: [Function: execute]
    },
    'reload' => {
      name: 'reload',
      description: 'Reloads a command',
      args: true,
      execute: [Function: execute]
    },
    'removerole' => {
      name: 'removerole',
      description: "remove someone's role",
      execute: [Function: execute]
    },
    'unban' => {
      name: 'unban',
      description: 'This command unbans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'back' => { name: 'back', aliases: [], execute: [AsyncFunction: execute] },
    'clear' => { name: 'clear', aliases: [], execute: [AsyncFunction: execute] },
    'filter' => {
      name: 'filter',
      aliases: [],
      usage: 'filter [filter name]',
      execute: [AsyncFunction: execute]
    },
    'loop' => {
      name: 'loop',
      aliases: [],
      usage: 'loop [song|queue]',
      execute: [Function: execute]
    },
    'nowplaying' => {
      name: 'nowplaying',
      aliases: [Array],
      execute: [Function: execute]
    },
    'pause' => { name: 'pause', aliases: [], execute: [Function: execute] },
    'play' => {
      name: 'play',
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'progress' => {
      name: 'progress',
      aliases: [Array],
      utilisation: 'progress',
      voiceChannel: true,
      execute: [AsyncFunction: execute]
    },
    'queue' => {
      name: 'queue',
      aliases: [Array],
      utilisation: '{prefix}queue',
      voiceChannel: true,
      execute: [Function: execute]
    },
    'remove' => { name: 'remove', aliases: [], execute: [AsyncFunction: execute] },
    'resume' => { name: 'resume', aliases: [], execute: [Function: execute] },
    'save' => { name: 'save', aliases: [], execute: [AsyncFunction: execute] },
    'skip' => { name: 'skip', aliases: [Array], execute: [Function: execute] },
    'stop' => { name: 'stop', aliases: [Array], execute: [Function: execute] },
    'volume' => {
      name: 'volume',
      aliases: [Array],
      utilisation: 'volume [1-250]',
      voiceChannel: true,
      execute: [Function: execute]
    }
  },
  cooldowns: Collection(6) [Map] {
    'ping' => Collection(0) [Map] {},
    'play' => Collection(1) [Map] { '709950767670493275' => 1645581463209 },
    'skip' => Collection(0) [Map] {},
    'queue' => Collection(0) [Map] {},
    'remove' => Collection(0) [Map] {},
    'search' => Collection(0) [Map] {}
  },
  player: Player {
    _events: [Object: null prototype] {
      error: [Function (anonymous)],
      connectionError: [Function (anonymous)],
      trackStart: [Function (anonymous)],
      trackAdd: [Function (anonymous)],
      botDisconnect: [Function (anonymous)],
      channelEmpty: [Function (anonymous)],
      queueEnd: [Function (anonymous)]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    options: {
      autoRegisterExtractor: true,
      ytdlOptions: [Object],
      connectionTimeout: 20000
    },
    queues: Collection(1) [Map] { '893532780946919536' => [Queue] },
    voiceUtils: VoiceUtils { cache: [Collection [Map]] },
    extractors: Collection(0) [Map] {},
    requiredEvents: [ 'error', 'connectionError' ],
    client: [Circular *1],
    [Symbol(kCapture)]: false
  },
  [Symbol(kCapture)]: false
}
<ref *1> Client {
  _events: [Object: null prototype] {
    shardDisconnect: [Function (anonymous)],
    voiceStateUpdate: [Function: bound _handleVoiceState],
    guildMemberAdd: [Function (anonymous)],
    message: [Function (anonymous)],
    ready: [Function (anonymous)]
  },
  _eventsCount: 5,
  _maxListeners: 10,
  options: {
    intents: 643,
    waitGuildTimeout: 15000,
    shardCount: 1,
    makeCache: [Function (anonymous)],
    messageCacheLifetime: 0,
    messageSweepInterval: 0,
    invalidRequestWarningInterval: 0,
    partials: [],
    restWsBridgeTimeout: 5000,
    restRequestTimeout: 15000,
    restGlobalRateLimit: 0,
    retryLimit: 1,
    restTimeOffset: 500,
    restSweepInterval: 60,
    failIfNotExists: true,
    userAgentSuffix: [],
    presence: { status: 'online', user: [Object] },
    sweepers: {},
    ws: {
      large_threshold: 50,
      compress: false,
      properties: [Object],
      version: 9,
      presence: [Object]
    },
    http: {
      agent: {},
      version: 9,
      api: 'https://discord.com/api',
      cdn: 'https://cdn.discordapp.com',
      invite: 'https://discord.gg',
      template: 'https://discord.new',
      scheduledEvent: 'https://discord.com/events'
    },
    shards: [ 0 ]
  },
  rest: RESTManager {
    client: [Circular *1],
    handlers: Collection(1) [Map] {
      '/channels/894764535892819988/messages' => [RequestHandler]
    },
    versioned: true,
    globalLimit: Infinity,
    globalRemaining: Infinity,
    globalReset: 1645581464852,
    globalDelay: null,
    sweepInterval: Timeout {
      _idleTimeout: 60000,
      _idlePrev: [TimersList],
      _idleNext: [Timeout],
      _idleStart: 602588,
      _onTimeout: [Function (anonymous)],
      _timerArgs: undefined,
      _repeat: 60000,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(kHasPrimitive)]: false,
      [Symbol(asyncId)]: 12,
      [Symbol(triggerId)]: 1
    }
  },
  _cleanups: Set(50) {
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ]
  },
  _finalizers: FinalizationRegistry {},
  ws: WebSocketManager {
    _events: [Object: null prototype] {},
    _eventsCount: 0,
    _maxListeners: undefined,
    gateway: 'wss://gateway.discord.gg/',
    totalShards: 1,
    shards: Collection(1) [Map] { 0 => [WebSocketShard] },
    status: 0,
    destroyed: false,
    reconnecting: false,
    [Symbol(kCapture)]: false
  },
  actions: ActionsManager {
    client: [Circular *1],
    ChannelCreate: ChannelCreateAction { client: [Circular *1] },
    ChannelDelete: ChannelDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    ChannelUpdate: ChannelUpdateAction { client: [Circular *1] },
    GuildBanAdd: GuildBanAdd { client: [Circular *1] },
    GuildBanRemove: GuildBanRemove { client: [Circular *1] },
    GuildChannelsPositionUpdate: GuildChannelsPositionUpdate { client: [Circular *1] },
    GuildDelete: GuildDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    GuildEmojiCreate: GuildEmojiCreateAction { client: [Circular *1] },
    GuildEmojiDelete: GuildEmojiDeleteAction { client: [Circular *1] },
    GuildEmojiUpdate: GuildEmojiUpdateAction { client: [Circular *1] },
    GuildEmojisUpdate: GuildEmojisUpdateAction { client: [Circular *1] },
    GuildIntegrationsUpdate: GuildIntegrationsUpdate { client: [Circular *1] },
    GuildMemberRemove: GuildMemberRemoveAction { client: [Circular *1] },
    GuildMemberUpdate: GuildMemberUpdateAction { client: [Circular *1] },
    GuildRoleCreate: GuildRoleCreate { client: [Circular *1] },
    GuildRoleDelete: GuildRoleDeleteAction { client: [Circular *1] },
    GuildRoleUpdate: GuildRoleUpdateAction { client: [Circular *1] },
    GuildRolesPositionUpdate: GuildRolesPositionUpdate { client: [Circular *1] },
    GuildScheduledEventCreate: GuildScheduledEventCreateAction { client: [Circular *1] },
    GuildScheduledEventDelete: GuildScheduledEventDeleteAction { client: [Circular *1] },
    GuildScheduledEventUpdate: GuildScheduledEventUpdateAction { client: [Circular *1] },
    GuildScheduledEventUserAdd: GuildScheduledEventUserAddAction { client: [Circular *1] },
    GuildScheduledEventUserRemove: GuildScheduledEventUserRemoveAction { client: [Circular *1] },
    GuildStickerCreate: GuildStickerCreateAction { client: [Circular *1] },
    GuildStickerDelete: GuildStickerDeleteAction { client: [Circular *1] },
    GuildStickerUpdate: GuildStickerUpdateAction { client: [Circular *1] },
    GuildStickersUpdate: GuildStickersUpdateAction { client: [Circular *1] },
    GuildUpdate: GuildUpdateAction { client: [Circular *1] },
    InteractionCreate: InteractionCreateAction { client: [Circular *1] },
    InviteCreate: InviteCreateAction { client: [Circular *1] },
    InviteDelete: InviteDeleteAction { client: [Circular *1] },
    MessageCreate: MessageCreateAction { client: [Circular *1] },
    MessageDelete: MessageDeleteAction { client: [Circular *1] },
    MessageDeleteBulk: MessageDeleteBulkAction { client: [Circular *1] },
    MessageReactionAdd: MessageReactionAdd { client: [Circular *1] },
    MessageReactionRemove: MessageReactionRemove { client: [Circular *1] },
    MessageReactionRemoveAll: MessageReactionRemoveAll { client: [Circular *1] },
    MessageReactionRemoveEmoji: MessageReactionRemoveEmoji { client: [Circular *1] },
    MessageUpdate: MessageUpdateAction { client: [Circular *1] },
    PresenceUpdate: PresenceUpdateAction { client: [Circular *1] },
    StageInstanceCreate: StageInstanceCreateAction { client: [Circular *1] },
    StageInstanceDelete: StageInstanceDeleteAction { client: [Circular *1] },
    StageInstanceUpdate: StageInstanceUpdateAction { client: [Circular *1] },
    ThreadCreate: ThreadCreateAction { client: [Circular *1] },
    ThreadDelete: ThreadDeleteAction { client: [Circular *1] },
    ThreadListSync: ThreadListSyncAction { client: [Circular *1] },
    ThreadMemberUpdate: ThreadMemberUpdateAction { client: [Circular *1] },
    ThreadMembersUpdate: ThreadMembersUpdateAction { client: [Circular *1] },
    TypingStart: TypingStart { client: [Circular *1] },
    UserUpdate: UserUpdateAction { client: [Circular *1] },
    VoiceStateUpdate: VoiceStateUpdate { client: [Circular *1] },
    WebhooksUpdate: WebhooksUpdate { client: [Circular *1] }
  },
  voice: ClientVoiceManager {
    adapters: Map(1) { '893532780946919536' => [Object] }
  },
  shard: null,
  users: UserManager {},
  guilds: GuildManager {},
  channels: ChannelManager {},
  sweepers: Sweepers {
    options: {},
    intervals: {
      applicationCommands: null,
      bans: null,
      emojis: null,
      invites: null,
      guildMembers: null,
      messages: null,
      presences: null,
      reactions: null,
      stageInstances: null,
      stickers: null,
      threadMembers: null,
      threads: null,
      users: null,
      voiceStates: null
    }
  },
  presence: ClientPresence {
    userId: null,
    guild: null,
    status: 'online',
    activities: [],
    clientStatus: null
  },
  user: ClientUser {
    id: '894060283373449317',
    bot: true,
    system: false,
    flags: UserFlags { bitfield: 0 },
    username: 'Potato bot',
    discriminator: '1627',
    avatar: 'f169fbb08deede7893419429cf1bc9ab',
    banner: null,
    accentColor: null,
    verified: true,
    mfaEnabled: false
  },
  application: ClientApplication {
    id: '894060283373449317',
    name: null,
    description: null,
    icon: null,
    flags: ApplicationFlags { bitfield: 303104 },
    cover: null,
    rpcOrigins: [],
    botRequireCodeGrant: null,
    botPublic: null,
    owner: null,
    commands: ApplicationCommandManager {
      permissions: [ApplicationCommandPermissionsManager]
    }
  },
  readyAt: 2022-02-23T01:47:22.497Z,
  eco: EconomyManager {
    noNegative: undefined,
    prefix: undefined,
    adapter: { name: 'sqlite', options: undefined },
    db: SqliteManager {
      table: 'money',
      filename: 'eco',
      sqliteOptions: {},
      hasInit: true,
      db: [Database]
    }
  },
  db: table {
    tableName: 'inv',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  config: {
    token: 'ODk0MDYwMjgzMzczNDQ5MzE3.YVkghg.ik3wBzG3rjGWnsQ_o3S5edt12fM',
    prefix: 'potat',
    admins: [
      '709950767670493275',
      '879207914005479514',
      '829171854681964604'
    ],
    debug: true,
    countChannel: '',
    opt: {
      DJ: [Object],
      maxVol: 250,
      loopMessage: false,
      discordPlayer: [Object]
    }
  },
  shop: { laptop: { cost: 1000 }, potato: { cost: 1 } },
  job: table {
    tableName: 'job',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  commands: Collection(50) [Map] {
    'addmoney' => {
      name: 'addmoney',
      aliases: [Array],
      usage: 'addmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'bal' => {
      name: 'bal',
      aliases: [Array],
      usage: 'bal',
      execute: [AsyncFunction: execute]
    },
    'beg' => {
      name: 'beg',
      aliases: [],
      usage: 'beg',
      execute: [AsyncFunction: execute]
    },
    'buy' => {
      name: 'buy',
      aliases: [],
      usage: 'buy <item>',
      execute: [AsyncFunction: execute]
    },
    'daily' => {
      name: 'daily',
      aliases: [],
      usage: 'daily',
      execute: [AsyncFunction: execute]
    },
    'inventory' => {
      name: 'inventory',
      aliases: [Array],
      usage: 'inv',
      execute: [AsyncFunction: execute]
    },
    'lb' => {
      name: 'lb',
      aliases: [Array],
      usage: 'leaderboard',
      execute: [AsyncFunction: execute]
    },
    'search' => {
      name: 'search',
      aliases: [],
      utilisation: 'search [song name]',
      execute: [AsyncFunction: execute]
    },
    'setmoney' => {
      name: 'setmoney',
      usage: 'setmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'transfer' => {
      name: 'transfer',
      aliases: [Array],
      usage: 'transfer <member> <amount>',
      execute: [AsyncFunction: execute]
    },
    'weekly' => {
      name: 'weekly',
      usage: 'weekly',
      execute: [AsyncFunction: execute]
    },
    'work' => {
      name: 'work',
      aliases: [],
      usage: 'work',
      cooldown: 3600,
      execute: [Function: execute]
    },
    'say' => {
      name: 'say',
      aliases: [Array],
      description: 'make the bot repeat what you said',
      execute: [Function: execute]
    },
    'sayembed' => {
      name: 'sayembed',
      description: 'say something embed',
      usage: '<title, description>',
      execute: [Function: execute]
    },
    'train' => {
      name: 'train',
      description: 'random thing idk',
      execute: [Function: execute]
    },
    'fasttype' => {
      name: 'fasttype',
      description: 'type fast',
      execute: [AsyncFunction: execute]
    },
    'games' => {
      name: 'games',
      description: 'play some games',
      execute: [Function: execute]
    },
    'settings' => { name: 'settings', execute: [Function: execute] },
    'slots' => {
      name: 'slots',
      description: 'play some games',
      execute: [Function: execute]
    },
    'tictactoe' => {
      name: 'tictactoe',
      description: 'play tictactoe!',
      expectedArgs: '<opponent>',
      minArgs: 1,
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'addfakemember' => { name: 'addfakemember', execute: [Function: execute] },
    'change_status' => { name: 'change_status', execute: [Function: execute] },
    'dev' => {
      name: 'dev',
      description: 'be a dev by completing a form!',
      execute: [AsyncFunction: execute]
    },
    'help' => {
      name: 'help',
      aliases: [Array],
      description: 'List all of my commands or info about a specific command.',
      usage: '[command name]',
      cooldown: 5,
      execute: [Function: execute]
    },
    'ping' => {
      name: 'ping',
      description: 'Ping!',
      execute: [Function: execute]
    },
    'poll' => {
      name: 'poll',
      description: 'poll',
      usage: 'Title + Option 1 + Option 2 + Option 3 + etc',
      execute: [Function: execute]
    },
    'server' => {
      name: 'server',
      aliases: [Array],
      description: 'servers info...',
      cooldown: 5,
      guildOnly: true,
      args: false,
      execute: [Function: execute]
    },
    'suggest' => {
      name: 'suggest',
      description: 'suggest',
      usage: '<suggestion>',
      execute: [Function: execute]
    },
    'ban' => {
      name: 'ban',
      description: 'This command bans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'giverole' => {
      name: 'giverole',
      description: 'give someone a role',
      permission: 'MANAGE_MEMBERS',
      guildOnly: true,
      execute: [Function: execute]
    },
    'kick' => {
      name: 'kick',
      permissions: 'KICK_MEMBERS',
      description: 'this command kicks a member',
      execute: [Function: execute]
    },
    'mute' => {
      name: 'mute',
      description: 'mute someone',
      permissions: 'MANAGE_MESSAGES',
      guildOnly: true,
      execute: [Function: execute]
    },
    'reload' => {
      name: 'reload',
      description: 'Reloads a command',
      args: true,
      execute: [Function: execute]
    },
    'removerole' => {
      name: 'removerole',
      description: "remove someone's role",
      execute: [Function: execute]
    },
    'unban' => {
      name: 'unban',
      description: 'This command unbans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'back' => { name: 'back', aliases: [], execute: [AsyncFunction: execute] },
    'clear' => { name: 'clear', aliases: [], execute: [AsyncFunction: execute] },
    'filter' => {
      name: 'filter',
      aliases: [],
      usage: 'filter [filter name]',
      execute: [AsyncFunction: execute]
    },
    'loop' => {
      name: 'loop',
      aliases: [],
      usage: 'loop [song|queue]',
      execute: [Function: execute]
    },
    'nowplaying' => {
      name: 'nowplaying',
      aliases: [Array],
      execute: [Function: execute]
    },
    'pause' => { name: 'pause', aliases: [], execute: [Function: execute] },
    'play' => {
      name: 'play',
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'progress' => {
      name: 'progress',
      aliases: [Array],
      utilisation: 'progress',
      voiceChannel: true,
      execute: [AsyncFunction: execute]
    },
    'queue' => {
      name: 'queue',
      aliases: [Array],
      utilisation: '{prefix}queue',
      voiceChannel: true,
      execute: [Function: execute]
    },
    'remove' => { name: 'remove', aliases: [], execute: [AsyncFunction: execute] },
    'resume' => { name: 'resume', aliases: [], execute: [Function: execute] },
    'save' => { name: 'save', aliases: [], execute: [AsyncFunction: execute] },
    'skip' => { name: 'skip', aliases: [Array], execute: [Function: execute] },
    'stop' => { name: 'stop', aliases: [Array], execute: [Function: execute] },
    'volume' => {
      name: 'volume',
      aliases: [Array],
      utilisation: 'volume [1-250]',
      voiceChannel: true,
      execute: [Function: execute]
    }
  },
  cooldowns: Collection(6) [Map] {
    'ping' => Collection(0) [Map] {},
    'play' => Collection(1) [Map] { '709950767670493275' => 1645581477437 },
    'skip' => Collection(0) [Map] {},
    'queue' => Collection(0) [Map] {},
    'remove' => Collection(0) [Map] {},
    'search' => Collection(0) [Map] {}
  },
  player: Player {
    _events: [Object: null prototype] {
      error: [Function (anonymous)],
      connectionError: [Function (anonymous)],
      trackStart: [Function (anonymous)],
      trackAdd: [Function (anonymous)],
      botDisconnect: [Function (anonymous)],
      channelEmpty: [Function (anonymous)],
      queueEnd: [Function (anonymous)]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    options: {
      autoRegisterExtractor: true,
      ytdlOptions: [Object],
      connectionTimeout: 20000
    },
    queues: Collection(1) [Map] { '893532780946919536' => [Queue] },
    voiceUtils: VoiceUtils { cache: [Collection [Map]] },
    extractors: Collection(0) [Map] {},
    requiredEvents: [ 'error', 'connectionError' ],
    client: [Circular *1],
    [Symbol(kCapture)]: false
  },
  [Symbol(kCapture)]: false
}
<ref *1> Client {
  _events: [Object: null prototype] {
    shardDisconnect: [Function (anonymous)],
    voiceStateUpdate: [Function: bound _handleVoiceState],
    guildMemberAdd: [Function (anonymous)],
    message: [Function (anonymous)],
    ready: [Function (anonymous)]
  },
  _eventsCount: 5,
  _maxListeners: 10,
  options: {
    intents: 643,
    waitGuildTimeout: 15000,
    shardCount: 1,
    makeCache: [Function (anonymous)],
    messageCacheLifetime: 0,
    messageSweepInterval: 0,
    invalidRequestWarningInterval: 0,
    partials: [],
    restWsBridgeTimeout: 5000,
    restRequestTimeout: 15000,
    restGlobalRateLimit: 0,
    retryLimit: 1,
    restTimeOffset: 500,
    restSweepInterval: 60,
    failIfNotExists: true,
    userAgentSuffix: [],
    presence: { status: 'online', user: [Object] },
    sweepers: {},
    ws: {
      large_threshold: 50,
      compress: false,
      properties: [Object],
      version: 9,
      presence: [Object]
    },
    http: {
      agent: {},
      version: 9,
      api: 'https://discord.com/api',
      cdn: 'https://cdn.discordapp.com',
      invite: 'https://discord.gg',
      template: 'https://discord.new',
      scheduledEvent: 'https://discord.com/events'
    },
    shards: [ 0 ]
  },
  rest: RESTManager {
    client: [Circular *1],
    handlers: Collection(0) [Map] {},
    versioned: true,
    globalLimit: Infinity,
    globalRemaining: Infinity,
    globalReset: 1645581488862,
    globalDelay: null,
    sweepInterval: Timeout {
      _idleTimeout: 60000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 662597,
      _onTimeout: [Function (anonymous)],
      _timerArgs: undefined,
      _repeat: 60000,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(kHasPrimitive)]: false,
      [Symbol(asyncId)]: 12,
      [Symbol(triggerId)]: 1
    }
  },
  _cleanups: Set(50) {
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ]
  },
  _finalizers: FinalizationRegistry {},
  ws: WebSocketManager {
    _events: [Object: null prototype] {},
    _eventsCount: 0,
    _maxListeners: undefined,
    gateway: 'wss://gateway.discord.gg/',
    totalShards: 1,
    shards: Collection(1) [Map] { 0 => [WebSocketShard] },
    status: 0,
    destroyed: false,
    reconnecting: false,
    [Symbol(kCapture)]: false
  },
  actions: ActionsManager {
    client: [Circular *1],
    ChannelCreate: ChannelCreateAction { client: [Circular *1] },
    ChannelDelete: ChannelDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    ChannelUpdate: ChannelUpdateAction { client: [Circular *1] },
    GuildBanAdd: GuildBanAdd { client: [Circular *1] },
    GuildBanRemove: GuildBanRemove { client: [Circular *1] },
    GuildChannelsPositionUpdate: GuildChannelsPositionUpdate { client: [Circular *1] },
    GuildDelete: GuildDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    GuildEmojiCreate: GuildEmojiCreateAction { client: [Circular *1] },
    GuildEmojiDelete: GuildEmojiDeleteAction { client: [Circular *1] },
    GuildEmojiUpdate: GuildEmojiUpdateAction { client: [Circular *1] },
    GuildEmojisUpdate: GuildEmojisUpdateAction { client: [Circular *1] },
    GuildIntegrationsUpdate: GuildIntegrationsUpdate { client: [Circular *1] },
    GuildMemberRemove: GuildMemberRemoveAction { client: [Circular *1] },
    GuildMemberUpdate: GuildMemberUpdateAction { client: [Circular *1] },
    GuildRoleCreate: GuildRoleCreate { client: [Circular *1] },
    GuildRoleDelete: GuildRoleDeleteAction { client: [Circular *1] },
    GuildRoleUpdate: GuildRoleUpdateAction { client: [Circular *1] },
    GuildRolesPositionUpdate: GuildRolesPositionUpdate { client: [Circular *1] },
    GuildScheduledEventCreate: GuildScheduledEventCreateAction { client: [Circular *1] },
    GuildScheduledEventDelete: GuildScheduledEventDeleteAction { client: [Circular *1] },
    GuildScheduledEventUpdate: GuildScheduledEventUpdateAction { client: [Circular *1] },
    GuildScheduledEventUserAdd: GuildScheduledEventUserAddAction { client: [Circular *1] },
    GuildScheduledEventUserRemove: GuildScheduledEventUserRemoveAction { client: [Circular *1] },
    GuildStickerCreate: GuildStickerCreateAction { client: [Circular *1] },
    GuildStickerDelete: GuildStickerDeleteAction { client: [Circular *1] },
    GuildStickerUpdate: GuildStickerUpdateAction { client: [Circular *1] },
    GuildStickersUpdate: GuildStickersUpdateAction { client: [Circular *1] },
    GuildUpdate: GuildUpdateAction { client: [Circular *1] },
    InteractionCreate: InteractionCreateAction { client: [Circular *1] },
    InviteCreate: InviteCreateAction { client: [Circular *1] },
    InviteDelete: InviteDeleteAction { client: [Circular *1] },
    MessageCreate: MessageCreateAction { client: [Circular *1] },
    MessageDelete: MessageDeleteAction { client: [Circular *1] },
    MessageDeleteBulk: MessageDeleteBulkAction { client: [Circular *1] },
    MessageReactionAdd: MessageReactionAdd { client: [Circular *1] },
    MessageReactionRemove: MessageReactionRemove { client: [Circular *1] },
    MessageReactionRemoveAll: MessageReactionRemoveAll { client: [Circular *1] },
    MessageReactionRemoveEmoji: MessageReactionRemoveEmoji { client: [Circular *1] },
    MessageUpdate: MessageUpdateAction { client: [Circular *1] },
    PresenceUpdate: PresenceUpdateAction { client: [Circular *1] },
    StageInstanceCreate: StageInstanceCreateAction { client: [Circular *1] },
    StageInstanceDelete: StageInstanceDeleteAction { client: [Circular *1] },
    StageInstanceUpdate: StageInstanceUpdateAction { client: [Circular *1] },
    ThreadCreate: ThreadCreateAction { client: [Circular *1] },
    ThreadDelete: ThreadDeleteAction { client: [Circular *1] },
    ThreadListSync: ThreadListSyncAction { client: [Circular *1] },
    ThreadMemberUpdate: ThreadMemberUpdateAction { client: [Circular *1] },
    ThreadMembersUpdate: ThreadMembersUpdateAction { client: [Circular *1] },
    TypingStart: TypingStart { client: [Circular *1] },
    UserUpdate: UserUpdateAction { client: [Circular *1] },
    VoiceStateUpdate: VoiceStateUpdate { client: [Circular *1] },
    WebhooksUpdate: WebhooksUpdate { client: [Circular *1] }
  },
  voice: ClientVoiceManager { adapters: Map(0) {} },
  shard: null,
  users: UserManager {},
  guilds: GuildManager {},
  channels: ChannelManager {},
  sweepers: Sweepers {
    options: {},
    intervals: {
      applicationCommands: null,
      bans: null,
      emojis: null,
      invites: null,
      guildMembers: null,
      messages: null,
      presences: null,
      reactions: null,
      stageInstances: null,
      stickers: null,
      threadMembers: null,
      threads: null,
      users: null,
      voiceStates: null
    }
  },
  presence: ClientPresence {
    userId: null,
    guild: null,
    status: 'online',
    activities: [],
    clientStatus: null
  },
  user: ClientUser {
    id: '894060283373449317',
    bot: true,
    system: false,
    flags: UserFlags { bitfield: 0 },
    username: 'Potato bot',
    discriminator: '1627',
    avatar: 'f169fbb08deede7893419429cf1bc9ab',
    banner: null,
    accentColor: null,
    verified: true,
    mfaEnabled: false
  },
  application: ClientApplication {
    id: '894060283373449317',
    name: null,
    description: null,
    icon: null,
    flags: ApplicationFlags { bitfield: 303104 },
    cover: null,
    rpcOrigins: [],
    botRequireCodeGrant: null,
    botPublic: null,
    owner: null,
    commands: ApplicationCommandManager {
      permissions: [ApplicationCommandPermissionsManager]
    }
  },
  readyAt: 2022-02-23T01:47:22.497Z,
  eco: EconomyManager {
    noNegative: undefined,
    prefix: undefined,
    adapter: { name: 'sqlite', options: undefined },
    db: SqliteManager {
      table: 'money',
      filename: 'eco',
      sqliteOptions: {},
      hasInit: true,
      db: [Database]
    }
  },
  db: table {
    tableName: 'inv',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  config: {
    token: 'ODk0MDYwMjgzMzczNDQ5MzE3.YVkghg.ik3wBzG3rjGWnsQ_o3S5edt12fM',
    prefix: 'potat',
    admins: [
      '709950767670493275',
      '879207914005479514',
      '829171854681964604'
    ],
    debug: true,
    countChannel: '',
    opt: {
      DJ: [Object],
      maxVol: 250,
      loopMessage: false,
      discordPlayer: [Object]
    }
  },
  shop: { laptop: { cost: 1000 }, potato: { cost: 1 } },
  job: table {
    tableName: 'job',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  commands: Collection(50) [Map] {
    'addmoney' => {
      name: 'addmoney',
      aliases: [Array],
      usage: 'addmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'bal' => {
      name: 'bal',
      aliases: [Array],
      usage: 'bal',
      execute: [AsyncFunction: execute]
    },
    'beg' => {
      name: 'beg',
      aliases: [],
      usage: 'beg',
      execute: [AsyncFunction: execute]
    },
    'buy' => {
      name: 'buy',
      aliases: [],
      usage: 'buy <item>',
      execute: [AsyncFunction: execute]
    },
    'daily' => {
      name: 'daily',
      aliases: [],
      usage: 'daily',
      execute: [AsyncFunction: execute]
    },
    'inventory' => {
      name: 'inventory',
      aliases: [Array],
      usage: 'inv',
      execute: [AsyncFunction: execute]
    },
    'lb' => {
      name: 'lb',
      aliases: [Array],
      usage: 'leaderboard',
      execute: [AsyncFunction: execute]
    },
    'search' => {
      name: 'search',
      aliases: [],
      utilisation: 'search [song name]',
      execute: [AsyncFunction: execute]
    },
    'setmoney' => {
      name: 'setmoney',
      usage: 'setmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'transfer' => {
      name: 'transfer',
      aliases: [Array],
      usage: 'transfer <member> <amount>',
      execute: [AsyncFunction: execute]
    },
    'weekly' => {
      name: 'weekly',
      usage: 'weekly',
      execute: [AsyncFunction: execute]
    },
    'work' => {
      name: 'work',
      aliases: [],
      usage: 'work',
      cooldown: 3600,
      execute: [Function: execute]
    },
    'say' => {
      name: 'say',
      aliases: [Array],
      description: 'make the bot repeat what you said',
      execute: [Function: execute]
    },
    'sayembed' => {
      name: 'sayembed',
      description: 'say something embed',
      usage: '<title, description>',
      execute: [Function: execute]
    },
    'train' => {
      name: 'train',
      description: 'random thing idk',
      execute: [Function: execute]
    },
    'fasttype' => {
      name: 'fasttype',
      description: 'type fast',
      execute: [AsyncFunction: execute]
    },
    'games' => {
      name: 'games',
      description: 'play some games',
      execute: [Function: execute]
    },
    'settings' => { name: 'settings', execute: [Function: execute] },
    'slots' => {
      name: 'slots',
      description: 'play some games',
      execute: [Function: execute]
    },
    'tictactoe' => {
      name: 'tictactoe',
      description: 'play tictactoe!',
      expectedArgs: '<opponent>',
      minArgs: 1,
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'addfakemember' => { name: 'addfakemember', execute: [Function: execute] },
    'change_status' => { name: 'change_status', execute: [Function: execute] },
    'dev' => {
      name: 'dev',
      description: 'be a dev by completing a form!',
      execute: [AsyncFunction: execute]
    },
    'help' => {
      name: 'help',
      aliases: [Array],
      description: 'List all of my commands or info about a specific command.',
      usage: '[command name]',
      cooldown: 5,
      execute: [Function: execute]
    },
    'ping' => {
      name: 'ping',
      description: 'Ping!',
      execute: [Function: execute]
    },
    'poll' => {
      name: 'poll',
      description: 'poll',
      usage: 'Title + Option 1 + Option 2 + Option 3 + etc',
      execute: [Function: execute]
    },
    'server' => {
      name: 'server',
      aliases: [Array],
      description: 'servers info...',
      cooldown: 5,
      guildOnly: true,
      args: false,
      execute: [Function: execute]
    },
    'suggest' => {
      name: 'suggest',
      description: 'suggest',
      usage: '<suggestion>',
      execute: [Function: execute]
    },
    'ban' => {
      name: 'ban',
      description: 'This command bans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'giverole' => {
      name: 'giverole',
      description: 'give someone a role',
      permission: 'MANAGE_MEMBERS',
      guildOnly: true,
      execute: [Function: execute]
    },
    'kick' => {
      name: 'kick',
      permissions: 'KICK_MEMBERS',
      description: 'this command kicks a member',
      execute: [Function: execute]
    },
    'mute' => {
      name: 'mute',
      description: 'mute someone',
      permissions: 'MANAGE_MESSAGES',
      guildOnly: true,
      execute: [Function: execute]
    },
    'reload' => {
      name: 'reload',
      description: 'Reloads a command',
      args: true,
      execute: [Function: execute]
    },
    'removerole' => {
      name: 'removerole',
      description: "remove someone's role",
      execute: [Function: execute]
    },
    'unban' => {
      name: 'unban',
      description: 'This command unbans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'back' => { name: 'back', aliases: [], execute: [AsyncFunction: execute] },
    'clear' => { name: 'clear', aliases: [], execute: [AsyncFunction: execute] },
    'filter' => {
      name: 'filter',
      aliases: [],
      usage: 'filter [filter name]',
      execute: [AsyncFunction: execute]
    },
    'loop' => {
      name: 'loop',
      aliases: [],
      usage: 'loop [song|queue]',
      execute: [Function: execute]
    },
    'nowplaying' => {
      name: 'nowplaying',
      aliases: [Array],
      execute: [Function: execute]
    },
    'pause' => { name: 'pause', aliases: [], execute: [Function: execute] },
    'play' => {
      name: 'play',
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'progress' => {
      name: 'progress',
      aliases: [Array],
      utilisation: 'progress',
      voiceChannel: true,
      execute: [AsyncFunction: execute]
    },
    'queue' => {
      name: 'queue',
      aliases: [Array],
      utilisation: '{prefix}queue',
      voiceChannel: true,
      execute: [Function: execute]
    },
    'remove' => { name: 'remove', aliases: [], execute: [AsyncFunction: execute] },
    'resume' => { name: 'resume', aliases: [], execute: [Function: execute] },
    'save' => { name: 'save', aliases: [], execute: [AsyncFunction: execute] },
    'skip' => { name: 'skip', aliases: [Array], execute: [Function: execute] },
    'stop' => { name: 'stop', aliases: [Array], execute: [Function: execute] },
    'volume' => {
      name: 'volume',
      aliases: [Array],
      utilisation: 'volume [1-250]',
      voiceChannel: true,
      execute: [Function: execute]
    }
  },
  cooldowns: Collection(7) [Map] {
    'ping' => Collection(0) [Map] {},
    'play' => Collection(1) [Map] { '709950767670493275' => 1645581559394 },
    'skip' => Collection(0) [Map] {},
    'queue' => Collection(0) [Map] {},
    'remove' => Collection(0) [Map] {},
    'search' => Collection(0) [Map] {},
    'stop' => Collection(0) [Map] {}
  },
  player: Player {
    _events: [Object: null prototype] {
      error: [Function (anonymous)],
      connectionError: [Function (anonymous)],
      trackStart: [Function (anonymous)],
      trackAdd: [Function (anonymous)],
      botDisconnect: [Function (anonymous)],
      channelEmpty: [Function (anonymous)],
      queueEnd: [Function (anonymous)]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    options: {
      autoRegisterExtractor: true,
      ytdlOptions: [Object],
      connectionTimeout: 20000
    },
    queues: Collection(0) [Map] {},
    voiceUtils: VoiceUtils { cache: Collection(0) [Map] {} },
    extractors: Collection(0) [Map] {},
    requiredEvents: [ 'error', 'connectionError' ],
    client: [Circular *1],
    [Symbol(kCapture)]: false
  },
  [Symbol(kCapture)]: false
}
<ref *1> Client {
  _events: [Object: null prototype] {
    shardDisconnect: [Function (anonymous)],
    voiceStateUpdate: [Function: bound _handleVoiceState],
    guildMemberAdd: [Function (anonymous)],
    message: [Function (anonymous)],
    ready: [Function (anonymous)]
  },
  _eventsCount: 5,
  _maxListeners: 10,
  options: {
    intents: 643,
    waitGuildTimeout: 15000,
    shardCount: 1,
    makeCache: [Function (anonymous)],
    messageCacheLifetime: 0,
    messageSweepInterval: 0,
    invalidRequestWarningInterval: 0,
    partials: [],
    restWsBridgeTimeout: 5000,
    restRequestTimeout: 15000,
    restGlobalRateLimit: 0,
    retryLimit: 1,
    restTimeOffset: 500,
    restSweepInterval: 60,
    failIfNotExists: true,
    userAgentSuffix: [],
    presence: { status: 'online', user: [Object] },
    sweepers: {},
    ws: {
      large_threshold: 50,
      compress: false,
      properties: [Object],
      version: 9,
      presence: [Object]
    },
    http: {
      agent: {},
      version: 9,
      api: 'https://discord.com/api',
      cdn: 'https://cdn.discordapp.com',
      invite: 'https://discord.gg',
      template: 'https://discord.new',
      scheduledEvent: 'https://discord.com/events'
    },
    shards: [ 0 ]
  },
  rest: RESTManager {
    client: [Circular *1],
    handlers: Collection(1) [Map] {
      '/channels/894764535892819988/messages' => [RequestHandler]
    },
    versioned: true,
    globalLimit: Infinity,
    globalRemaining: Infinity,
    globalReset: 1645581592346,
    globalDelay: null,
    sweepInterval: Timeout {
      _idleTimeout: 60000,
      _idlePrev: [TimersList],
      _idleNext: [Timeout],
      _idleStart: 722608,
      _onTimeout: [Function (anonymous)],
      _timerArgs: undefined,
      _repeat: 60000,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(kHasPrimitive)]: false,
      [Symbol(asyncId)]: 12,
      [Symbol(triggerId)]: 1
    }
  },
  _cleanups: Set(50) {
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ]
  },
  _finalizers: FinalizationRegistry {},
  ws: WebSocketManager {
    _events: [Object: null prototype] {},
    _eventsCount: 0,
    _maxListeners: undefined,
    gateway: 'wss://gateway.discord.gg/',
    totalShards: 1,
    shards: Collection(1) [Map] { 0 => [WebSocketShard] },
    status: 0,
    destroyed: false,
    reconnecting: false,
    [Symbol(kCapture)]: false
  },
  actions: ActionsManager {
    client: [Circular *1],
    ChannelCreate: ChannelCreateAction { client: [Circular *1] },
    ChannelDelete: ChannelDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    ChannelUpdate: ChannelUpdateAction { client: [Circular *1] },
    GuildBanAdd: GuildBanAdd { client: [Circular *1] },
    GuildBanRemove: GuildBanRemove { client: [Circular *1] },
    GuildChannelsPositionUpdate: GuildChannelsPositionUpdate { client: [Circular *1] },
    GuildDelete: GuildDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    GuildEmojiCreate: GuildEmojiCreateAction { client: [Circular *1] },
    GuildEmojiDelete: GuildEmojiDeleteAction { client: [Circular *1] },
    GuildEmojiUpdate: GuildEmojiUpdateAction { client: [Circular *1] },
    GuildEmojisUpdate: GuildEmojisUpdateAction { client: [Circular *1] },
    GuildIntegrationsUpdate: GuildIntegrationsUpdate { client: [Circular *1] },
    GuildMemberRemove: GuildMemberRemoveAction { client: [Circular *1] },
    GuildMemberUpdate: GuildMemberUpdateAction { client: [Circular *1] },
    GuildRoleCreate: GuildRoleCreate { client: [Circular *1] },
    GuildRoleDelete: GuildRoleDeleteAction { client: [Circular *1] },
    GuildRoleUpdate: GuildRoleUpdateAction { client: [Circular *1] },
    GuildRolesPositionUpdate: GuildRolesPositionUpdate { client: [Circular *1] },
    GuildScheduledEventCreate: GuildScheduledEventCreateAction { client: [Circular *1] },
    GuildScheduledEventDelete: GuildScheduledEventDeleteAction { client: [Circular *1] },
    GuildScheduledEventUpdate: GuildScheduledEventUpdateAction { client: [Circular *1] },
    GuildScheduledEventUserAdd: GuildScheduledEventUserAddAction { client: [Circular *1] },
    GuildScheduledEventUserRemove: GuildScheduledEventUserRemoveAction { client: [Circular *1] },
    GuildStickerCreate: GuildStickerCreateAction { client: [Circular *1] },
    GuildStickerDelete: GuildStickerDeleteAction { client: [Circular *1] },
    GuildStickerUpdate: GuildStickerUpdateAction { client: [Circular *1] },
    GuildStickersUpdate: GuildStickersUpdateAction { client: [Circular *1] },
    GuildUpdate: GuildUpdateAction { client: [Circular *1] },
    InteractionCreate: InteractionCreateAction { client: [Circular *1] },
    InviteCreate: InviteCreateAction { client: [Circular *1] },
    InviteDelete: InviteDeleteAction { client: [Circular *1] },
    MessageCreate: MessageCreateAction { client: [Circular *1] },
    MessageDelete: MessageDeleteAction { client: [Circular *1] },
    MessageDeleteBulk: MessageDeleteBulkAction { client: [Circular *1] },
    MessageReactionAdd: MessageReactionAdd { client: [Circular *1] },
    MessageReactionRemove: MessageReactionRemove { client: [Circular *1] },
    MessageReactionRemoveAll: MessageReactionRemoveAll { client: [Circular *1] },
    MessageReactionRemoveEmoji: MessageReactionRemoveEmoji { client: [Circular *1] },
    MessageUpdate: MessageUpdateAction { client: [Circular *1] },
    PresenceUpdate: PresenceUpdateAction { client: [Circular *1] },
    StageInstanceCreate: StageInstanceCreateAction { client: [Circular *1] },
    StageInstanceDelete: StageInstanceDeleteAction { client: [Circular *1] },
    StageInstanceUpdate: StageInstanceUpdateAction { client: [Circular *1] },
    ThreadCreate: ThreadCreateAction { client: [Circular *1] },
    ThreadDelete: ThreadDeleteAction { client: [Circular *1] },
    ThreadListSync: ThreadListSyncAction { client: [Circular *1] },
    ThreadMemberUpdate: ThreadMemberUpdateAction { client: [Circular *1] },
    ThreadMembersUpdate: ThreadMembersUpdateAction { client: [Circular *1] },
    TypingStart: TypingStart { client: [Circular *1] },
    UserUpdate: UserUpdateAction { client: [Circular *1] },
    VoiceStateUpdate: VoiceStateUpdate { client: [Circular *1] },
    WebhooksUpdate: WebhooksUpdate { client: [Circular *1] }
  },
  voice: ClientVoiceManager { adapters: Map(0) {} },
  shard: null,
  users: UserManager {},
  guilds: GuildManager {},
  channels: ChannelManager {},
  sweepers: Sweepers {
    options: {},
    intervals: {
      applicationCommands: null,
      bans: null,
      emojis: null,
      invites: null,
      guildMembers: null,
      messages: null,
      presences: null,
      reactions: null,
      stageInstances: null,
      stickers: null,
      threadMembers: null,
      threads: null,
      users: null,
      voiceStates: null
    }
  },
  presence: ClientPresence {
    userId: null,
    guild: null,
    status: 'online',
    activities: [],
    clientStatus: null
  },
  user: ClientUser {
    id: '894060283373449317',
    bot: true,
    system: false,
    flags: UserFlags { bitfield: 0 },
    username: 'Potato bot',
    discriminator: '1627',
    avatar: 'f169fbb08deede7893419429cf1bc9ab',
    banner: null,
    accentColor: null,
    verified: true,
    mfaEnabled: false
  },
  application: ClientApplication {
    id: '894060283373449317',
    name: null,
    description: null,
    icon: null,
    flags: ApplicationFlags { bitfield: 303104 },
    cover: null,
    rpcOrigins: [],
    botRequireCodeGrant: null,
    botPublic: null,
    owner: null,
    commands: ApplicationCommandManager {
      permissions: [ApplicationCommandPermissionsManager]
    }
  },
  readyAt: 2022-02-23T01:47:22.497Z,
  eco: EconomyManager {
    noNegative: undefined,
    prefix: undefined,
    adapter: { name: 'sqlite', options: undefined },
    db: SqliteManager {
      table: 'money',
      filename: 'eco',
      sqliteOptions: {},
      hasInit: true,
      db: [Database]
    }
  },
  db: table {
    tableName: 'inv',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  config: {
    token: 'ODk0MDYwMjgzMzczNDQ5MzE3.YVkghg.ik3wBzG3rjGWnsQ_o3S5edt12fM',
    prefix: 'potat',
    admins: [
      '709950767670493275',
      '879207914005479514',
      '829171854681964604'
    ],
    debug: true,
    countChannel: '',
    opt: {
      DJ: [Object],
      maxVol: 250,
      loopMessage: false,
      discordPlayer: [Object]
    }
  },
  shop: { laptop: { cost: 1000 }, potato: { cost: 1 } },
  job: table {
    tableName: 'job',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  commands: Collection(50) [Map] {
    'addmoney' => {
      name: 'addmoney',
      aliases: [Array],
      usage: 'addmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'bal' => {
      name: 'bal',
      aliases: [Array],
      usage: 'bal',
      execute: [AsyncFunction: execute]
    },
    'beg' => {
      name: 'beg',
      aliases: [],
      usage: 'beg',
      execute: [AsyncFunction: execute]
    },
    'buy' => {
      name: 'buy',
      aliases: [],
      usage: 'buy <item>',
      execute: [AsyncFunction: execute]
    },
    'daily' => {
      name: 'daily',
      aliases: [],
      usage: 'daily',
      execute: [AsyncFunction: execute]
    },
    'inventory' => {
      name: 'inventory',
      aliases: [Array],
      usage: 'inv',
      execute: [AsyncFunction: execute]
    },
    'lb' => {
      name: 'lb',
      aliases: [Array],
      usage: 'leaderboard',
      execute: [AsyncFunction: execute]
    },
    'search' => {
      name: 'search',
      aliases: [],
      utilisation: 'search [song name]',
      execute: [AsyncFunction: execute]
    },
    'setmoney' => {
      name: 'setmoney',
      usage: 'setmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'transfer' => {
      name: 'transfer',
      aliases: [Array],
      usage: 'transfer <member> <amount>',
      execute: [AsyncFunction: execute]
    },
    'weekly' => {
      name: 'weekly',
      usage: 'weekly',
      execute: [AsyncFunction: execute]
    },
    'work' => {
      name: 'work',
      aliases: [],
      usage: 'work',
      cooldown: 3600,
      execute: [Function: execute]
    },
    'say' => {
      name: 'say',
      aliases: [Array],
      description: 'make the bot repeat what you said',
      execute: [Function: execute]
    },
    'sayembed' => {
      name: 'sayembed',
      description: 'say something embed',
      usage: '<title, description>',
      execute: [Function: execute]
    },
    'train' => {
      name: 'train',
      description: 'random thing idk',
      execute: [Function: execute]
    },
    'fasttype' => {
      name: 'fasttype',
      description: 'type fast',
      execute: [AsyncFunction: execute]
    },
    'games' => {
      name: 'games',
      description: 'play some games',
      execute: [Function: execute]
    },
    'settings' => { name: 'settings', execute: [Function: execute] },
    'slots' => {
      name: 'slots',
      description: 'play some games',
      execute: [Function: execute]
    },
    'tictactoe' => {
      name: 'tictactoe',
      description: 'play tictactoe!',
      expectedArgs: '<opponent>',
      minArgs: 1,
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'addfakemember' => { name: 'addfakemember', execute: [Function: execute] },
    'change_status' => { name: 'change_status', execute: [Function: execute] },
    'dev' => {
      name: 'dev',
      description: 'be a dev by completing a form!',
      execute: [AsyncFunction: execute]
    },
    'help' => {
      name: 'help',
      aliases: [Array],
      description: 'List all of my commands or info about a specific command.',
      usage: '[command name]',
      cooldown: 5,
      execute: [Function: execute]
    },
    'ping' => {
      name: 'ping',
      description: 'Ping!',
      execute: [Function: execute]
    },
    'poll' => {
      name: 'poll',
      description: 'poll',
      usage: 'Title + Option 1 + Option 2 + Option 3 + etc',
      execute: [Function: execute]
    },
    'server' => {
      name: 'server',
      aliases: [Array],
      description: 'servers info...',
      cooldown: 5,
      guildOnly: true,
      args: false,
      execute: [Function: execute]
    },
    'suggest' => {
      name: 'suggest',
      description: 'suggest',
      usage: '<suggestion>',
      execute: [Function: execute]
    },
    'ban' => {
      name: 'ban',
      description: 'This command bans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'giverole' => {
      name: 'giverole',
      description: 'give someone a role',
      permission: 'MANAGE_MEMBERS',
      guildOnly: true,
      execute: [Function: execute]
    },
    'kick' => {
      name: 'kick',
      permissions: 'KICK_MEMBERS',
      description: 'this command kicks a member',
      execute: [Function: execute]
    },
    'mute' => {
      name: 'mute',
      description: 'mute someone',
      permissions: 'MANAGE_MESSAGES',
      guildOnly: true,
      execute: [Function: execute]
    },
    'reload' => {
      name: 'reload',
      description: 'Reloads a command',
      args: true,
      execute: [Function: execute]
    },
    'removerole' => {
      name: 'removerole',
      description: "remove someone's role",
      execute: [Function: execute]
    },
    'unban' => {
      name: 'unban',
      description: 'This command unbans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'back' => { name: 'back', aliases: [], execute: [AsyncFunction: execute] },
    'clear' => { name: 'clear', aliases: [], execute: [AsyncFunction: execute] },
    'filter' => {
      name: 'filter',
      aliases: [],
      usage: 'filter [filter name]',
      execute: [AsyncFunction: execute]
    },
    'loop' => {
      name: 'loop',
      aliases: [],
      usage: 'loop [song|queue]',
      execute: [Function: execute]
    },
    'nowplaying' => {
      name: 'nowplaying',
      aliases: [Array],
      execute: [Function: execute]
    },
    'pause' => { name: 'pause', aliases: [], execute: [Function: execute] },
    'play' => {
      name: 'play',
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'progress' => {
      name: 'progress',
      aliases: [Array],
      utilisation: 'progress',
      voiceChannel: true,
      execute: [AsyncFunction: execute]
    },
    'queue' => {
      name: 'queue',
      aliases: [Array],
      utilisation: '{prefix}queue',
      voiceChannel: true,
      execute: [Function: execute]
    },
    'remove' => { name: 'remove', aliases: [], execute: [AsyncFunction: execute] },
    'resume' => { name: 'resume', aliases: [], execute: [Function: execute] },
    'save' => { name: 'save', aliases: [], execute: [AsyncFunction: execute] },
    'skip' => { name: 'skip', aliases: [Array], execute: [Function: execute] },
    'stop' => { name: 'stop', aliases: [Array], execute: [Function: execute] },
    'volume' => {
      name: 'volume',
      aliases: [Array],
      utilisation: 'volume [1-250]',
      voiceChannel: true,
      execute: [Function: execute]
    }
  },
  cooldowns: Collection(7) [Map] {
    'ping' => Collection(0) [Map] {},
    'play' => Collection(1) [Map] { '709950767670493275' => 1645581598876 },
    'skip' => Collection(0) [Map] {},
    'queue' => Collection(0) [Map] {},
    'remove' => Collection(0) [Map] {},
    'search' => Collection(0) [Map] {},
    'stop' => Collection(0) [Map] {}
  },
  player: Player {
    _events: [Object: null prototype] {
      error: [Function (anonymous)],
      connectionError: [Function (anonymous)],
      trackStart: [Function (anonymous)],
      trackAdd: [Function (anonymous)],
      botDisconnect: [Function (anonymous)],
      channelEmpty: [Function (anonymous)],
      queueEnd: [Function (anonymous)]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    options: {
      autoRegisterExtractor: true,
      ytdlOptions: [Object],
      connectionTimeout: 20000
    },
    queues: Collection(0) [Map] {},
    voiceUtils: VoiceUtils { cache: Collection(0) [Map] {} },
    extractors: Collection(0) [Map] {},
    requiredEvents: [ 'error', 'connectionError' ],
    client: [Circular *1],
    [Symbol(kCapture)]: false
  },
  [Symbol(kCapture)]: false
}
<ref *1> Client {
  _events: [Object: null prototype] {
    shardDisconnect: [Function (anonymous)],
    voiceStateUpdate: [Function: bound _handleVoiceState],
    guildMemberAdd: [Function (anonymous)],
    message: [Function (anonymous)],
    ready: [Function (anonymous)]
  },
  _eventsCount: 5,
  _maxListeners: 10,
  options: {
    intents: 643,
    waitGuildTimeout: 15000,
    shardCount: 1,
    makeCache: [Function (anonymous)],
    messageCacheLifetime: 0,
    messageSweepInterval: 0,
    invalidRequestWarningInterval: 0,
    partials: [],
    restWsBridgeTimeout: 5000,
    restRequestTimeout: 15000,
    restGlobalRateLimit: 0,
    retryLimit: 1,
    restTimeOffset: 500,
    restSweepInterval: 60,
    failIfNotExists: true,
    userAgentSuffix: [],
    presence: { status: 'online', user: [Object] },
    sweepers: {},
    ws: {
      large_threshold: 50,
      compress: false,
      properties: [Object],
      version: 9,
      presence: [Object]
    },
    http: {
      agent: {},
      version: 9,
      api: 'https://discord.com/api',
      cdn: 'https://cdn.discordapp.com',
      invite: 'https://discord.gg',
      template: 'https://discord.new',
      scheduledEvent: 'https://discord.com/events'
    },
    shards: [ 0 ]
  },
  rest: RESTManager {
    client: [Circular *1],
    handlers: Collection(0) [Map] {},
    versioned: true,
    globalLimit: Infinity,
    globalRemaining: Infinity,
    globalReset: 1645581605211,
    globalDelay: null,
    sweepInterval: Timeout {
      _idleTimeout: 60000,
      _idlePrev: [Timeout],
      _idleNext: [TimersList],
      _idleStart: 782614,
      _onTimeout: [Function (anonymous)],
      _timerArgs: undefined,
      _repeat: 60000,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(kHasPrimitive)]: false,
      [Symbol(asyncId)]: 12,
      [Symbol(triggerId)]: 1
    }
  },
  _cleanups: Set(50) {
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ]
  },
  _finalizers: FinalizationRegistry {},
  ws: WebSocketManager {
    _events: [Object: null prototype] {},
    _eventsCount: 0,
    _maxListeners: undefined,
    gateway: 'wss://gateway.discord.gg/',
    totalShards: 1,
    shards: Collection(1) [Map] { 0 => [WebSocketShard] },
    status: 0,
    destroyed: false,
    reconnecting: false,
    [Symbol(kCapture)]: false
  },
  actions: ActionsManager {
    client: [Circular *1],
    ChannelCreate: ChannelCreateAction { client: [Circular *1] },
    ChannelDelete: ChannelDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    ChannelUpdate: ChannelUpdateAction { client: [Circular *1] },
    GuildBanAdd: GuildBanAdd { client: [Circular *1] },
    GuildBanRemove: GuildBanRemove { client: [Circular *1] },
    GuildChannelsPositionUpdate: GuildChannelsPositionUpdate { client: [Circular *1] },
    GuildDelete: GuildDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    GuildEmojiCreate: GuildEmojiCreateAction { client: [Circular *1] },
    GuildEmojiDelete: GuildEmojiDeleteAction { client: [Circular *1] },
    GuildEmojiUpdate: GuildEmojiUpdateAction { client: [Circular *1] },
    GuildEmojisUpdate: GuildEmojisUpdateAction { client: [Circular *1] },
    GuildIntegrationsUpdate: GuildIntegrationsUpdate { client: [Circular *1] },
    GuildMemberRemove: GuildMemberRemoveAction { client: [Circular *1] },
    GuildMemberUpdate: GuildMemberUpdateAction { client: [Circular *1] },
    GuildRoleCreate: GuildRoleCreate { client: [Circular *1] },
    GuildRoleDelete: GuildRoleDeleteAction { client: [Circular *1] },
    GuildRoleUpdate: GuildRoleUpdateAction { client: [Circular *1] },
    GuildRolesPositionUpdate: GuildRolesPositionUpdate { client: [Circular *1] },
    GuildScheduledEventCreate: GuildScheduledEventCreateAction { client: [Circular *1] },
    GuildScheduledEventDelete: GuildScheduledEventDeleteAction { client: [Circular *1] },
    GuildScheduledEventUpdate: GuildScheduledEventUpdateAction { client: [Circular *1] },
    GuildScheduledEventUserAdd: GuildScheduledEventUserAddAction { client: [Circular *1] },
    GuildScheduledEventUserRemove: GuildScheduledEventUserRemoveAction { client: [Circular *1] },
    GuildStickerCreate: GuildStickerCreateAction { client: [Circular *1] },
    GuildStickerDelete: GuildStickerDeleteAction { client: [Circular *1] },
    GuildStickerUpdate: GuildStickerUpdateAction { client: [Circular *1] },
    GuildStickersUpdate: GuildStickersUpdateAction { client: [Circular *1] },
    GuildUpdate: GuildUpdateAction { client: [Circular *1] },
    InteractionCreate: InteractionCreateAction { client: [Circular *1] },
    InviteCreate: InviteCreateAction { client: [Circular *1] },
    InviteDelete: InviteDeleteAction { client: [Circular *1] },
    MessageCreate: MessageCreateAction { client: [Circular *1] },
    MessageDelete: MessageDeleteAction { client: [Circular *1] },
    MessageDeleteBulk: MessageDeleteBulkAction { client: [Circular *1] },
    MessageReactionAdd: MessageReactionAdd { client: [Circular *1] },
    MessageReactionRemove: MessageReactionRemove { client: [Circular *1] },
    MessageReactionRemoveAll: MessageReactionRemoveAll { client: [Circular *1] },
    MessageReactionRemoveEmoji: MessageReactionRemoveEmoji { client: [Circular *1] },
    MessageUpdate: MessageUpdateAction { client: [Circular *1] },
    PresenceUpdate: PresenceUpdateAction { client: [Circular *1] },
    StageInstanceCreate: StageInstanceCreateAction { client: [Circular *1] },
    StageInstanceDelete: StageInstanceDeleteAction { client: [Circular *1] },
    StageInstanceUpdate: StageInstanceUpdateAction { client: [Circular *1] },
    ThreadCreate: ThreadCreateAction { client: [Circular *1] },
    ThreadDelete: ThreadDeleteAction { client: [Circular *1] },
    ThreadListSync: ThreadListSyncAction { client: [Circular *1] },
    ThreadMemberUpdate: ThreadMemberUpdateAction { client: [Circular *1] },
    ThreadMembersUpdate: ThreadMembersUpdateAction { client: [Circular *1] },
    TypingStart: TypingStart { client: [Circular *1] },
    UserUpdate: UserUpdateAction { client: [Circular *1] },
    VoiceStateUpdate: VoiceStateUpdate { client: [Circular *1] },
    WebhooksUpdate: WebhooksUpdate { client: [Circular *1] }
  },
  voice: ClientVoiceManager {
    adapters: Map(1) { '893532780946919536' => [Object] }
  },
  shard: null,
  users: UserManager {},
  guilds: GuildManager {},
  channels: ChannelManager {},
  sweepers: Sweepers {
    options: {},
    intervals: {
      applicationCommands: null,
      bans: null,
      emojis: null,
      invites: null,
      guildMembers: null,
      messages: null,
      presences: null,
      reactions: null,
      stageInstances: null,
      stickers: null,
      threadMembers: null,
      threads: null,
      users: null,
      voiceStates: null
    }
  },
  presence: ClientPresence {
    userId: null,
    guild: null,
    status: 'online',
    activities: [],
    clientStatus: null
  },
  user: ClientUser {
    id: '894060283373449317',
    bot: true,
    system: false,
    flags: UserFlags { bitfield: 0 },
    username: 'Potato bot',
    discriminator: '1627',
    avatar: 'f169fbb08deede7893419429cf1bc9ab',
    banner: null,
    accentColor: null,
    verified: true,
    mfaEnabled: false
  },
  application: ClientApplication {
    id: '894060283373449317',
    name: null,
    description: null,
    icon: null,
    flags: ApplicationFlags { bitfield: 303104 },
    cover: null,
    rpcOrigins: [],
    botRequireCodeGrant: null,
    botPublic: null,
    owner: null,
    commands: ApplicationCommandManager {
      permissions: [ApplicationCommandPermissionsManager]
    }
  },
  readyAt: 2022-02-23T01:47:22.497Z,
  eco: EconomyManager {
    noNegative: undefined,
    prefix: undefined,
    adapter: { name: 'sqlite', options: undefined },
    db: SqliteManager {
      table: 'money',
      filename: 'eco',
      sqliteOptions: {},
      hasInit: true,
      db: [Database]
    }
  },
  db: table {
    tableName: 'inv',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  config: {
    token: 'ODk0MDYwMjgzMzczNDQ5MzE3.YVkghg.ik3wBzG3rjGWnsQ_o3S5edt12fM',
    prefix: 'potat',
    admins: [
      '709950767670493275',
      '879207914005479514',
      '829171854681964604'
    ],
    debug: true,
    countChannel: '',
    opt: {
      DJ: [Object],
      maxVol: 250,
      loopMessage: false,
      discordPlayer: [Object]
    }
  },
  shop: { laptop: { cost: 1000 }, potato: { cost: 1 } },
  job: table {
    tableName: 'job',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  commands: Collection(50) [Map] {
    'addmoney' => {
      name: 'addmoney',
      aliases: [Array],
      usage: 'addmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'bal' => {
      name: 'bal',
      aliases: [Array],
      usage: 'bal',
      execute: [AsyncFunction: execute]
    },
    'beg' => {
      name: 'beg',
      aliases: [],
      usage: 'beg',
      execute: [AsyncFunction: execute]
    },
    'buy' => {
      name: 'buy',
      aliases: [],
      usage: 'buy <item>',
      execute: [AsyncFunction: execute]
    },
    'daily' => {
      name: 'daily',
      aliases: [],
      usage: 'daily',
      execute: [AsyncFunction: execute]
    },
    'inventory' => {
      name: 'inventory',
      aliases: [Array],
      usage: 'inv',
      execute: [AsyncFunction: execute]
    },
    'lb' => {
      name: 'lb',
      aliases: [Array],
      usage: 'leaderboard',
      execute: [AsyncFunction: execute]
    },
    'search' => {
      name: 'search',
      aliases: [],
      utilisation: 'search [song name]',
      execute: [AsyncFunction: execute]
    },
    'setmoney' => {
      name: 'setmoney',
      usage: 'setmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'transfer' => {
      name: 'transfer',
      aliases: [Array],
      usage: 'transfer <member> <amount>',
      execute: [AsyncFunction: execute]
    },
    'weekly' => {
      name: 'weekly',
      usage: 'weekly',
      execute: [AsyncFunction: execute]
    },
    'work' => {
      name: 'work',
      aliases: [],
      usage: 'work',
      cooldown: 3600,
      execute: [Function: execute]
    },
    'say' => {
      name: 'say',
      aliases: [Array],
      description: 'make the bot repeat what you said',
      execute: [Function: execute]
    },
    'sayembed' => {
      name: 'sayembed',
      description: 'say something embed',
      usage: '<title, description>',
      execute: [Function: execute]
    },
    'train' => {
      name: 'train',
      description: 'random thing idk',
      execute: [Function: execute]
    },
    'fasttype' => {
      name: 'fasttype',
      description: 'type fast',
      execute: [AsyncFunction: execute]
    },
    'games' => {
      name: 'games',
      description: 'play some games',
      execute: [Function: execute]
    },
    'settings' => { name: 'settings', execute: [Function: execute] },
    'slots' => {
      name: 'slots',
      description: 'play some games',
      execute: [Function: execute]
    },
    'tictactoe' => {
      name: 'tictactoe',
      description: 'play tictactoe!',
      expectedArgs: '<opponent>',
      minArgs: 1,
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'addfakemember' => { name: 'addfakemember', execute: [Function: execute] },
    'change_status' => { name: 'change_status', execute: [Function: execute] },
    'dev' => {
      name: 'dev',
      description: 'be a dev by completing a form!',
      execute: [AsyncFunction: execute]
    },
    'help' => {
      name: 'help',
      aliases: [Array],
      description: 'List all of my commands or info about a specific command.',
      usage: '[command name]',
      cooldown: 5,
      execute: [Function: execute]
    },
    'ping' => {
      name: 'ping',
      description: 'Ping!',
      execute: [Function: execute]
    },
    'poll' => {
      name: 'poll',
      description: 'poll',
      usage: 'Title + Option 1 + Option 2 + Option 3 + etc',
      execute: [Function: execute]
    },
    'server' => {
      name: 'server',
      aliases: [Array],
      description: 'servers info...',
      cooldown: 5,
      guildOnly: true,
      args: false,
      execute: [Function: execute]
    },
    'suggest' => {
      name: 'suggest',
      description: 'suggest',
      usage: '<suggestion>',
      execute: [Function: execute]
    },
    'ban' => {
      name: 'ban',
      description: 'This command bans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'giverole' => {
      name: 'giverole',
      description: 'give someone a role',
      permission: 'MANAGE_MEMBERS',
      guildOnly: true,
      execute: [Function: execute]
    },
    'kick' => {
      name: 'kick',
      permissions: 'KICK_MEMBERS',
      description: 'this command kicks a member',
      execute: [Function: execute]
    },
    'mute' => {
      name: 'mute',
      description: 'mute someone',
      permissions: 'MANAGE_MESSAGES',
      guildOnly: true,
      execute: [Function: execute]
    },
    'reload' => {
      name: 'reload',
      description: 'Reloads a command',
      args: true,
      execute: [Function: execute]
    },
    'removerole' => {
      name: 'removerole',
      description: "remove someone's role",
      execute: [Function: execute]
    },
    'unban' => {
      name: 'unban',
      description: 'This command unbans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'back' => { name: 'back', aliases: [], execute: [AsyncFunction: execute] },
    'clear' => { name: 'clear', aliases: [], execute: [AsyncFunction: execute] },
    'filter' => {
      name: 'filter',
      aliases: [],
      usage: 'filter [filter name]',
      execute: [AsyncFunction: execute]
    },
    'loop' => {
      name: 'loop',
      aliases: [],
      usage: 'loop [song|queue]',
      execute: [Function: execute]
    },
    'nowplaying' => {
      name: 'nowplaying',
      aliases: [Array],
      execute: [Function: execute]
    },
    'pause' => { name: 'pause', aliases: [], execute: [Function: execute] },
    'play' => {
      name: 'play',
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'progress' => {
      name: 'progress',
      aliases: [Array],
      utilisation: 'progress',
      voiceChannel: true,
      execute: [AsyncFunction: execute]
    },
    'queue' => {
      name: 'queue',
      aliases: [Array],
      utilisation: '{prefix}queue',
      voiceChannel: true,
      execute: [Function: execute]
    },
    'remove' => { name: 'remove', aliases: [], execute: [AsyncFunction: execute] },
    'resume' => { name: 'resume', aliases: [], execute: [Function: execute] },
    'save' => { name: 'save', aliases: [], execute: [AsyncFunction: execute] },
    'skip' => { name: 'skip', aliases: [Array], execute: [Function: execute] },
    'stop' => { name: 'stop', aliases: [Array], execute: [Function: execute] },
    'volume' => {
      name: 'volume',
      aliases: [Array],
      utilisation: 'volume [1-250]',
      voiceChannel: true,
      execute: [Function: execute]
    }
  },
  cooldowns: Collection(7) [Map] {
    'ping' => Collection(0) [Map] {},
    'play' => Collection(1) [Map] { '709950767670493275' => 1645581644101 },
    'skip' => Collection(0) [Map] {},
    'queue' => Collection(0) [Map] {},
    'remove' => Collection(0) [Map] {},
    'search' => Collection(0) [Map] {},
    'stop' => Collection(0) [Map] {}
  },
  player: Player {
    _events: [Object: null prototype] {
      error: [Function (anonymous)],
      connectionError: [Function (anonymous)],
      trackStart: [Function (anonymous)],
      trackAdd: [Function (anonymous)],
      botDisconnect: [Function (anonymous)],
      channelEmpty: [Function (anonymous)],
      queueEnd: [Function (anonymous)]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    options: {
      autoRegisterExtractor: true,
      ytdlOptions: [Object],
      connectionTimeout: 20000
    },
    queues: Collection(1) [Map] { '893532780946919536' => [Queue] },
    voiceUtils: VoiceUtils { cache: [Collection [Map]] },
    extractors: Collection(0) [Map] {},
    requiredEvents: [ 'error', 'connectionError' ],
    client: [Circular *1],
    [Symbol(kCapture)]: false
  },
  [Symbol(kCapture)]: false
}
<ref *1> Client {
  _events: [Object: null prototype] {
    shardDisconnect: [Function (anonymous)],
    voiceStateUpdate: [Function: bound _handleVoiceState],
    guildMemberAdd: [Function (anonymous)],
    message: [Function (anonymous)],
    ready: [Function (anonymous)]
  },
  _eventsCount: 5,
  _maxListeners: 10,
  options: {
    intents: 643,
    waitGuildTimeout: 15000,
    shardCount: 1,
    makeCache: [Function (anonymous)],
    messageCacheLifetime: 0,
    messageSweepInterval: 0,
    invalidRequestWarningInterval: 0,
    partials: [],
    restWsBridgeTimeout: 5000,
    restRequestTimeout: 15000,
    restGlobalRateLimit: 0,
    retryLimit: 1,
    restTimeOffset: 500,
    restSweepInterval: 60,
    failIfNotExists: true,
    userAgentSuffix: [],
    presence: { status: 'online', user: [Object] },
    sweepers: {},
    ws: {
      large_threshold: 50,
      compress: false,
      properties: [Object],
      version: 9,
      presence: [Object]
    },
    http: {
      agent: {},
      version: 9,
      api: 'https://discord.com/api',
      cdn: 'https://cdn.discordapp.com',
      invite: 'https://discord.gg',
      template: 'https://discord.new',
      scheduledEvent: 'https://discord.com/events'
    },
    shards: [ 0 ]
  },
  rest: RESTManager {
    client: [Circular *1],
    handlers: Collection(1) [Map] {
      '/channels/894764535892819988/messages' => [RequestHandler]
    },
    versioned: true,
    globalLimit: Infinity,
    globalRemaining: Infinity,
    globalReset: 1645581645805,
    globalDelay: null,
    sweepInterval: Timeout {
      _idleTimeout: 60000,
      _idlePrev: [Timeout],
      _idleNext: [TimersList],
      _idleStart: 782614,
      _onTimeout: [Function (anonymous)],
      _timerArgs: undefined,
      _repeat: 60000,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(kHasPrimitive)]: false,
      [Symbol(asyncId)]: 12,
      [Symbol(triggerId)]: 1
    }
  },
  _cleanups: Set(50) {
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ]
  },
  _finalizers: FinalizationRegistry {},
  ws: WebSocketManager {
    _events: [Object: null prototype] {},
    _eventsCount: 0,
    _maxListeners: undefined,
    gateway: 'wss://gateway.discord.gg/',
    totalShards: 1,
    shards: Collection(1) [Map] { 0 => [WebSocketShard] },
    status: 0,
    destroyed: false,
    reconnecting: false,
    [Symbol(kCapture)]: false
  },
  actions: ActionsManager {
    client: [Circular *1],
    ChannelCreate: ChannelCreateAction { client: [Circular *1] },
    ChannelDelete: ChannelDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    ChannelUpdate: ChannelUpdateAction { client: [Circular *1] },
    GuildBanAdd: GuildBanAdd { client: [Circular *1] },
    GuildBanRemove: GuildBanRemove { client: [Circular *1] },
    GuildChannelsPositionUpdate: GuildChannelsPositionUpdate { client: [Circular *1] },
    GuildDelete: GuildDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    GuildEmojiCreate: GuildEmojiCreateAction { client: [Circular *1] },
    GuildEmojiDelete: GuildEmojiDeleteAction { client: [Circular *1] },
    GuildEmojiUpdate: GuildEmojiUpdateAction { client: [Circular *1] },
    GuildEmojisUpdate: GuildEmojisUpdateAction { client: [Circular *1] },
    GuildIntegrationsUpdate: GuildIntegrationsUpdate { client: [Circular *1] },
    GuildMemberRemove: GuildMemberRemoveAction { client: [Circular *1] },
    GuildMemberUpdate: GuildMemberUpdateAction { client: [Circular *1] },
    GuildRoleCreate: GuildRoleCreate { client: [Circular *1] },
    GuildRoleDelete: GuildRoleDeleteAction { client: [Circular *1] },
    GuildRoleUpdate: GuildRoleUpdateAction { client: [Circular *1] },
    GuildRolesPositionUpdate: GuildRolesPositionUpdate { client: [Circular *1] },
    GuildScheduledEventCreate: GuildScheduledEventCreateAction { client: [Circular *1] },
    GuildScheduledEventDelete: GuildScheduledEventDeleteAction { client: [Circular *1] },
    GuildScheduledEventUpdate: GuildScheduledEventUpdateAction { client: [Circular *1] },
    GuildScheduledEventUserAdd: GuildScheduledEventUserAddAction { client: [Circular *1] },
    GuildScheduledEventUserRemove: GuildScheduledEventUserRemoveAction { client: [Circular *1] },
    GuildStickerCreate: GuildStickerCreateAction { client: [Circular *1] },
    GuildStickerDelete: GuildStickerDeleteAction { client: [Circular *1] },
    GuildStickerUpdate: GuildStickerUpdateAction { client: [Circular *1] },
    GuildStickersUpdate: GuildStickersUpdateAction { client: [Circular *1] },
    GuildUpdate: GuildUpdateAction { client: [Circular *1] },
    InteractionCreate: InteractionCreateAction { client: [Circular *1] },
    InviteCreate: InviteCreateAction { client: [Circular *1] },
    InviteDelete: InviteDeleteAction { client: [Circular *1] },
    MessageCreate: MessageCreateAction { client: [Circular *1] },
    MessageDelete: MessageDeleteAction { client: [Circular *1] },
    MessageDeleteBulk: MessageDeleteBulkAction { client: [Circular *1] },
    MessageReactionAdd: MessageReactionAdd { client: [Circular *1] },
    MessageReactionRemove: MessageReactionRemove { client: [Circular *1] },
    MessageReactionRemoveAll: MessageReactionRemoveAll { client: [Circular *1] },
    MessageReactionRemoveEmoji: MessageReactionRemoveEmoji { client: [Circular *1] },
    MessageUpdate: MessageUpdateAction { client: [Circular *1] },
    PresenceUpdate: PresenceUpdateAction { client: [Circular *1] },
    StageInstanceCreate: StageInstanceCreateAction { client: [Circular *1] },
    StageInstanceDelete: StageInstanceDeleteAction { client: [Circular *1] },
    StageInstanceUpdate: StageInstanceUpdateAction { client: [Circular *1] },
    ThreadCreate: ThreadCreateAction { client: [Circular *1] },
    ThreadDelete: ThreadDeleteAction { client: [Circular *1] },
    ThreadListSync: ThreadListSyncAction { client: [Circular *1] },
    ThreadMemberUpdate: ThreadMemberUpdateAction { client: [Circular *1] },
    ThreadMembersUpdate: ThreadMembersUpdateAction { client: [Circular *1] },
    TypingStart: TypingStart { client: [Circular *1] },
    UserUpdate: UserUpdateAction { client: [Circular *1] },
    VoiceStateUpdate: VoiceStateUpdate { client: [Circular *1] },
    WebhooksUpdate: WebhooksUpdate { client: [Circular *1] }
  },
  voice: ClientVoiceManager {
    adapters: Map(1) { '893532780946919536' => [Object] }
  },
  shard: null,
  users: UserManager {},
  guilds: GuildManager {},
  channels: ChannelManager {},
  sweepers: Sweepers {
    options: {},
    intervals: {
      applicationCommands: null,
      bans: null,
      emojis: null,
      invites: null,
      guildMembers: null,
      messages: null,
      presences: null,
      reactions: null,
      stageInstances: null,
      stickers: null,
      threadMembers: null,
      threads: null,
      users: null,
      voiceStates: null
    }
  },
  presence: ClientPresence {
    userId: null,
    guild: null,
    status: 'online',
    activities: [],
    clientStatus: null
  },
  user: ClientUser {
    id: '894060283373449317',
    bot: true,
    system: false,
    flags: UserFlags { bitfield: 0 },
    username: 'Potato bot',
    discriminator: '1627',
    avatar: 'f169fbb08deede7893419429cf1bc9ab',
    banner: null,
    accentColor: null,
    verified: true,
    mfaEnabled: false
  },
  application: ClientApplication {
    id: '894060283373449317',
    name: null,
    description: null,
    icon: null,
    flags: ApplicationFlags { bitfield: 303104 },
    cover: null,
    rpcOrigins: [],
    botRequireCodeGrant: null,
    botPublic: null,
    owner: null,
    commands: ApplicationCommandManager {
      permissions: [ApplicationCommandPermissionsManager]
    }
  },
  readyAt: 2022-02-23T01:47:22.497Z,
  eco: EconomyManager {
    noNegative: undefined,
    prefix: undefined,
    adapter: { name: 'sqlite', options: undefined },
    db: SqliteManager {
      table: 'money',
      filename: 'eco',
      sqliteOptions: {},
      hasInit: true,
      db: [Database]
    }
  },
  db: table {
    tableName: 'inv',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  config: {
    token: 'ODk0MDYwMjgzMzczNDQ5MzE3.YVkghg.ik3wBzG3rjGWnsQ_o3S5edt12fM',
    prefix: 'potat',
    admins: [
      '709950767670493275',
      '879207914005479514',
      '829171854681964604'
    ],
    debug: true,
    countChannel: '',
    opt: {
      DJ: [Object],
      maxVol: 250,
      loopMessage: false,
      discordPlayer: [Object]
    }
  },
  shop: { laptop: { cost: 1000 }, potato: { cost: 1 } },
  job: table {
    tableName: 'job',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  commands: Collection(50) [Map] {
    'addmoney' => {
      name: 'addmoney',
      aliases: [Array],
      usage: 'addmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'bal' => {
      name: 'bal',
      aliases: [Array],
      usage: 'bal',
      execute: [AsyncFunction: execute]
    },
    'beg' => {
      name: 'beg',
      aliases: [],
      usage: 'beg',
      execute: [AsyncFunction: execute]
    },
    'buy' => {
      name: 'buy',
      aliases: [],
      usage: 'buy <item>',
      execute: [AsyncFunction: execute]
    },
    'daily' => {
      name: 'daily',
      aliases: [],
      usage: 'daily',
      execute: [AsyncFunction: execute]
    },
    'inventory' => {
      name: 'inventory',
      aliases: [Array],
      usage: 'inv',
      execute: [AsyncFunction: execute]
    },
    'lb' => {
      name: 'lb',
      aliases: [Array],
      usage: 'leaderboard',
      execute: [AsyncFunction: execute]
    },
    'search' => {
      name: 'search',
      aliases: [],
      utilisation: 'search [song name]',
      execute: [AsyncFunction: execute]
    },
    'setmoney' => {
      name: 'setmoney',
      usage: 'setmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'transfer' => {
      name: 'transfer',
      aliases: [Array],
      usage: 'transfer <member> <amount>',
      execute: [AsyncFunction: execute]
    },
    'weekly' => {
      name: 'weekly',
      usage: 'weekly',
      execute: [AsyncFunction: execute]
    },
    'work' => {
      name: 'work',
      aliases: [],
      usage: 'work',
      cooldown: 3600,
      execute: [Function: execute]
    },
    'say' => {
      name: 'say',
      aliases: [Array],
      description: 'make the bot repeat what you said',
      execute: [Function: execute]
    },
    'sayembed' => {
      name: 'sayembed',
      description: 'say something embed',
      usage: '<title, description>',
      execute: [Function: execute]
    },
    'train' => {
      name: 'train',
      description: 'random thing idk',
      execute: [Function: execute]
    },
    'fasttype' => {
      name: 'fasttype',
      description: 'type fast',
      execute: [AsyncFunction: execute]
    },
    'games' => {
      name: 'games',
      description: 'play some games',
      execute: [Function: execute]
    },
    'settings' => { name: 'settings', execute: [Function: execute] },
    'slots' => {
      name: 'slots',
      description: 'play some games',
      execute: [Function: execute]
    },
    'tictactoe' => {
      name: 'tictactoe',
      description: 'play tictactoe!',
      expectedArgs: '<opponent>',
      minArgs: 1,
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'addfakemember' => { name: 'addfakemember', execute: [Function: execute] },
    'change_status' => { name: 'change_status', execute: [Function: execute] },
    'dev' => {
      name: 'dev',
      description: 'be a dev by completing a form!',
      execute: [AsyncFunction: execute]
    },
    'help' => {
      name: 'help',
      aliases: [Array],
      description: 'List all of my commands or info about a specific command.',
      usage: '[command name]',
      cooldown: 5,
      execute: [Function: execute]
    },
    'ping' => {
      name: 'ping',
      description: 'Ping!',
      execute: [Function: execute]
    },
    'poll' => {
      name: 'poll',
      description: 'poll',
      usage: 'Title + Option 1 + Option 2 + Option 3 + etc',
      execute: [Function: execute]
    },
    'server' => {
      name: 'server',
      aliases: [Array],
      description: 'servers info...',
      cooldown: 5,
      guildOnly: true,
      args: false,
      execute: [Function: execute]
    },
    'suggest' => {
      name: 'suggest',
      description: 'suggest',
      usage: '<suggestion>',
      execute: [Function: execute]
    },
    'ban' => {
      name: 'ban',
      description: 'This command bans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'giverole' => {
      name: 'giverole',
      description: 'give someone a role',
      permission: 'MANAGE_MEMBERS',
      guildOnly: true,
      execute: [Function: execute]
    },
    'kick' => {
      name: 'kick',
      permissions: 'KICK_MEMBERS',
      description: 'this command kicks a member',
      execute: [Function: execute]
    },
    'mute' => {
      name: 'mute',
      description: 'mute someone',
      permissions: 'MANAGE_MESSAGES',
      guildOnly: true,
      execute: [Function: execute]
    },
    'reload' => {
      name: 'reload',
      description: 'Reloads a command',
      args: true,
      execute: [Function: execute]
    },
    'removerole' => {
      name: 'removerole',
      description: "remove someone's role",
      execute: [Function: execute]
    },
    'unban' => {
      name: 'unban',
      description: 'This command unbans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'back' => { name: 'back', aliases: [], execute: [AsyncFunction: execute] },
    'clear' => { name: 'clear', aliases: [], execute: [AsyncFunction: execute] },
    'filter' => {
      name: 'filter',
      aliases: [],
      usage: 'filter [filter name]',
      execute: [AsyncFunction: execute]
    },
    'loop' => {
      name: 'loop',
      aliases: [],
      usage: 'loop [song|queue]',
      execute: [Function: execute]
    },
    'nowplaying' => {
      name: 'nowplaying',
      aliases: [Array],
      execute: [Function: execute]
    },
    'pause' => { name: 'pause', aliases: [], execute: [Function: execute] },
    'play' => {
      name: 'play',
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'progress' => {
      name: 'progress',
      aliases: [Array],
      utilisation: 'progress',
      voiceChannel: true,
      execute: [AsyncFunction: execute]
    },
    'queue' => {
      name: 'queue',
      aliases: [Array],
      utilisation: '{prefix}queue',
      voiceChannel: true,
      execute: [Function: execute]
    },
    'remove' => { name: 'remove', aliases: [], execute: [AsyncFunction: execute] },
    'resume' => { name: 'resume', aliases: [], execute: [Function: execute] },
    'save' => { name: 'save', aliases: [], execute: [AsyncFunction: execute] },
    'skip' => { name: 'skip', aliases: [Array], execute: [Function: execute] },
    'stop' => { name: 'stop', aliases: [Array], execute: [Function: execute] },
    'volume' => {
      name: 'volume',
      aliases: [Array],
      utilisation: 'volume [1-250]',
      voiceChannel: true,
      execute: [Function: execute]
    }
  },
  cooldowns: Collection(7) [Map] {
    'ping' => Collection(0) [Map] {},
    'play' => Collection(1) [Map] { '709950767670493275' => 1645581654211 },
    'skip' => Collection(0) [Map] {},
    'queue' => Collection(0) [Map] {},
    'remove' => Collection(0) [Map] {},
    'search' => Collection(0) [Map] {},
    'stop' => Collection(0) [Map] {}
  },
  player: Player {
    _events: [Object: null prototype] {
      error: [Function (anonymous)],
      connectionError: [Function (anonymous)],
      trackStart: [Function (anonymous)],
      trackAdd: [Function (anonymous)],
      botDisconnect: [Function (anonymous)],
      channelEmpty: [Function (anonymous)],
      queueEnd: [Function (anonymous)]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    options: {
      autoRegisterExtractor: true,
      ytdlOptions: [Object],
      connectionTimeout: 20000
    },
    queues: Collection(1) [Map] { '893532780946919536' => [Queue] },
    voiceUtils: VoiceUtils { cache: [Collection [Map]] },
    extractors: Collection(0) [Map] {},
    requiredEvents: [ 'error', 'connectionError' ],
    client: [Circular *1],
    [Symbol(kCapture)]: false
  },
  [Symbol(kCapture)]: false
}
<ref *1> Client {
  _events: [Object: null prototype] {
    shardDisconnect: [Function (anonymous)],
    voiceStateUpdate: [Function: bound _handleVoiceState],
    guildMemberAdd: [Function (anonymous)],
    message: [Function (anonymous)],
    ready: [Function (anonymous)]
  },
  _eventsCount: 5,
  _maxListeners: 10,
  options: {
    intents: 643,
    waitGuildTimeout: 15000,
    shardCount: 1,
    makeCache: [Function (anonymous)],
    messageCacheLifetime: 0,
    messageSweepInterval: 0,
    invalidRequestWarningInterval: 0,
    partials: [],
    restWsBridgeTimeout: 5000,
    restRequestTimeout: 15000,
    restGlobalRateLimit: 0,
    retryLimit: 1,
    restTimeOffset: 500,
    restSweepInterval: 60,
    failIfNotExists: true,
    userAgentSuffix: [],
    presence: { status: 'online', user: [Object] },
    sweepers: {},
    ws: {
      large_threshold: 50,
      compress: false,
      properties: [Object],
      version: 9,
      presence: [Object]
    },
    http: {
      agent: {},
      version: 9,
      api: 'https://discord.com/api',
      cdn: 'https://cdn.discordapp.com',
      invite: 'https://discord.gg',
      template: 'https://discord.new',
      scheduledEvent: 'https://discord.com/events'
    },
    shards: [ 0 ]
  },
  rest: RESTManager {
    client: [Circular *1],
    handlers: Collection(1) [Map] {
      '/channels/894764535892819988/messages' => [RequestHandler]
    },
    versioned: true,
    globalLimit: Infinity,
    globalRemaining: Infinity,
    globalReset: 1645581655942,
    globalDelay: null,
    sweepInterval: Timeout {
      _idleTimeout: 60000,
      _idlePrev: [Timeout],
      _idleNext: [TimersList],
      _idleStart: 782614,
      _onTimeout: [Function (anonymous)],
      _timerArgs: undefined,
      _repeat: 60000,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(kHasPrimitive)]: false,
      [Symbol(asyncId)]: 12,
      [Symbol(triggerId)]: 1
    }
  },
  _cleanups: Set(50) {
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ]
  },
  _finalizers: FinalizationRegistry {},
  ws: WebSocketManager {
    _events: [Object: null prototype] {},
    _eventsCount: 0,
    _maxListeners: undefined,
    gateway: 'wss://gateway.discord.gg/',
    totalShards: 1,
    shards: Collection(1) [Map] { 0 => [WebSocketShard] },
    status: 0,
    destroyed: false,
    reconnecting: false,
    [Symbol(kCapture)]: false
  },
  actions: ActionsManager {
    client: [Circular *1],
    ChannelCreate: ChannelCreateAction { client: [Circular *1] },
    ChannelDelete: ChannelDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    ChannelUpdate: ChannelUpdateAction { client: [Circular *1] },
    GuildBanAdd: GuildBanAdd { client: [Circular *1] },
    GuildBanRemove: GuildBanRemove { client: [Circular *1] },
    GuildChannelsPositionUpdate: GuildChannelsPositionUpdate { client: [Circular *1] },
    GuildDelete: GuildDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    GuildEmojiCreate: GuildEmojiCreateAction { client: [Circular *1] },
    GuildEmojiDelete: GuildEmojiDeleteAction { client: [Circular *1] },
    GuildEmojiUpdate: GuildEmojiUpdateAction { client: [Circular *1] },
    GuildEmojisUpdate: GuildEmojisUpdateAction { client: [Circular *1] },
    GuildIntegrationsUpdate: GuildIntegrationsUpdate { client: [Circular *1] },
    GuildMemberRemove: GuildMemberRemoveAction { client: [Circular *1] },
    GuildMemberUpdate: GuildMemberUpdateAction { client: [Circular *1] },
    GuildRoleCreate: GuildRoleCreate { client: [Circular *1] },
    GuildRoleDelete: GuildRoleDeleteAction { client: [Circular *1] },
    GuildRoleUpdate: GuildRoleUpdateAction { client: [Circular *1] },
    GuildRolesPositionUpdate: GuildRolesPositionUpdate { client: [Circular *1] },
    GuildScheduledEventCreate: GuildScheduledEventCreateAction { client: [Circular *1] },
    GuildScheduledEventDelete: GuildScheduledEventDeleteAction { client: [Circular *1] },
    GuildScheduledEventUpdate: GuildScheduledEventUpdateAction { client: [Circular *1] },
    GuildScheduledEventUserAdd: GuildScheduledEventUserAddAction { client: [Circular *1] },
    GuildScheduledEventUserRemove: GuildScheduledEventUserRemoveAction { client: [Circular *1] },
    GuildStickerCreate: GuildStickerCreateAction { client: [Circular *1] },
    GuildStickerDelete: GuildStickerDeleteAction { client: [Circular *1] },
    GuildStickerUpdate: GuildStickerUpdateAction { client: [Circular *1] },
    GuildStickersUpdate: GuildStickersUpdateAction { client: [Circular *1] },
    GuildUpdate: GuildUpdateAction { client: [Circular *1] },
    InteractionCreate: InteractionCreateAction { client: [Circular *1] },
    InviteCreate: InviteCreateAction { client: [Circular *1] },
    InviteDelete: InviteDeleteAction { client: [Circular *1] },
    MessageCreate: MessageCreateAction { client: [Circular *1] },
    MessageDelete: MessageDeleteAction { client: [Circular *1] },
    MessageDeleteBulk: MessageDeleteBulkAction { client: [Circular *1] },
    MessageReactionAdd: MessageReactionAdd { client: [Circular *1] },
    MessageReactionRemove: MessageReactionRemove { client: [Circular *1] },
    MessageReactionRemoveAll: MessageReactionRemoveAll { client: [Circular *1] },
    MessageReactionRemoveEmoji: MessageReactionRemoveEmoji { client: [Circular *1] },
    MessageUpdate: MessageUpdateAction { client: [Circular *1] },
    PresenceUpdate: PresenceUpdateAction { client: [Circular *1] },
    StageInstanceCreate: StageInstanceCreateAction { client: [Circular *1] },
    StageInstanceDelete: StageInstanceDeleteAction { client: [Circular *1] },
    StageInstanceUpdate: StageInstanceUpdateAction { client: [Circular *1] },
    ThreadCreate: ThreadCreateAction { client: [Circular *1] },
    ThreadDelete: ThreadDeleteAction { client: [Circular *1] },
    ThreadListSync: ThreadListSyncAction { client: [Circular *1] },
    ThreadMemberUpdate: ThreadMemberUpdateAction { client: [Circular *1] },
    ThreadMembersUpdate: ThreadMembersUpdateAction { client: [Circular *1] },
    TypingStart: TypingStart { client: [Circular *1] },
    UserUpdate: UserUpdateAction { client: [Circular *1] },
    VoiceStateUpdate: VoiceStateUpdate { client: [Circular *1] },
    WebhooksUpdate: WebhooksUpdate { client: [Circular *1] }
  },
  voice: ClientVoiceManager {
    adapters: Map(1) { '893532780946919536' => [Object] }
  },
  shard: null,
  users: UserManager {},
  guilds: GuildManager {},
  channels: ChannelManager {},
  sweepers: Sweepers {
    options: {},
    intervals: {
      applicationCommands: null,
      bans: null,
      emojis: null,
      invites: null,
      guildMembers: null,
      messages: null,
      presences: null,
      reactions: null,
      stageInstances: null,
      stickers: null,
      threadMembers: null,
      threads: null,
      users: null,
      voiceStates: null
    }
  },
  presence: ClientPresence {
    userId: null,
    guild: null,
    status: 'online',
    activities: [],
    clientStatus: null
  },
  user: ClientUser {
    id: '894060283373449317',
    bot: true,
    system: false,
    flags: UserFlags { bitfield: 0 },
    username: 'Potato bot',
    discriminator: '1627',
    avatar: 'f169fbb08deede7893419429cf1bc9ab',
    banner: null,
    accentColor: null,
    verified: true,
    mfaEnabled: false
  },
  application: ClientApplication {
    id: '894060283373449317',
    name: null,
    description: null,
    icon: null,
    flags: ApplicationFlags { bitfield: 303104 },
    cover: null,
    rpcOrigins: [],
    botRequireCodeGrant: null,
    botPublic: null,
    owner: null,
    commands: ApplicationCommandManager {
      permissions: [ApplicationCommandPermissionsManager]
    }
  },
  readyAt: 2022-02-23T01:47:22.497Z,
  eco: EconomyManager {
    noNegative: undefined,
    prefix: undefined,
    adapter: { name: 'sqlite', options: undefined },
    db: SqliteManager {
      table: 'money',
      filename: 'eco',
      sqliteOptions: {},
      hasInit: true,
      db: [Database]
    }
  },
  db: table {
    tableName: 'inv',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  config: {
    token: 'ODk0MDYwMjgzMzczNDQ5MzE3.YVkghg.ik3wBzG3rjGWnsQ_o3S5edt12fM',
    prefix: 'potat',
    admins: [
      '709950767670493275',
      '879207914005479514',
      '829171854681964604'
    ],
    debug: true,
    countChannel: '',
    opt: {
      DJ: [Object],
      maxVol: 250,
      loopMessage: false,
      discordPlayer: [Object]
    }
  },
  shop: { laptop: { cost: 1000 }, potato: { cost: 1 } },
  job: table {
    tableName: 'job',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  commands: Collection(50) [Map] {
    'addmoney' => {
      name: 'addmoney',
      aliases: [Array],
      usage: 'addmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'bal' => {
      name: 'bal',
      aliases: [Array],
      usage: 'bal',
      execute: [AsyncFunction: execute]
    },
    'beg' => {
      name: 'beg',
      aliases: [],
      usage: 'beg',
      execute: [AsyncFunction: execute]
    },
    'buy' => {
      name: 'buy',
      aliases: [],
      usage: 'buy <item>',
      execute: [AsyncFunction: execute]
    },
    'daily' => {
      name: 'daily',
      aliases: [],
      usage: 'daily',
      execute: [AsyncFunction: execute]
    },
    'inventory' => {
      name: 'inventory',
      aliases: [Array],
      usage: 'inv',
      execute: [AsyncFunction: execute]
    },
    'lb' => {
      name: 'lb',
      aliases: [Array],
      usage: 'leaderboard',
      execute: [AsyncFunction: execute]
    },
    'search' => {
      name: 'search',
      aliases: [],
      utilisation: 'search [song name]',
      execute: [AsyncFunction: execute]
    },
    'setmoney' => {
      name: 'setmoney',
      usage: 'setmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'transfer' => {
      name: 'transfer',
      aliases: [Array],
      usage: 'transfer <member> <amount>',
      execute: [AsyncFunction: execute]
    },
    'weekly' => {
      name: 'weekly',
      usage: 'weekly',
      execute: [AsyncFunction: execute]
    },
    'work' => {
      name: 'work',
      aliases: [],
      usage: 'work',
      cooldown: 3600,
      execute: [Function: execute]
    },
    'say' => {
      name: 'say',
      aliases: [Array],
      description: 'make the bot repeat what you said',
      execute: [Function: execute]
    },
    'sayembed' => {
      name: 'sayembed',
      description: 'say something embed',
      usage: '<title, description>',
      execute: [Function: execute]
    },
    'train' => {
      name: 'train',
      description: 'random thing idk',
      execute: [Function: execute]
    },
    'fasttype' => {
      name: 'fasttype',
      description: 'type fast',
      execute: [AsyncFunction: execute]
    },
    'games' => {
      name: 'games',
      description: 'play some games',
      execute: [Function: execute]
    },
    'settings' => { name: 'settings', execute: [Function: execute] },
    'slots' => {
      name: 'slots',
      description: 'play some games',
      execute: [Function: execute]
    },
    'tictactoe' => {
      name: 'tictactoe',
      description: 'play tictactoe!',
      expectedArgs: '<opponent>',
      minArgs: 1,
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'addfakemember' => { name: 'addfakemember', execute: [Function: execute] },
    'change_status' => { name: 'change_status', execute: [Function: execute] },
    'dev' => {
      name: 'dev',
      description: 'be a dev by completing a form!',
      execute: [AsyncFunction: execute]
    },
    'help' => {
      name: 'help',
      aliases: [Array],
      description: 'List all of my commands or info about a specific command.',
      usage: '[command name]',
      cooldown: 5,
      execute: [Function: execute]
    },
    'ping' => {
      name: 'ping',
      description: 'Ping!',
      execute: [Function: execute]
    },
    'poll' => {
      name: 'poll',
      description: 'poll',
      usage: 'Title + Option 1 + Option 2 + Option 3 + etc',
      execute: [Function: execute]
    },
    'server' => {
      name: 'server',
      aliases: [Array],
      description: 'servers info...',
      cooldown: 5,
      guildOnly: true,
      args: false,
      execute: [Function: execute]
    },
    'suggest' => {
      name: 'suggest',
      description: 'suggest',
      usage: '<suggestion>',
      execute: [Function: execute]
    },
    'ban' => {
      name: 'ban',
      description: 'This command bans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'giverole' => {
      name: 'giverole',
      description: 'give someone a role',
      permission: 'MANAGE_MEMBERS',
      guildOnly: true,
      execute: [Function: execute]
    },
    'kick' => {
      name: 'kick',
      permissions: 'KICK_MEMBERS',
      description: 'this command kicks a member',
      execute: [Function: execute]
    },
    'mute' => {
      name: 'mute',
      description: 'mute someone',
      permissions: 'MANAGE_MESSAGES',
      guildOnly: true,
      execute: [Function: execute]
    },
    'reload' => {
      name: 'reload',
      description: 'Reloads a command',
      args: true,
      execute: [Function: execute]
    },
    'removerole' => {
      name: 'removerole',
      description: "remove someone's role",
      execute: [Function: execute]
    },
    'unban' => {
      name: 'unban',
      description: 'This command unbans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'back' => { name: 'back', aliases: [], execute: [AsyncFunction: execute] },
    'clear' => { name: 'clear', aliases: [], execute: [AsyncFunction: execute] },
    'filter' => {
      name: 'filter',
      aliases: [],
      usage: 'filter [filter name]',
      execute: [AsyncFunction: execute]
    },
    'loop' => {
      name: 'loop',
      aliases: [],
      usage: 'loop [song|queue]',
      execute: [Function: execute]
    },
    'nowplaying' => {
      name: 'nowplaying',
      aliases: [Array],
      execute: [Function: execute]
    },
    'pause' => { name: 'pause', aliases: [], execute: [Function: execute] },
    'play' => {
      name: 'play',
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'progress' => {
      name: 'progress',
      aliases: [Array],
      utilisation: 'progress',
      voiceChannel: true,
      execute: [AsyncFunction: execute]
    },
    'queue' => {
      name: 'queue',
      aliases: [Array],
      utilisation: '{prefix}queue',
      voiceChannel: true,
      execute: [Function: execute]
    },
    'remove' => { name: 'remove', aliases: [], execute: [AsyncFunction: execute] },
    'resume' => { name: 'resume', aliases: [], execute: [Function: execute] },
    'save' => { name: 'save', aliases: [], execute: [AsyncFunction: execute] },
    'skip' => { name: 'skip', aliases: [Array], execute: [Function: execute] },
    'stop' => { name: 'stop', aliases: [Array], execute: [Function: execute] },
    'volume' => {
      name: 'volume',
      aliases: [Array],
      utilisation: 'volume [1-250]',
      voiceChannel: true,
      execute: [Function: execute]
    }
  },
  cooldowns: Collection(7) [Map] {
    'ping' => Collection(0) [Map] {},
    'play' => Collection(1) [Map] { '709950767670493275' => 1645581669067 },
    'skip' => Collection(0) [Map] {},
    'queue' => Collection(0) [Map] {},
    'remove' => Collection(0) [Map] {},
    'search' => Collection(0) [Map] {},
    'stop' => Collection(0) [Map] {}
  },
  player: Player {
    _events: [Object: null prototype] {
      error: [Function (anonymous)],
      connectionError: [Function (anonymous)],
      trackStart: [Function (anonymous)],
      trackAdd: [Function (anonymous)],
      botDisconnect: [Function (anonymous)],
      channelEmpty: [Function (anonymous)],
      queueEnd: [Function (anonymous)]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    options: {
      autoRegisterExtractor: true,
      ytdlOptions: [Object],
      connectionTimeout: 20000
    },
    queues: Collection(1) [Map] { '893532780946919536' => [Queue] },
    voiceUtils: VoiceUtils { cache: [Collection [Map]] },
    extractors: Collection(0) [Map] {},
    requiredEvents: [ 'error', 'connectionError' ],
    client: [Circular *1],
    [Symbol(kCapture)]: false
  },
  [Symbol(kCapture)]: false
}
<ref *1> Client {
  _events: [Object: null prototype] {
    shardDisconnect: [Function (anonymous)],
    voiceStateUpdate: [Function: bound _handleVoiceState],
    guildMemberAdd: [Function (anonymous)],
    message: [Function (anonymous)],
    ready: [Function (anonymous)]
  },
  _eventsCount: 5,
  _maxListeners: 10,
  options: {
    intents: 643,
    waitGuildTimeout: 15000,
    shardCount: 1,
    makeCache: [Function (anonymous)],
    messageCacheLifetime: 0,
    messageSweepInterval: 0,
    invalidRequestWarningInterval: 0,
    partials: [],
    restWsBridgeTimeout: 5000,
    restRequestTimeout: 15000,
    restGlobalRateLimit: 0,
    retryLimit: 1,
    restTimeOffset: 500,
    restSweepInterval: 60,
    failIfNotExists: true,
    userAgentSuffix: [],
    presence: { status: 'online', user: [Object] },
    sweepers: {},
    ws: {
      large_threshold: 50,
      compress: false,
      properties: [Object],
      version: 9,
      presence: [Object]
    },
    http: {
      agent: {},
      version: 9,
      api: 'https://discord.com/api',
      cdn: 'https://cdn.discordapp.com',
      invite: 'https://discord.gg',
      template: 'https://discord.new',
      scheduledEvent: 'https://discord.com/events'
    },
    shards: [ 0 ]
  },
  rest: RESTManager {
    client: [Circular *1],
    handlers: Collection(0) [Map] {},
    versioned: true,
    globalLimit: Infinity,
    globalRemaining: Infinity,
    globalReset: 1645581670753,
    globalDelay: null,
    sweepInterval: Timeout {
      _idleTimeout: 60000,
      _idlePrev: [TimersList],
      _idleNext: [Timeout],
      _idleStart: 842617,
      _onTimeout: [Function (anonymous)],
      _timerArgs: undefined,
      _repeat: 60000,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(kHasPrimitive)]: false,
      [Symbol(asyncId)]: 12,
      [Symbol(triggerId)]: 1
    }
  },
  _cleanups: Set(50) {
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ]
  },
  _finalizers: FinalizationRegistry {},
  ws: WebSocketManager {
    _events: [Object: null prototype] {},
    _eventsCount: 0,
    _maxListeners: undefined,
    gateway: 'wss://gateway.discord.gg/',
    totalShards: 1,
    shards: Collection(1) [Map] { 0 => [WebSocketShard] },
    status: 0,
    destroyed: false,
    reconnecting: false,
    [Symbol(kCapture)]: false
  },
  actions: ActionsManager {
    client: [Circular *1],
    ChannelCreate: ChannelCreateAction { client: [Circular *1] },
    ChannelDelete: ChannelDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    ChannelUpdate: ChannelUpdateAction { client: [Circular *1] },
    GuildBanAdd: GuildBanAdd { client: [Circular *1] },
    GuildBanRemove: GuildBanRemove { client: [Circular *1] },
    GuildChannelsPositionUpdate: GuildChannelsPositionUpdate { client: [Circular *1] },
    GuildDelete: GuildDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    GuildEmojiCreate: GuildEmojiCreateAction { client: [Circular *1] },
    GuildEmojiDelete: GuildEmojiDeleteAction { client: [Circular *1] },
    GuildEmojiUpdate: GuildEmojiUpdateAction { client: [Circular *1] },
    GuildEmojisUpdate: GuildEmojisUpdateAction { client: [Circular *1] },
    GuildIntegrationsUpdate: GuildIntegrationsUpdate { client: [Circular *1] },
    GuildMemberRemove: GuildMemberRemoveAction { client: [Circular *1] },
    GuildMemberUpdate: GuildMemberUpdateAction { client: [Circular *1] },
    GuildRoleCreate: GuildRoleCreate { client: [Circular *1] },
    GuildRoleDelete: GuildRoleDeleteAction { client: [Circular *1] },
    GuildRoleUpdate: GuildRoleUpdateAction { client: [Circular *1] },
    GuildRolesPositionUpdate: GuildRolesPositionUpdate { client: [Circular *1] },
    GuildScheduledEventCreate: GuildScheduledEventCreateAction { client: [Circular *1] },
    GuildScheduledEventDelete: GuildScheduledEventDeleteAction { client: [Circular *1] },
    GuildScheduledEventUpdate: GuildScheduledEventUpdateAction { client: [Circular *1] },
    GuildScheduledEventUserAdd: GuildScheduledEventUserAddAction { client: [Circular *1] },
    GuildScheduledEventUserRemove: GuildScheduledEventUserRemoveAction { client: [Circular *1] },
    GuildStickerCreate: GuildStickerCreateAction { client: [Circular *1] },
    GuildStickerDelete: GuildStickerDeleteAction { client: [Circular *1] },
    GuildStickerUpdate: GuildStickerUpdateAction { client: [Circular *1] },
    GuildStickersUpdate: GuildStickersUpdateAction { client: [Circular *1] },
    GuildUpdate: GuildUpdateAction { client: [Circular *1] },
    InteractionCreate: InteractionCreateAction { client: [Circular *1] },
    InviteCreate: InviteCreateAction { client: [Circular *1] },
    InviteDelete: InviteDeleteAction { client: [Circular *1] },
    MessageCreate: MessageCreateAction { client: [Circular *1] },
    MessageDelete: MessageDeleteAction { client: [Circular *1] },
    MessageDeleteBulk: MessageDeleteBulkAction { client: [Circular *1] },
    MessageReactionAdd: MessageReactionAdd { client: [Circular *1] },
    MessageReactionRemove: MessageReactionRemove { client: [Circular *1] },
    MessageReactionRemoveAll: MessageReactionRemoveAll { client: [Circular *1] },
    MessageReactionRemoveEmoji: MessageReactionRemoveEmoji { client: [Circular *1] },
    MessageUpdate: MessageUpdateAction { client: [Circular *1] },
    PresenceUpdate: PresenceUpdateAction { client: [Circular *1] },
    StageInstanceCreate: StageInstanceCreateAction { client: [Circular *1] },
    StageInstanceDelete: StageInstanceDeleteAction { client: [Circular *1] },
    StageInstanceUpdate: StageInstanceUpdateAction { client: [Circular *1] },
    ThreadCreate: ThreadCreateAction { client: [Circular *1] },
    ThreadDelete: ThreadDeleteAction { client: [Circular *1] },
    ThreadListSync: ThreadListSyncAction { client: [Circular *1] },
    ThreadMemberUpdate: ThreadMemberUpdateAction { client: [Circular *1] },
    ThreadMembersUpdate: ThreadMembersUpdateAction { client: [Circular *1] },
    TypingStart: TypingStart { client: [Circular *1] },
    UserUpdate: UserUpdateAction { client: [Circular *1] },
    VoiceStateUpdate: VoiceStateUpdate { client: [Circular *1] },
    WebhooksUpdate: WebhooksUpdate { client: [Circular *1] }
  },
  voice: ClientVoiceManager {
    adapters: Map(1) { '893532780946919536' => [Object] }
  },
  shard: null,
  users: UserManager {},
  guilds: GuildManager {},
  channels: ChannelManager {},
  sweepers: Sweepers {
    options: {},
    intervals: {
      applicationCommands: null,
      bans: null,
      emojis: null,
      invites: null,
      guildMembers: null,
      messages: null,
      presences: null,
      reactions: null,
      stageInstances: null,
      stickers: null,
      threadMembers: null,
      threads: null,
      users: null,
      voiceStates: null
    }
  },
  presence: ClientPresence {
    userId: null,
    guild: null,
    status: 'online',
    activities: [],
    clientStatus: null
  },
  user: ClientUser {
    id: '894060283373449317',
    bot: true,
    system: false,
    flags: UserFlags { bitfield: 0 },
    username: 'Potato bot',
    discriminator: '1627',
    avatar: 'f169fbb08deede7893419429cf1bc9ab',
    banner: null,
    accentColor: null,
    verified: true,
    mfaEnabled: false
  },
  application: ClientApplication {
    id: '894060283373449317',
    name: null,
    description: null,
    icon: null,
    flags: ApplicationFlags { bitfield: 303104 },
    cover: null,
    rpcOrigins: [],
    botRequireCodeGrant: null,
    botPublic: null,
    owner: null,
    commands: ApplicationCommandManager {
      permissions: [ApplicationCommandPermissionsManager]
    }
  },
  readyAt: 2022-02-23T01:47:22.497Z,
  eco: EconomyManager {
    noNegative: undefined,
    prefix: undefined,
    adapter: { name: 'sqlite', options: undefined },
    db: SqliteManager {
      table: 'money',
      filename: 'eco',
      sqliteOptions: {},
      hasInit: true,
      db: [Database]
    }
  },
  db: table {
    tableName: 'inv',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  config: {
    token: 'ODk0MDYwMjgzMzczNDQ5MzE3.YVkghg.ik3wBzG3rjGWnsQ_o3S5edt12fM',
    prefix: 'potat',
    admins: [
      '709950767670493275',
      '879207914005479514',
      '829171854681964604'
    ],
    debug: true,
    countChannel: '',
    opt: {
      DJ: [Object],
      maxVol: 250,
      loopMessage: false,
      discordPlayer: [Object]
    }
  },
  shop: { laptop: { cost: 1000 }, potato: { cost: 1 } },
  job: table {
    tableName: 'job',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  commands: Collection(50) [Map] {
    'addmoney' => {
      name: 'addmoney',
      aliases: [Array],
      usage: 'addmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'bal' => {
      name: 'bal',
      aliases: [Array],
      usage: 'bal',
      execute: [AsyncFunction: execute]
    },
    'beg' => {
      name: 'beg',
      aliases: [],
      usage: 'beg',
      execute: [AsyncFunction: execute]
    },
    'buy' => {
      name: 'buy',
      aliases: [],
      usage: 'buy <item>',
      execute: [AsyncFunction: execute]
    },
    'daily' => {
      name: 'daily',
      aliases: [],
      usage: 'daily',
      execute: [AsyncFunction: execute]
    },
    'inventory' => {
      name: 'inventory',
      aliases: [Array],
      usage: 'inv',
      execute: [AsyncFunction: execute]
    },
    'lb' => {
      name: 'lb',
      aliases: [Array],
      usage: 'leaderboard',
      execute: [AsyncFunction: execute]
    },
    'search' => {
      name: 'search',
      aliases: [],
      utilisation: 'search [song name]',
      execute: [AsyncFunction: execute]
    },
    'setmoney' => {
      name: 'setmoney',
      usage: 'setmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'transfer' => {
      name: 'transfer',
      aliases: [Array],
      usage: 'transfer <member> <amount>',
      execute: [AsyncFunction: execute]
    },
    'weekly' => {
      name: 'weekly',
      usage: 'weekly',
      execute: [AsyncFunction: execute]
    },
    'work' => {
      name: 'work',
      aliases: [],
      usage: 'work',
      cooldown: 3600,
      execute: [Function: execute]
    },
    'say' => {
      name: 'say',
      aliases: [Array],
      description: 'make the bot repeat what you said',
      execute: [Function: execute]
    },
    'sayembed' => {
      name: 'sayembed',
      description: 'say something embed',
      usage: '<title, description>',
      execute: [Function: execute]
    },
    'train' => {
      name: 'train',
      description: 'random thing idk',
      execute: [Function: execute]
    },
    'fasttype' => {
      name: 'fasttype',
      description: 'type fast',
      execute: [AsyncFunction: execute]
    },
    'games' => {
      name: 'games',
      description: 'play some games',
      execute: [Function: execute]
    },
    'settings' => { name: 'settings', execute: [Function: execute] },
    'slots' => {
      name: 'slots',
      description: 'play some games',
      execute: [Function: execute]
    },
    'tictactoe' => {
      name: 'tictactoe',
      description: 'play tictactoe!',
      expectedArgs: '<opponent>',
      minArgs: 1,
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'addfakemember' => { name: 'addfakemember', execute: [Function: execute] },
    'change_status' => { name: 'change_status', execute: [Function: execute] },
    'dev' => {
      name: 'dev',
      description: 'be a dev by completing a form!',
      execute: [AsyncFunction: execute]
    },
    'help' => {
      name: 'help',
      aliases: [Array],
      description: 'List all of my commands or info about a specific command.',
      usage: '[command name]',
      cooldown: 5,
      execute: [Function: execute]
    },
    'ping' => {
      name: 'ping',
      description: 'Ping!',
      execute: [Function: execute]
    },
    'poll' => {
      name: 'poll',
      description: 'poll',
      usage: 'Title + Option 1 + Option 2 + Option 3 + etc',
      execute: [Function: execute]
    },
    'server' => {
      name: 'server',
      aliases: [Array],
      description: 'servers info...',
      cooldown: 5,
      guildOnly: true,
      args: false,
      execute: [Function: execute]
    },
    'suggest' => {
      name: 'suggest',
      description: 'suggest',
      usage: '<suggestion>',
      execute: [Function: execute]
    },
    'ban' => {
      name: 'ban',
      description: 'This command bans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'giverole' => {
      name: 'giverole',
      description: 'give someone a role',
      permission: 'MANAGE_MEMBERS',
      guildOnly: true,
      execute: [Function: execute]
    },
    'kick' => {
      name: 'kick',
      permissions: 'KICK_MEMBERS',
      description: 'this command kicks a member',
      execute: [Function: execute]
    },
    'mute' => {
      name: 'mute',
      description: 'mute someone',
      permissions: 'MANAGE_MESSAGES',
      guildOnly: true,
      execute: [Function: execute]
    },
    'reload' => {
      name: 'reload',
      description: 'Reloads a command',
      args: true,
      execute: [Function: execute]
    },
    'removerole' => {
      name: 'removerole',
      description: "remove someone's role",
      execute: [Function: execute]
    },
    'unban' => {
      name: 'unban',
      description: 'This command unbans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'back' => { name: 'back', aliases: [], execute: [AsyncFunction: execute] },
    'clear' => { name: 'clear', aliases: [], execute: [AsyncFunction: execute] },
    'filter' => {
      name: 'filter',
      aliases: [],
      usage: 'filter [filter name]',
      execute: [AsyncFunction: execute]
    },
    'loop' => {
      name: 'loop',
      aliases: [],
      usage: 'loop [song|queue]',
      execute: [Function: execute]
    },
    'nowplaying' => {
      name: 'nowplaying',
      aliases: [Array],
      execute: [Function: execute]
    },
    'pause' => { name: 'pause', aliases: [], execute: [Function: execute] },
    'play' => {
      name: 'play',
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'progress' => {
      name: 'progress',
      aliases: [Array],
      utilisation: 'progress',
      voiceChannel: true,
      execute: [AsyncFunction: execute]
    },
    'queue' => {
      name: 'queue',
      aliases: [Array],
      utilisation: '{prefix}queue',
      voiceChannel: true,
      execute: [Function: execute]
    },
    'remove' => { name: 'remove', aliases: [], execute: [AsyncFunction: execute] },
    'resume' => { name: 'resume', aliases: [], execute: [Function: execute] },
    'save' => { name: 'save', aliases: [], execute: [AsyncFunction: execute] },
    'skip' => { name: 'skip', aliases: [Array], execute: [Function: execute] },
    'stop' => { name: 'stop', aliases: [Array], execute: [Function: execute] },
    'volume' => {
      name: 'volume',
      aliases: [Array],
      utilisation: 'volume [1-250]',
      voiceChannel: true,
      execute: [Function: execute]
    }
  },
  cooldowns: Collection(7) [Map] {
    'ping' => Collection(0) [Map] {},
    'play' => Collection(1) [Map] { '709950767670493275' => 1645581682233 },
    'skip' => Collection(0) [Map] {},
    'queue' => Collection(0) [Map] {},
    'remove' => Collection(0) [Map] {},
    'search' => Collection(0) [Map] {},
    'stop' => Collection(0) [Map] {}
  },
  player: Player {
    _events: [Object: null prototype] {
      error: [Function (anonymous)],
      connectionError: [Function (anonymous)],
      trackStart: [Function (anonymous)],
      trackAdd: [Function (anonymous)],
      botDisconnect: [Function (anonymous)],
      channelEmpty: [Function (anonymous)],
      queueEnd: [Function (anonymous)]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    options: {
      autoRegisterExtractor: true,
      ytdlOptions: [Object],
      connectionTimeout: 20000
    },
    queues: Collection(1) [Map] { '893532780946919536' => [Queue] },
    voiceUtils: VoiceUtils { cache: [Collection [Map]] },
    extractors: Collection(0) [Map] {},
    requiredEvents: [ 'error', 'connectionError' ],
    client: [Circular *1],
    [Symbol(kCapture)]: false
  },
  [Symbol(kCapture)]: false
}
<ref *1> Client {
  _events: [Object: null prototype] {
    shardDisconnect: [Function (anonymous)],
    voiceStateUpdate: [Function: bound _handleVoiceState],
    guildMemberAdd: [Function (anonymous)],
    message: [Function (anonymous)],
    ready: [Function (anonymous)]
  },
  _eventsCount: 5,
  _maxListeners: 10,
  options: {
    intents: 643,
    waitGuildTimeout: 15000,
    shardCount: 1,
    makeCache: [Function (anonymous)],
    messageCacheLifetime: 0,
    messageSweepInterval: 0,
    invalidRequestWarningInterval: 0,
    partials: [],
    restWsBridgeTimeout: 5000,
    restRequestTimeout: 15000,
    restGlobalRateLimit: 0,
    retryLimit: 1,
    restTimeOffset: 500,
    restSweepInterval: 60,
    failIfNotExists: true,
    userAgentSuffix: [],
    presence: { status: 'online', user: [Object] },
    sweepers: {},
    ws: {
      large_threshold: 50,
      compress: false,
      properties: [Object],
      version: 9,
      presence: [Object]
    },
    http: {
      agent: {},
      version: 9,
      api: 'https://discord.com/api',
      cdn: 'https://cdn.discordapp.com',
      invite: 'https://discord.gg',
      template: 'https://discord.new',
      scheduledEvent: 'https://discord.com/events'
    },
    shards: [ 0 ]
  },
  rest: RESTManager {
    client: [Circular *1],
    handlers: Collection(1) [Map] {
      '/channels/894764535892819988/messages' => [RequestHandler]
    },
    versioned: true,
    globalLimit: Infinity,
    globalRemaining: Infinity,
    globalReset: 1645581683971,
    globalDelay: null,
    sweepInterval: Timeout {
      _idleTimeout: 60000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 842617,
      _onTimeout: [Function (anonymous)],
      _timerArgs: undefined,
      _repeat: 60000,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(kHasPrimitive)]: false,
      [Symbol(asyncId)]: 12,
      [Symbol(triggerId)]: 1
    }
  },
  _cleanups: Set(50) {
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ]
  },
  _finalizers: FinalizationRegistry {},
  ws: WebSocketManager {
    _events: [Object: null prototype] {},
    _eventsCount: 0,
    _maxListeners: undefined,
    gateway: 'wss://gateway.discord.gg/',
    totalShards: 1,
    shards: Collection(1) [Map] { 0 => [WebSocketShard] },
    status: 0,
    destroyed: false,
    reconnecting: false,
    [Symbol(kCapture)]: false
  },
  actions: ActionsManager {
    client: [Circular *1],
    ChannelCreate: ChannelCreateAction { client: [Circular *1] },
    ChannelDelete: ChannelDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    ChannelUpdate: ChannelUpdateAction { client: [Circular *1] },
    GuildBanAdd: GuildBanAdd { client: [Circular *1] },
    GuildBanRemove: GuildBanRemove { client: [Circular *1] },
    GuildChannelsPositionUpdate: GuildChannelsPositionUpdate { client: [Circular *1] },
    GuildDelete: GuildDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    GuildEmojiCreate: GuildEmojiCreateAction { client: [Circular *1] },
    GuildEmojiDelete: GuildEmojiDeleteAction { client: [Circular *1] },
    GuildEmojiUpdate: GuildEmojiUpdateAction { client: [Circular *1] },
    GuildEmojisUpdate: GuildEmojisUpdateAction { client: [Circular *1] },
    GuildIntegrationsUpdate: GuildIntegrationsUpdate { client: [Circular *1] },
    GuildMemberRemove: GuildMemberRemoveAction { client: [Circular *1] },
    GuildMemberUpdate: GuildMemberUpdateAction { client: [Circular *1] },
    GuildRoleCreate: GuildRoleCreate { client: [Circular *1] },
    GuildRoleDelete: GuildRoleDeleteAction { client: [Circular *1] },
    GuildRoleUpdate: GuildRoleUpdateAction { client: [Circular *1] },
    GuildRolesPositionUpdate: GuildRolesPositionUpdate { client: [Circular *1] },
    GuildScheduledEventCreate: GuildScheduledEventCreateAction { client: [Circular *1] },
    GuildScheduledEventDelete: GuildScheduledEventDeleteAction { client: [Circular *1] },
    GuildScheduledEventUpdate: GuildScheduledEventUpdateAction { client: [Circular *1] },
    GuildScheduledEventUserAdd: GuildScheduledEventUserAddAction { client: [Circular *1] },
    GuildScheduledEventUserRemove: GuildScheduledEventUserRemoveAction { client: [Circular *1] },
    GuildStickerCreate: GuildStickerCreateAction { client: [Circular *1] },
    GuildStickerDelete: GuildStickerDeleteAction { client: [Circular *1] },
    GuildStickerUpdate: GuildStickerUpdateAction { client: [Circular *1] },
    GuildStickersUpdate: GuildStickersUpdateAction { client: [Circular *1] },
    GuildUpdate: GuildUpdateAction { client: [Circular *1] },
    InteractionCreate: InteractionCreateAction { client: [Circular *1] },
    InviteCreate: InviteCreateAction { client: [Circular *1] },
    InviteDelete: InviteDeleteAction { client: [Circular *1] },
    MessageCreate: MessageCreateAction { client: [Circular *1] },
    MessageDelete: MessageDeleteAction { client: [Circular *1] },
    MessageDeleteBulk: MessageDeleteBulkAction { client: [Circular *1] },
    MessageReactionAdd: MessageReactionAdd { client: [Circular *1] },
    MessageReactionRemove: MessageReactionRemove { client: [Circular *1] },
    MessageReactionRemoveAll: MessageReactionRemoveAll { client: [Circular *1] },
    MessageReactionRemoveEmoji: MessageReactionRemoveEmoji { client: [Circular *1] },
    MessageUpdate: MessageUpdateAction { client: [Circular *1] },
    PresenceUpdate: PresenceUpdateAction { client: [Circular *1] },
    StageInstanceCreate: StageInstanceCreateAction { client: [Circular *1] },
    StageInstanceDelete: StageInstanceDeleteAction { client: [Circular *1] },
    StageInstanceUpdate: StageInstanceUpdateAction { client: [Circular *1] },
    ThreadCreate: ThreadCreateAction { client: [Circular *1] },
    ThreadDelete: ThreadDeleteAction { client: [Circular *1] },
    ThreadListSync: ThreadListSyncAction { client: [Circular *1] },
    ThreadMemberUpdate: ThreadMemberUpdateAction { client: [Circular *1] },
    ThreadMembersUpdate: ThreadMembersUpdateAction { client: [Circular *1] },
    TypingStart: TypingStart { client: [Circular *1] },
    UserUpdate: UserUpdateAction { client: [Circular *1] },
    VoiceStateUpdate: VoiceStateUpdate { client: [Circular *1] },
    WebhooksUpdate: WebhooksUpdate { client: [Circular *1] }
  },
  voice: ClientVoiceManager {
    adapters: Map(1) { '893532780946919536' => [Object] }
  },
  shard: null,
  users: UserManager {},
  guilds: GuildManager {},
  channels: ChannelManager {},
  sweepers: Sweepers {
    options: {},
    intervals: {
      applicationCommands: null,
      bans: null,
      emojis: null,
      invites: null,
      guildMembers: null,
      messages: null,
      presences: null,
      reactions: null,
      stageInstances: null,
      stickers: null,
      threadMembers: null,
      threads: null,
      users: null,
      voiceStates: null
    }
  },
  presence: ClientPresence {
    userId: null,
    guild: null,
    status: 'online',
    activities: [],
    clientStatus: null
  },
  user: ClientUser {
    id: '894060283373449317',
    bot: true,
    system: false,
    flags: UserFlags { bitfield: 0 },
    username: 'Potato bot',
    discriminator: '1627',
    avatar: 'f169fbb08deede7893419429cf1bc9ab',
    banner: null,
    accentColor: null,
    verified: true,
    mfaEnabled: false
  },
  application: ClientApplication {
    id: '894060283373449317',
    name: null,
    description: null,
    icon: null,
    flags: ApplicationFlags { bitfield: 303104 },
    cover: null,
    rpcOrigins: [],
    botRequireCodeGrant: null,
    botPublic: null,
    owner: null,
    commands: ApplicationCommandManager {
      permissions: [ApplicationCommandPermissionsManager]
    }
  },
  readyAt: 2022-02-23T01:47:22.497Z,
  eco: EconomyManager {
    noNegative: undefined,
    prefix: undefined,
    adapter: { name: 'sqlite', options: undefined },
    db: SqliteManager {
      table: 'money',
      filename: 'eco',
      sqliteOptions: {},
      hasInit: true,
      db: [Database]
    }
  },
  db: table {
    tableName: 'inv',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  config: {
    token: 'ODk0MDYwMjgzMzczNDQ5MzE3.YVkghg.ik3wBzG3rjGWnsQ_o3S5edt12fM',
    prefix: 'potat',
    admins: [
      '709950767670493275',
      '879207914005479514',
      '829171854681964604'
    ],
    debug: true,
    countChannel: '',
    opt: {
      DJ: [Object],
      maxVol: 250,
      loopMessage: false,
      discordPlayer: [Object]
    }
  },
  shop: { laptop: { cost: 1000 }, potato: { cost: 1 } },
  job: table {
    tableName: 'job',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  commands: Collection(50) [Map] {
    'addmoney' => {
      name: 'addmoney',
      aliases: [Array],
      usage: 'addmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'bal' => {
      name: 'bal',
      aliases: [Array],
      usage: 'bal',
      execute: [AsyncFunction: execute]
    },
    'beg' => {
      name: 'beg',
      aliases: [],
      usage: 'beg',
      execute: [AsyncFunction: execute]
    },
    'buy' => {
      name: 'buy',
      aliases: [],
      usage: 'buy <item>',
      execute: [AsyncFunction: execute]
    },
    'daily' => {
      name: 'daily',
      aliases: [],
      usage: 'daily',
      execute: [AsyncFunction: execute]
    },
    'inventory' => {
      name: 'inventory',
      aliases: [Array],
      usage: 'inv',
      execute: [AsyncFunction: execute]
    },
    'lb' => {
      name: 'lb',
      aliases: [Array],
      usage: 'leaderboard',
      execute: [AsyncFunction: execute]
    },
    'search' => {
      name: 'search',
      aliases: [],
      utilisation: 'search [song name]',
      execute: [AsyncFunction: execute]
    },
    'setmoney' => {
      name: 'setmoney',
      usage: 'setmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'transfer' => {
      name: 'transfer',
      aliases: [Array],
      usage: 'transfer <member> <amount>',
      execute: [AsyncFunction: execute]
    },
    'weekly' => {
      name: 'weekly',
      usage: 'weekly',
      execute: [AsyncFunction: execute]
    },
    'work' => {
      name: 'work',
      aliases: [],
      usage: 'work',
      cooldown: 3600,
      execute: [Function: execute]
    },
    'say' => {
      name: 'say',
      aliases: [Array],
      description: 'make the bot repeat what you said',
      execute: [Function: execute]
    },
    'sayembed' => {
      name: 'sayembed',
      description: 'say something embed',
      usage: '<title, description>',
      execute: [Function: execute]
    },
    'train' => {
      name: 'train',
      description: 'random thing idk',
      execute: [Function: execute]
    },
    'fasttype' => {
      name: 'fasttype',
      description: 'type fast',
      execute: [AsyncFunction: execute]
    },
    'games' => {
      name: 'games',
      description: 'play some games',
      execute: [Function: execute]
    },
    'settings' => { name: 'settings', execute: [Function: execute] },
    'slots' => {
      name: 'slots',
      description: 'play some games',
      execute: [Function: execute]
    },
    'tictactoe' => {
      name: 'tictactoe',
      description: 'play tictactoe!',
      expectedArgs: '<opponent>',
      minArgs: 1,
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'addfakemember' => { name: 'addfakemember', execute: [Function: execute] },
    'change_status' => { name: 'change_status', execute: [Function: execute] },
    'dev' => {
      name: 'dev',
      description: 'be a dev by completing a form!',
      execute: [AsyncFunction: execute]
    },
    'help' => {
      name: 'help',
      aliases: [Array],
      description: 'List all of my commands or info about a specific command.',
      usage: '[command name]',
      cooldown: 5,
      execute: [Function: execute]
    },
    'ping' => {
      name: 'ping',
      description: 'Ping!',
      execute: [Function: execute]
    },
    'poll' => {
      name: 'poll',
      description: 'poll',
      usage: 'Title + Option 1 + Option 2 + Option 3 + etc',
      execute: [Function: execute]
    },
    'server' => {
      name: 'server',
      aliases: [Array],
      description: 'servers info...',
      cooldown: 5,
      guildOnly: true,
      args: false,
      execute: [Function: execute]
    },
    'suggest' => {
      name: 'suggest',
      description: 'suggest',
      usage: '<suggestion>',
      execute: [Function: execute]
    },
    'ban' => {
      name: 'ban',
      description: 'This command bans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'giverole' => {
      name: 'giverole',
      description: 'give someone a role',
      permission: 'MANAGE_MEMBERS',
      guildOnly: true,
      execute: [Function: execute]
    },
    'kick' => {
      name: 'kick',
      permissions: 'KICK_MEMBERS',
      description: 'this command kicks a member',
      execute: [Function: execute]
    },
    'mute' => {
      name: 'mute',
      description: 'mute someone',
      permissions: 'MANAGE_MESSAGES',
      guildOnly: true,
      execute: [Function: execute]
    },
    'reload' => {
      name: 'reload',
      description: 'Reloads a command',
      args: true,
      execute: [Function: execute]
    },
    'removerole' => {
      name: 'removerole',
      description: "remove someone's role",
      execute: [Function: execute]
    },
    'unban' => {
      name: 'unban',
      description: 'This command unbans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'back' => { name: 'back', aliases: [], execute: [AsyncFunction: execute] },
    'clear' => { name: 'clear', aliases: [], execute: [AsyncFunction: execute] },
    'filter' => {
      name: 'filter',
      aliases: [],
      usage: 'filter [filter name]',
      execute: [AsyncFunction: execute]
    },
    'loop' => {
      name: 'loop',
      aliases: [],
      usage: 'loop [song|queue]',
      execute: [Function: execute]
    },
    'nowplaying' => {
      name: 'nowplaying',
      aliases: [Array],
      execute: [Function: execute]
    },
    'pause' => { name: 'pause', aliases: [], execute: [Function: execute] },
    'play' => {
      name: 'play',
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'progress' => {
      name: 'progress',
      aliases: [Array],
      utilisation: 'progress',
      voiceChannel: true,
      execute: [AsyncFunction: execute]
    },
    'queue' => {
      name: 'queue',
      aliases: [Array],
      utilisation: '{prefix}queue',
      voiceChannel: true,
      execute: [Function: execute]
    },
    'remove' => { name: 'remove', aliases: [], execute: [AsyncFunction: execute] },
    'resume' => { name: 'resume', aliases: [], execute: [Function: execute] },
    'save' => { name: 'save', aliases: [], execute: [AsyncFunction: execute] },
    'skip' => { name: 'skip', aliases: [Array], execute: [Function: execute] },
    'stop' => { name: 'stop', aliases: [Array], execute: [Function: execute] },
    'volume' => {
      name: 'volume',
      aliases: [Array],
      utilisation: 'volume [1-250]',
      voiceChannel: true,
      execute: [Function: execute]
    }
  },
  cooldowns: Collection(7) [Map] {
    'ping' => Collection(0) [Map] {},
    'play' => Collection(1) [Map] { '709950767670493275' => 1645581693440 },
    'skip' => Collection(0) [Map] {},
    'queue' => Collection(0) [Map] {},
    'remove' => Collection(0) [Map] {},
    'search' => Collection(0) [Map] {},
    'stop' => Collection(0) [Map] {}
  },
  player: Player {
    _events: [Object: null prototype] {
      error: [Function (anonymous)],
      connectionError: [Function (anonymous)],
      trackStart: [Function (anonymous)],
      trackAdd: [Function (anonymous)],
      botDisconnect: [Function (anonymous)],
      channelEmpty: [Function (anonymous)],
      queueEnd: [Function (anonymous)]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    options: {
      autoRegisterExtractor: true,
      ytdlOptions: [Object],
      connectionTimeout: 20000
    },
    queues: Collection(1) [Map] { '893532780946919536' => [Queue] },
    voiceUtils: VoiceUtils { cache: [Collection [Map]] },
    extractors: Collection(0) [Map] {},
    requiredEvents: [ 'error', 'connectionError' ],
    client: [Circular *1],
    [Symbol(kCapture)]: false
  },
  [Symbol(kCapture)]: false
}
<ref *1> Client {
  _events: [Object: null prototype] {
    shardDisconnect: [Function (anonymous)],
    voiceStateUpdate: [Function: bound _handleVoiceState],
    guildMemberAdd: [Function (anonymous)],
    message: [Function (anonymous)],
    ready: [Function (anonymous)]
  },
  _eventsCount: 5,
  _maxListeners: 10,
  options: {
    intents: 643,
    waitGuildTimeout: 15000,
    shardCount: 1,
    makeCache: [Function (anonymous)],
    messageCacheLifetime: 0,
    messageSweepInterval: 0,
    invalidRequestWarningInterval: 0,
    partials: [],
    restWsBridgeTimeout: 5000,
    restRequestTimeout: 15000,
    restGlobalRateLimit: 0,
    retryLimit: 1,
    restTimeOffset: 500,
    restSweepInterval: 60,
    failIfNotExists: true,
    userAgentSuffix: [],
    presence: { status: 'online', user: [Object] },
    sweepers: {},
    ws: {
      large_threshold: 50,
      compress: false,
      properties: [Object],
      version: 9,
      presence: [Object]
    },
    http: {
      agent: {},
      version: 9,
      api: 'https://discord.com/api',
      cdn: 'https://cdn.discordapp.com',
      invite: 'https://discord.gg',
      template: 'https://discord.new',
      scheduledEvent: 'https://discord.com/events'
    },
    shards: [ 0 ]
  },
  rest: RESTManager {
    client: [Circular *1],
    handlers: Collection(1) [Map] {
      '/channels/894764535892819988/messages' => [RequestHandler]
    },
    versioned: true,
    globalLimit: Infinity,
    globalRemaining: Infinity,
    globalReset: 1645581695199,
    globalDelay: null,
    sweepInterval: Timeout {
      _idleTimeout: 60000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 842617,
      _onTimeout: [Function (anonymous)],
      _timerArgs: undefined,
      _repeat: 60000,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(kHasPrimitive)]: false,
      [Symbol(asyncId)]: 12,
      [Symbol(triggerId)]: 1
    }
  },
  _cleanups: Set(50) {
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ]
  },
  _finalizers: FinalizationRegistry {},
  ws: WebSocketManager {
    _events: [Object: null prototype] {},
    _eventsCount: 0,
    _maxListeners: undefined,
    gateway: 'wss://gateway.discord.gg/',
    totalShards: 1,
    shards: Collection(1) [Map] { 0 => [WebSocketShard] },
    status: 0,
    destroyed: false,
    reconnecting: false,
    [Symbol(kCapture)]: false
  },
  actions: ActionsManager {
    client: [Circular *1],
    ChannelCreate: ChannelCreateAction { client: [Circular *1] },
    ChannelDelete: ChannelDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    ChannelUpdate: ChannelUpdateAction { client: [Circular *1] },
    GuildBanAdd: GuildBanAdd { client: [Circular *1] },
    GuildBanRemove: GuildBanRemove { client: [Circular *1] },
    GuildChannelsPositionUpdate: GuildChannelsPositionUpdate { client: [Circular *1] },
    GuildDelete: GuildDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    GuildEmojiCreate: GuildEmojiCreateAction { client: [Circular *1] },
    GuildEmojiDelete: GuildEmojiDeleteAction { client: [Circular *1] },
    GuildEmojiUpdate: GuildEmojiUpdateAction { client: [Circular *1] },
    GuildEmojisUpdate: GuildEmojisUpdateAction { client: [Circular *1] },
    GuildIntegrationsUpdate: GuildIntegrationsUpdate { client: [Circular *1] },
    GuildMemberRemove: GuildMemberRemoveAction { client: [Circular *1] },
    GuildMemberUpdate: GuildMemberUpdateAction { client: [Circular *1] },
    GuildRoleCreate: GuildRoleCreate { client: [Circular *1] },
    GuildRoleDelete: GuildRoleDeleteAction { client: [Circular *1] },
    GuildRoleUpdate: GuildRoleUpdateAction { client: [Circular *1] },
    GuildRolesPositionUpdate: GuildRolesPositionUpdate { client: [Circular *1] },
    GuildScheduledEventCreate: GuildScheduledEventCreateAction { client: [Circular *1] },
    GuildScheduledEventDelete: GuildScheduledEventDeleteAction { client: [Circular *1] },
    GuildScheduledEventUpdate: GuildScheduledEventUpdateAction { client: [Circular *1] },
    GuildScheduledEventUserAdd: GuildScheduledEventUserAddAction { client: [Circular *1] },
    GuildScheduledEventUserRemove: GuildScheduledEventUserRemoveAction { client: [Circular *1] },
    GuildStickerCreate: GuildStickerCreateAction { client: [Circular *1] },
    GuildStickerDelete: GuildStickerDeleteAction { client: [Circular *1] },
    GuildStickerUpdate: GuildStickerUpdateAction { client: [Circular *1] },
    GuildStickersUpdate: GuildStickersUpdateAction { client: [Circular *1] },
    GuildUpdate: GuildUpdateAction { client: [Circular *1] },
    InteractionCreate: InteractionCreateAction { client: [Circular *1] },
    InviteCreate: InviteCreateAction { client: [Circular *1] },
    InviteDelete: InviteDeleteAction { client: [Circular *1] },
    MessageCreate: MessageCreateAction { client: [Circular *1] },
    MessageDelete: MessageDeleteAction { client: [Circular *1] },
    MessageDeleteBulk: MessageDeleteBulkAction { client: [Circular *1] },
    MessageReactionAdd: MessageReactionAdd { client: [Circular *1] },
    MessageReactionRemove: MessageReactionRemove { client: [Circular *1] },
    MessageReactionRemoveAll: MessageReactionRemoveAll { client: [Circular *1] },
    MessageReactionRemoveEmoji: MessageReactionRemoveEmoji { client: [Circular *1] },
    MessageUpdate: MessageUpdateAction { client: [Circular *1] },
    PresenceUpdate: PresenceUpdateAction { client: [Circular *1] },
    StageInstanceCreate: StageInstanceCreateAction { client: [Circular *1] },
    StageInstanceDelete: StageInstanceDeleteAction { client: [Circular *1] },
    StageInstanceUpdate: StageInstanceUpdateAction { client: [Circular *1] },
    ThreadCreate: ThreadCreateAction { client: [Circular *1] },
    ThreadDelete: ThreadDeleteAction { client: [Circular *1] },
    ThreadListSync: ThreadListSyncAction { client: [Circular *1] },
    ThreadMemberUpdate: ThreadMemberUpdateAction { client: [Circular *1] },
    ThreadMembersUpdate: ThreadMembersUpdateAction { client: [Circular *1] },
    TypingStart: TypingStart { client: [Circular *1] },
    UserUpdate: UserUpdateAction { client: [Circular *1] },
    VoiceStateUpdate: VoiceStateUpdate { client: [Circular *1] },
    WebhooksUpdate: WebhooksUpdate { client: [Circular *1] }
  },
  voice: ClientVoiceManager {
    adapters: Map(1) { '893532780946919536' => [Object] }
  },
  shard: null,
  users: UserManager {},
  guilds: GuildManager {},
  channels: ChannelManager {},
  sweepers: Sweepers {
    options: {},
    intervals: {
      applicationCommands: null,
      bans: null,
      emojis: null,
      invites: null,
      guildMembers: null,
      messages: null,
      presences: null,
      reactions: null,
      stageInstances: null,
      stickers: null,
      threadMembers: null,
      threads: null,
      users: null,
      voiceStates: null
    }
  },
  presence: ClientPresence {
    userId: null,
    guild: null,
    status: 'online',
    activities: [],
    clientStatus: null
  },
  user: ClientUser {
    id: '894060283373449317',
    bot: true,
    system: false,
    flags: UserFlags { bitfield: 0 },
    username: 'Potato bot',
    discriminator: '1627',
    avatar: 'f169fbb08deede7893419429cf1bc9ab',
    banner: null,
    accentColor: null,
    verified: true,
    mfaEnabled: false
  },
  application: ClientApplication {
    id: '894060283373449317',
    name: null,
    description: null,
    icon: null,
    flags: ApplicationFlags { bitfield: 303104 },
    cover: null,
    rpcOrigins: [],
    botRequireCodeGrant: null,
    botPublic: null,
    owner: null,
    commands: ApplicationCommandManager {
      permissions: [ApplicationCommandPermissionsManager]
    }
  },
  readyAt: 2022-02-23T01:47:22.497Z,
  eco: EconomyManager {
    noNegative: undefined,
    prefix: undefined,
    adapter: { name: 'sqlite', options: undefined },
    db: SqliteManager {
      table: 'money',
      filename: 'eco',
      sqliteOptions: {},
      hasInit: true,
      db: [Database]
    }
  },
  db: table {
    tableName: 'inv',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  config: {
    token: 'ODk0MDYwMjgzMzczNDQ5MzE3.YVkghg.ik3wBzG3rjGWnsQ_o3S5edt12fM',
    prefix: 'potat',
    admins: [
      '709950767670493275',
      '879207914005479514',
      '829171854681964604'
    ],
    debug: true,
    countChannel: '',
    opt: {
      DJ: [Object],
      maxVol: 250,
      loopMessage: false,
      discordPlayer: [Object]
    }
  },
  shop: { laptop: { cost: 1000 }, potato: { cost: 1 } },
  job: table {
    tableName: 'job',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  commands: Collection(50) [Map] {
    'addmoney' => {
      name: 'addmoney',
      aliases: [Array],
      usage: 'addmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'bal' => {
      name: 'bal',
      aliases: [Array],
      usage: 'bal',
      execute: [AsyncFunction: execute]
    },
    'beg' => {
      name: 'beg',
      aliases: [],
      usage: 'beg',
      execute: [AsyncFunction: execute]
    },
    'buy' => {
      name: 'buy',
      aliases: [],
      usage: 'buy <item>',
      execute: [AsyncFunction: execute]
    },
    'daily' => {
      name: 'daily',
      aliases: [],
      usage: 'daily',
      execute: [AsyncFunction: execute]
    },
    'inventory' => {
      name: 'inventory',
      aliases: [Array],
      usage: 'inv',
      execute: [AsyncFunction: execute]
    },
    'lb' => {
      name: 'lb',
      aliases: [Array],
      usage: 'leaderboard',
      execute: [AsyncFunction: execute]
    },
    'search' => {
      name: 'search',
      aliases: [],
      utilisation: 'search [song name]',
      execute: [AsyncFunction: execute]
    },
    'setmoney' => {
      name: 'setmoney',
      usage: 'setmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'transfer' => {
      name: 'transfer',
      aliases: [Array],
      usage: 'transfer <member> <amount>',
      execute: [AsyncFunction: execute]
    },
    'weekly' => {
      name: 'weekly',
      usage: 'weekly',
      execute: [AsyncFunction: execute]
    },
    'work' => {
      name: 'work',
      aliases: [],
      usage: 'work',
      cooldown: 3600,
      execute: [Function: execute]
    },
    'say' => {
      name: 'say',
      aliases: [Array],
      description: 'make the bot repeat what you said',
      execute: [Function: execute]
    },
    'sayembed' => {
      name: 'sayembed',
      description: 'say something embed',
      usage: '<title, description>',
      execute: [Function: execute]
    },
    'train' => {
      name: 'train',
      description: 'random thing idk',
      execute: [Function: execute]
    },
    'fasttype' => {
      name: 'fasttype',
      description: 'type fast',
      execute: [AsyncFunction: execute]
    },
    'games' => {
      name: 'games',
      description: 'play some games',
      execute: [Function: execute]
    },
    'settings' => { name: 'settings', execute: [Function: execute] },
    'slots' => {
      name: 'slots',
      description: 'play some games',
      execute: [Function: execute]
    },
    'tictactoe' => {
      name: 'tictactoe',
      description: 'play tictactoe!',
      expectedArgs: '<opponent>',
      minArgs: 1,
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'addfakemember' => { name: 'addfakemember', execute: [Function: execute] },
    'change_status' => { name: 'change_status', execute: [Function: execute] },
    'dev' => {
      name: 'dev',
      description: 'be a dev by completing a form!',
      execute: [AsyncFunction: execute]
    },
    'help' => {
      name: 'help',
      aliases: [Array],
      description: 'List all of my commands or info about a specific command.',
      usage: '[command name]',
      cooldown: 5,
      execute: [Function: execute]
    },
    'ping' => {
      name: 'ping',
      description: 'Ping!',
      execute: [Function: execute]
    },
    'poll' => {
      name: 'poll',
      description: 'poll',
      usage: 'Title + Option 1 + Option 2 + Option 3 + etc',
      execute: [Function: execute]
    },
    'server' => {
      name: 'server',
      aliases: [Array],
      description: 'servers info...',
      cooldown: 5,
      guildOnly: true,
      args: false,
      execute: [Function: execute]
    },
    'suggest' => {
      name: 'suggest',
      description: 'suggest',
      usage: '<suggestion>',
      execute: [Function: execute]
    },
    'ban' => {
      name: 'ban',
      description: 'This command bans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'giverole' => {
      name: 'giverole',
      description: 'give someone a role',
      permission: 'MANAGE_MEMBERS',
      guildOnly: true,
      execute: [Function: execute]
    },
    'kick' => {
      name: 'kick',
      permissions: 'KICK_MEMBERS',
      description: 'this command kicks a member',
      execute: [Function: execute]
    },
    'mute' => {
      name: 'mute',
      description: 'mute someone',
      permissions: 'MANAGE_MESSAGES',
      guildOnly: true,
      execute: [Function: execute]
    },
    'reload' => {
      name: 'reload',
      description: 'Reloads a command',
      args: true,
      execute: [Function: execute]
    },
    'removerole' => {
      name: 'removerole',
      description: "remove someone's role",
      execute: [Function: execute]
    },
    'unban' => {
      name: 'unban',
      description: 'This command unbans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'back' => { name: 'back', aliases: [], execute: [AsyncFunction: execute] },
    'clear' => { name: 'clear', aliases: [], execute: [AsyncFunction: execute] },
    'filter' => {
      name: 'filter',
      aliases: [],
      usage: 'filter [filter name]',
      execute: [AsyncFunction: execute]
    },
    'loop' => {
      name: 'loop',
      aliases: [],
      usage: 'loop [song|queue]',
      execute: [Function: execute]
    },
    'nowplaying' => {
      name: 'nowplaying',
      aliases: [Array],
      execute: [Function: execute]
    },
    'pause' => { name: 'pause', aliases: [], execute: [Function: execute] },
    'play' => {
      name: 'play',
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'progress' => {
      name: 'progress',
      aliases: [Array],
      utilisation: 'progress',
      voiceChannel: true,
      execute: [AsyncFunction: execute]
    },
    'queue' => {
      name: 'queue',
      aliases: [Array],
      utilisation: '{prefix}queue',
      voiceChannel: true,
      execute: [Function: execute]
    },
    'remove' => { name: 'remove', aliases: [], execute: [AsyncFunction: execute] },
    'resume' => { name: 'resume', aliases: [], execute: [Function: execute] },
    'save' => { name: 'save', aliases: [], execute: [AsyncFunction: execute] },
    'skip' => { name: 'skip', aliases: [Array], execute: [Function: execute] },
    'stop' => { name: 'stop', aliases: [Array], execute: [Function: execute] },
    'volume' => {
      name: 'volume',
      aliases: [Array],
      utilisation: 'volume [1-250]',
      voiceChannel: true,
      execute: [Function: execute]
    }
  },
  cooldowns: Collection(7) [Map] {
    'ping' => Collection(0) [Map] {},
    'play' => Collection(1) [Map] { '709950767670493275' => 1645581699386 },
    'skip' => Collection(0) [Map] {},
    'queue' => Collection(0) [Map] {},
    'remove' => Collection(0) [Map] {},
    'search' => Collection(0) [Map] {},
    'stop' => Collection(0) [Map] {}
  },
  player: Player {
    _events: [Object: null prototype] {
      error: [Function (anonymous)],
      connectionError: [Function (anonymous)],
      trackStart: [Function (anonymous)],
      trackAdd: [Function (anonymous)],
      botDisconnect: [Function (anonymous)],
      channelEmpty: [Function (anonymous)],
      queueEnd: [Function (anonymous)]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    options: {
      autoRegisterExtractor: true,
      ytdlOptions: [Object],
      connectionTimeout: 20000
    },
    queues: Collection(1) [Map] { '893532780946919536' => [Queue] },
    voiceUtils: VoiceUtils { cache: [Collection [Map]] },
    extractors: Collection(0) [Map] {},
    requiredEvents: [ 'error', 'connectionError' ],
    client: [Circular *1],
    [Symbol(kCapture)]: false
  },
  [Symbol(kCapture)]: false
}
<ref *1> Client {
  _events: [Object: null prototype] {
    shardDisconnect: [Function (anonymous)],
    voiceStateUpdate: [Function: bound _handleVoiceState],
    guildMemberAdd: [Function (anonymous)],
    message: [Function (anonymous)],
    ready: [Function (anonymous)]
  },
  _eventsCount: 5,
  _maxListeners: 10,
  options: {
    intents: 643,
    waitGuildTimeout: 15000,
    shardCount: 1,
    makeCache: [Function (anonymous)],
    messageCacheLifetime: 0,
    messageSweepInterval: 0,
    invalidRequestWarningInterval: 0,
    partials: [],
    restWsBridgeTimeout: 5000,
    restRequestTimeout: 15000,
    restGlobalRateLimit: 0,
    retryLimit: 1,
    restTimeOffset: 500,
    restSweepInterval: 60,
    failIfNotExists: true,
    userAgentSuffix: [],
    presence: { status: 'online', user: [Object] },
    sweepers: {},
    ws: {
      large_threshold: 50,
      compress: false,
      properties: [Object],
      version: 9,
      presence: [Object]
    },
    http: {
      agent: {},
      version: 9,
      api: 'https://discord.com/api',
      cdn: 'https://cdn.discordapp.com',
      invite: 'https://discord.gg',
      template: 'https://discord.new',
      scheduledEvent: 'https://discord.com/events'
    },
    shards: [ 0 ]
  },
  rest: RESTManager {
    client: [Circular *1],
    handlers: Collection(1) [Map] {
      '/channels/894764535892819988/messages' => [RequestHandler]
    },
    versioned: true,
    globalLimit: Infinity,
    globalRemaining: Infinity,
    globalReset: 1645581701056,
    globalDelay: null,
    sweepInterval: Timeout {
      _idleTimeout: 60000,
      _idlePrev: [Timeout],
      _idleNext: [TimersList],
      _idleStart: 842617,
      _onTimeout: [Function (anonymous)],
      _timerArgs: undefined,
      _repeat: 60000,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(kHasPrimitive)]: false,
      [Symbol(asyncId)]: 12,
      [Symbol(triggerId)]: 1
    }
  },
  _cleanups: Set(50) {
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ]
  },
  _finalizers: FinalizationRegistry {},
  ws: WebSocketManager {
    _events: [Object: null prototype] {},
    _eventsCount: 0,
    _maxListeners: undefined,
    gateway: 'wss://gateway.discord.gg/',
    totalShards: 1,
    shards: Collection(1) [Map] { 0 => [WebSocketShard] },
    status: 0,
    destroyed: false,
    reconnecting: false,
    [Symbol(kCapture)]: false
  },
  actions: ActionsManager {
    client: [Circular *1],
    ChannelCreate: ChannelCreateAction { client: [Circular *1] },
    ChannelDelete: ChannelDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    ChannelUpdate: ChannelUpdateAction { client: [Circular *1] },
    GuildBanAdd: GuildBanAdd { client: [Circular *1] },
    GuildBanRemove: GuildBanRemove { client: [Circular *1] },
    GuildChannelsPositionUpdate: GuildChannelsPositionUpdate { client: [Circular *1] },
    GuildDelete: GuildDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    GuildEmojiCreate: GuildEmojiCreateAction { client: [Circular *1] },
    GuildEmojiDelete: GuildEmojiDeleteAction { client: [Circular *1] },
    GuildEmojiUpdate: GuildEmojiUpdateAction { client: [Circular *1] },
    GuildEmojisUpdate: GuildEmojisUpdateAction { client: [Circular *1] },
    GuildIntegrationsUpdate: GuildIntegrationsUpdate { client: [Circular *1] },
    GuildMemberRemove: GuildMemberRemoveAction { client: [Circular *1] },
    GuildMemberUpdate: GuildMemberUpdateAction { client: [Circular *1] },
    GuildRoleCreate: GuildRoleCreate { client: [Circular *1] },
    GuildRoleDelete: GuildRoleDeleteAction { client: [Circular *1] },
    GuildRoleUpdate: GuildRoleUpdateAction { client: [Circular *1] },
    GuildRolesPositionUpdate: GuildRolesPositionUpdate { client: [Circular *1] },
    GuildScheduledEventCreate: GuildScheduledEventCreateAction { client: [Circular *1] },
    GuildScheduledEventDelete: GuildScheduledEventDeleteAction { client: [Circular *1] },
    GuildScheduledEventUpdate: GuildScheduledEventUpdateAction { client: [Circular *1] },
    GuildScheduledEventUserAdd: GuildScheduledEventUserAddAction { client: [Circular *1] },
    GuildScheduledEventUserRemove: GuildScheduledEventUserRemoveAction { client: [Circular *1] },
    GuildStickerCreate: GuildStickerCreateAction { client: [Circular *1] },
    GuildStickerDelete: GuildStickerDeleteAction { client: [Circular *1] },
    GuildStickerUpdate: GuildStickerUpdateAction { client: [Circular *1] },
    GuildStickersUpdate: GuildStickersUpdateAction { client: [Circular *1] },
    GuildUpdate: GuildUpdateAction { client: [Circular *1] },
    InteractionCreate: InteractionCreateAction { client: [Circular *1] },
    InviteCreate: InviteCreateAction { client: [Circular *1] },
    InviteDelete: InviteDeleteAction { client: [Circular *1] },
    MessageCreate: MessageCreateAction { client: [Circular *1] },
    MessageDelete: MessageDeleteAction { client: [Circular *1] },
    MessageDeleteBulk: MessageDeleteBulkAction { client: [Circular *1] },
    MessageReactionAdd: MessageReactionAdd { client: [Circular *1] },
    MessageReactionRemove: MessageReactionRemove { client: [Circular *1] },
    MessageReactionRemoveAll: MessageReactionRemoveAll { client: [Circular *1] },
    MessageReactionRemoveEmoji: MessageReactionRemoveEmoji { client: [Circular *1] },
    MessageUpdate: MessageUpdateAction { client: [Circular *1] },
    PresenceUpdate: PresenceUpdateAction { client: [Circular *1] },
    StageInstanceCreate: StageInstanceCreateAction { client: [Circular *1] },
    StageInstanceDelete: StageInstanceDeleteAction { client: [Circular *1] },
    StageInstanceUpdate: StageInstanceUpdateAction { client: [Circular *1] },
    ThreadCreate: ThreadCreateAction { client: [Circular *1] },
    ThreadDelete: ThreadDeleteAction { client: [Circular *1] },
    ThreadListSync: ThreadListSyncAction { client: [Circular *1] },
    ThreadMemberUpdate: ThreadMemberUpdateAction { client: [Circular *1] },
    ThreadMembersUpdate: ThreadMembersUpdateAction { client: [Circular *1] },
    TypingStart: TypingStart { client: [Circular *1] },
    UserUpdate: UserUpdateAction { client: [Circular *1] },
    VoiceStateUpdate: VoiceStateUpdate { client: [Circular *1] },
    WebhooksUpdate: WebhooksUpdate { client: [Circular *1] }
  },
  voice: ClientVoiceManager {
    adapters: Map(1) { '893532780946919536' => [Object] }
  },
  shard: null,
  users: UserManager {},
  guilds: GuildManager {},
  channels: ChannelManager {},
  sweepers: Sweepers {
    options: {},
    intervals: {
      applicationCommands: null,
      bans: null,
      emojis: null,
      invites: null,
      guildMembers: null,
      messages: null,
      presences: null,
      reactions: null,
      stageInstances: null,
      stickers: null,
      threadMembers: null,
      threads: null,
      users: null,
      voiceStates: null
    }
  },
  presence: ClientPresence {
    userId: null,
    guild: null,
    status: 'online',
    activities: [],
    clientStatus: null
  },
  user: ClientUser {
    id: '894060283373449317',
    bot: true,
    system: false,
    flags: UserFlags { bitfield: 0 },
    username: 'Potato bot',
    discriminator: '1627',
    avatar: 'f169fbb08deede7893419429cf1bc9ab',
    banner: null,
    accentColor: null,
    verified: true,
    mfaEnabled: false
  },
  application: ClientApplication {
    id: '894060283373449317',
    name: null,
    description: null,
    icon: null,
    flags: ApplicationFlags { bitfield: 303104 },
    cover: null,
    rpcOrigins: [],
    botRequireCodeGrant: null,
    botPublic: null,
    owner: null,
    commands: ApplicationCommandManager {
      permissions: [ApplicationCommandPermissionsManager]
    }
  },
  readyAt: 2022-02-23T01:47:22.497Z,
  eco: EconomyManager {
    noNegative: undefined,
    prefix: undefined,
    adapter: { name: 'sqlite', options: undefined },
    db: SqliteManager {
      table: 'money',
      filename: 'eco',
      sqliteOptions: {},
      hasInit: true,
      db: [Database]
    }
  },
  db: table {
    tableName: 'inv',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  config: {
    token: 'ODk0MDYwMjgzMzczNDQ5MzE3.YVkghg.ik3wBzG3rjGWnsQ_o3S5edt12fM',
    prefix: 'potat',
    admins: [
      '709950767670493275',
      '879207914005479514',
      '829171854681964604'
    ],
    debug: true,
    countChannel: '',
    opt: {
      DJ: [Object],
      maxVol: 250,
      loopMessage: false,
      discordPlayer: [Object]
    }
  },
  shop: { laptop: { cost: 1000 }, potato: { cost: 1 } },
  job: table {
    tableName: 'job',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  commands: Collection(50) [Map] {
    'addmoney' => {
      name: 'addmoney',
      aliases: [Array],
      usage: 'addmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'bal' => {
      name: 'bal',
      aliases: [Array],
      usage: 'bal',
      execute: [AsyncFunction: execute]
    },
    'beg' => {
      name: 'beg',
      aliases: [],
      usage: 'beg',
      execute: [AsyncFunction: execute]
    },
    'buy' => {
      name: 'buy',
      aliases: [],
      usage: 'buy <item>',
      execute: [AsyncFunction: execute]
    },
    'daily' => {
      name: 'daily',
      aliases: [],
      usage: 'daily',
      execute: [AsyncFunction: execute]
    },
    'inventory' => {
      name: 'inventory',
      aliases: [Array],
      usage: 'inv',
      execute: [AsyncFunction: execute]
    },
    'lb' => {
      name: 'lb',
      aliases: [Array],
      usage: 'leaderboard',
      execute: [AsyncFunction: execute]
    },
    'search' => {
      name: 'search',
      aliases: [],
      utilisation: 'search [song name]',
      execute: [AsyncFunction: execute]
    },
    'setmoney' => {
      name: 'setmoney',
      usage: 'setmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'transfer' => {
      name: 'transfer',
      aliases: [Array],
      usage: 'transfer <member> <amount>',
      execute: [AsyncFunction: execute]
    },
    'weekly' => {
      name: 'weekly',
      usage: 'weekly',
      execute: [AsyncFunction: execute]
    },
    'work' => {
      name: 'work',
      aliases: [],
      usage: 'work',
      cooldown: 3600,
      execute: [Function: execute]
    },
    'say' => {
      name: 'say',
      aliases: [Array],
      description: 'make the bot repeat what you said',
      execute: [Function: execute]
    },
    'sayembed' => {
      name: 'sayembed',
      description: 'say something embed',
      usage: '<title, description>',
      execute: [Function: execute]
    },
    'train' => {
      name: 'train',
      description: 'random thing idk',
      execute: [Function: execute]
    },
    'fasttype' => {
      name: 'fasttype',
      description: 'type fast',
      execute: [AsyncFunction: execute]
    },
    'games' => {
      name: 'games',
      description: 'play some games',
      execute: [Function: execute]
    },
    'settings' => { name: 'settings', execute: [Function: execute] },
    'slots' => {
      name: 'slots',
      description: 'play some games',
      execute: [Function: execute]
    },
    'tictactoe' => {
      name: 'tictactoe',
      description: 'play tictactoe!',
      expectedArgs: '<opponent>',
      minArgs: 1,
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'addfakemember' => { name: 'addfakemember', execute: [Function: execute] },
    'change_status' => { name: 'change_status', execute: [Function: execute] },
    'dev' => {
      name: 'dev',
      description: 'be a dev by completing a form!',
      execute: [AsyncFunction: execute]
    },
    'help' => {
      name: 'help',
      aliases: [Array],
      description: 'List all of my commands or info about a specific command.',
      usage: '[command name]',
      cooldown: 5,
      execute: [Function: execute]
    },
    'ping' => {
      name: 'ping',
      description: 'Ping!',
      execute: [Function: execute]
    },
    'poll' => {
      name: 'poll',
      description: 'poll',
      usage: 'Title + Option 1 + Option 2 + Option 3 + etc',
      execute: [Function: execute]
    },
    'server' => {
      name: 'server',
      aliases: [Array],
      description: 'servers info...',
      cooldown: 5,
      guildOnly: true,
      args: false,
      execute: [Function: execute]
    },
    'suggest' => {
      name: 'suggest',
      description: 'suggest',
      usage: '<suggestion>',
      execute: [Function: execute]
    },
    'ban' => {
      name: 'ban',
      description: 'This command bans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'giverole' => {
      name: 'giverole',
      description: 'give someone a role',
      permission: 'MANAGE_MEMBERS',
      guildOnly: true,
      execute: [Function: execute]
    },
    'kick' => {
      name: 'kick',
      permissions: 'KICK_MEMBERS',
      description: 'this command kicks a member',
      execute: [Function: execute]
    },
    'mute' => {
      name: 'mute',
      description: 'mute someone',
      permissions: 'MANAGE_MESSAGES',
      guildOnly: true,
      execute: [Function: execute]
    },
    'reload' => {
      name: 'reload',
      description: 'Reloads a command',
      args: true,
      execute: [Function: execute]
    },
    'removerole' => {
      name: 'removerole',
      description: "remove someone's role",
      execute: [Function: execute]
    },
    'unban' => {
      name: 'unban',
      description: 'This command unbans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'back' => { name: 'back', aliases: [], execute: [AsyncFunction: execute] },
    'clear' => { name: 'clear', aliases: [], execute: [AsyncFunction: execute] },
    'filter' => {
      name: 'filter',
      aliases: [],
      usage: 'filter [filter name]',
      execute: [AsyncFunction: execute]
    },
    'loop' => {
      name: 'loop',
      aliases: [],
      usage: 'loop [song|queue]',
      execute: [Function: execute]
    },
    'nowplaying' => {
      name: 'nowplaying',
      aliases: [Array],
      execute: [Function: execute]
    },
    'pause' => { name: 'pause', aliases: [], execute: [Function: execute] },
    'play' => {
      name: 'play',
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'progress' => {
      name: 'progress',
      aliases: [Array],
      utilisation: 'progress',
      voiceChannel: true,
      execute: [AsyncFunction: execute]
    },
    'queue' => {
      name: 'queue',
      aliases: [Array],
      utilisation: '{prefix}queue',
      voiceChannel: true,
      execute: [Function: execute]
    },
    'remove' => { name: 'remove', aliases: [], execute: [AsyncFunction: execute] },
    'resume' => { name: 'resume', aliases: [], execute: [Function: execute] },
    'save' => { name: 'save', aliases: [], execute: [AsyncFunction: execute] },
    'skip' => { name: 'skip', aliases: [Array], execute: [Function: execute] },
    'stop' => { name: 'stop', aliases: [Array], execute: [Function: execute] },
    'volume' => {
      name: 'volume',
      aliases: [Array],
      utilisation: 'volume [1-250]',
      voiceChannel: true,
      execute: [Function: execute]
    }
  },
  cooldowns: Collection(7) [Map] {
    'ping' => Collection(0) [Map] {},
    'play' => Collection(1) [Map] { '709950767670493275' => 1645581714780 },
    'skip' => Collection(0) [Map] {},
    'queue' => Collection(0) [Map] {},
    'remove' => Collection(0) [Map] {},
    'search' => Collection(0) [Map] {},
    'stop' => Collection(0) [Map] {}
  },
  player: Player {
    _events: [Object: null prototype] {
      error: [Function (anonymous)],
      connectionError: [Function (anonymous)],
      trackStart: [Function (anonymous)],
      trackAdd: [Function (anonymous)],
      botDisconnect: [Function (anonymous)],
      channelEmpty: [Function (anonymous)],
      queueEnd: [Function (anonymous)]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    options: {
      autoRegisterExtractor: true,
      ytdlOptions: [Object],
      connectionTimeout: 20000
    },
    queues: Collection(1) [Map] { '893532780946919536' => [Queue] },
    voiceUtils: VoiceUtils { cache: [Collection [Map]] },
    extractors: Collection(0) [Map] {},
    requiredEvents: [ 'error', 'connectionError' ],
    client: [Circular *1],
    [Symbol(kCapture)]: false
  },
  [Symbol(kCapture)]: false
}
<ref *1> Client {
  _events: [Object: null prototype] {
    shardDisconnect: [Function (anonymous)],
    voiceStateUpdate: [Function: bound _handleVoiceState],
    guildMemberAdd: [Function (anonymous)],
    message: [Function (anonymous)],
    ready: [Function (anonymous)]
  },
  _eventsCount: 5,
  _maxListeners: 10,
  options: {
    intents: 643,
    waitGuildTimeout: 15000,
    shardCount: 1,
    makeCache: [Function (anonymous)],
    messageCacheLifetime: 0,
    messageSweepInterval: 0,
    invalidRequestWarningInterval: 0,
    partials: [],
    restWsBridgeTimeout: 5000,
    restRequestTimeout: 15000,
    restGlobalRateLimit: 0,
    retryLimit: 1,
    restTimeOffset: 500,
    restSweepInterval: 60,
    failIfNotExists: true,
    userAgentSuffix: [],
    presence: { status: 'online', user: [Object] },
    sweepers: {},
    ws: {
      large_threshold: 50,
      compress: false,
      properties: [Object],
      version: 9,
      presence: [Object]
    },
    http: {
      agent: {},
      version: 9,
      api: 'https://discord.com/api',
      cdn: 'https://cdn.discordapp.com',
      invite: 'https://discord.gg',
      template: 'https://discord.new',
      scheduledEvent: 'https://discord.com/events'
    },
    shards: [ 0 ]
  },
  rest: RESTManager {
    client: [Circular *1],
    handlers: Collection(1) [Map] {
      '/channels/894764535892819988/messages' => [RequestHandler]
    },
    versioned: true,
    globalLimit: Infinity,
    globalRemaining: Infinity,
    globalReset: 1645581716487,
    globalDelay: null,
    sweepInterval: Timeout {
      _idleTimeout: 60000,
      _idlePrev: [Timeout],
      _idleNext: [TimersList],
      _idleStart: 842617,
      _onTimeout: [Function (anonymous)],
      _timerArgs: undefined,
      _repeat: 60000,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(kHasPrimitive)]: false,
      [Symbol(asyncId)]: 12,
      [Symbol(triggerId)]: 1
    }
  },
  _cleanups: Set(50) {
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ]
  },
  _finalizers: FinalizationRegistry {},
  ws: WebSocketManager {
    _events: [Object: null prototype] {},
    _eventsCount: 0,
    _maxListeners: undefined,
    gateway: 'wss://gateway.discord.gg/',
    totalShards: 1,
    shards: Collection(1) [Map] { 0 => [WebSocketShard] },
    status: 0,
    destroyed: false,
    reconnecting: false,
    [Symbol(kCapture)]: false
  },
  actions: ActionsManager {
    client: [Circular *1],
    ChannelCreate: ChannelCreateAction { client: [Circular *1] },
    ChannelDelete: ChannelDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    ChannelUpdate: ChannelUpdateAction { client: [Circular *1] },
    GuildBanAdd: GuildBanAdd { client: [Circular *1] },
    GuildBanRemove: GuildBanRemove { client: [Circular *1] },
    GuildChannelsPositionUpdate: GuildChannelsPositionUpdate { client: [Circular *1] },
    GuildDelete: GuildDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    GuildEmojiCreate: GuildEmojiCreateAction { client: [Circular *1] },
    GuildEmojiDelete: GuildEmojiDeleteAction { client: [Circular *1] },
    GuildEmojiUpdate: GuildEmojiUpdateAction { client: [Circular *1] },
    GuildEmojisUpdate: GuildEmojisUpdateAction { client: [Circular *1] },
    GuildIntegrationsUpdate: GuildIntegrationsUpdate { client: [Circular *1] },
    GuildMemberRemove: GuildMemberRemoveAction { client: [Circular *1] },
    GuildMemberUpdate: GuildMemberUpdateAction { client: [Circular *1] },
    GuildRoleCreate: GuildRoleCreate { client: [Circular *1] },
    GuildRoleDelete: GuildRoleDeleteAction { client: [Circular *1] },
    GuildRoleUpdate: GuildRoleUpdateAction { client: [Circular *1] },
    GuildRolesPositionUpdate: GuildRolesPositionUpdate { client: [Circular *1] },
    GuildScheduledEventCreate: GuildScheduledEventCreateAction { client: [Circular *1] },
    GuildScheduledEventDelete: GuildScheduledEventDeleteAction { client: [Circular *1] },
    GuildScheduledEventUpdate: GuildScheduledEventUpdateAction { client: [Circular *1] },
    GuildScheduledEventUserAdd: GuildScheduledEventUserAddAction { client: [Circular *1] },
    GuildScheduledEventUserRemove: GuildScheduledEventUserRemoveAction { client: [Circular *1] },
    GuildStickerCreate: GuildStickerCreateAction { client: [Circular *1] },
    GuildStickerDelete: GuildStickerDeleteAction { client: [Circular *1] },
    GuildStickerUpdate: GuildStickerUpdateAction { client: [Circular *1] },
    GuildStickersUpdate: GuildStickersUpdateAction { client: [Circular *1] },
    GuildUpdate: GuildUpdateAction { client: [Circular *1] },
    InteractionCreate: InteractionCreateAction { client: [Circular *1] },
    InviteCreate: InviteCreateAction { client: [Circular *1] },
    InviteDelete: InviteDeleteAction { client: [Circular *1] },
    MessageCreate: MessageCreateAction { client: [Circular *1] },
    MessageDelete: MessageDeleteAction { client: [Circular *1] },
    MessageDeleteBulk: MessageDeleteBulkAction { client: [Circular *1] },
    MessageReactionAdd: MessageReactionAdd { client: [Circular *1] },
    MessageReactionRemove: MessageReactionRemove { client: [Circular *1] },
    MessageReactionRemoveAll: MessageReactionRemoveAll { client: [Circular *1] },
    MessageReactionRemoveEmoji: MessageReactionRemoveEmoji { client: [Circular *1] },
    MessageUpdate: MessageUpdateAction { client: [Circular *1] },
    PresenceUpdate: PresenceUpdateAction { client: [Circular *1] },
    StageInstanceCreate: StageInstanceCreateAction { client: [Circular *1] },
    StageInstanceDelete: StageInstanceDeleteAction { client: [Circular *1] },
    StageInstanceUpdate: StageInstanceUpdateAction { client: [Circular *1] },
    ThreadCreate: ThreadCreateAction { client: [Circular *1] },
    ThreadDelete: ThreadDeleteAction { client: [Circular *1] },
    ThreadListSync: ThreadListSyncAction { client: [Circular *1] },
    ThreadMemberUpdate: ThreadMemberUpdateAction { client: [Circular *1] },
    ThreadMembersUpdate: ThreadMembersUpdateAction { client: [Circular *1] },
    TypingStart: TypingStart { client: [Circular *1] },
    UserUpdate: UserUpdateAction { client: [Circular *1] },
    VoiceStateUpdate: VoiceStateUpdate { client: [Circular *1] },
    WebhooksUpdate: WebhooksUpdate { client: [Circular *1] }
  },
  voice: ClientVoiceManager {
    adapters: Map(1) { '893532780946919536' => [Object] }
  },
  shard: null,
  users: UserManager {},
  guilds: GuildManager {},
  channels: ChannelManager {},
  sweepers: Sweepers {
    options: {},
    intervals: {
      applicationCommands: null,
      bans: null,
      emojis: null,
      invites: null,
      guildMembers: null,
      messages: null,
      presences: null,
      reactions: null,
      stageInstances: null,
      stickers: null,
      threadMembers: null,
      threads: null,
      users: null,
      voiceStates: null
    }
  },
  presence: ClientPresence {
    userId: null,
    guild: null,
    status: 'online',
    activities: [],
    clientStatus: null
  },
  user: ClientUser {
    id: '894060283373449317',
    bot: true,
    system: false,
    flags: UserFlags { bitfield: 0 },
    username: 'Potato bot',
    discriminator: '1627',
    avatar: 'f169fbb08deede7893419429cf1bc9ab',
    banner: null,
    accentColor: null,
    verified: true,
    mfaEnabled: false
  },
  application: ClientApplication {
    id: '894060283373449317',
    name: null,
    description: null,
    icon: null,
    flags: ApplicationFlags { bitfield: 303104 },
    cover: null,
    rpcOrigins: [],
    botRequireCodeGrant: null,
    botPublic: null,
    owner: null,
    commands: ApplicationCommandManager {
      permissions: [ApplicationCommandPermissionsManager]
    }
  },
  readyAt: 2022-02-23T01:47:22.497Z,
  eco: EconomyManager {
    noNegative: undefined,
    prefix: undefined,
    adapter: { name: 'sqlite', options: undefined },
    db: SqliteManager {
      table: 'money',
      filename: 'eco',
      sqliteOptions: {},
      hasInit: true,
      db: [Database]
    }
  },
  db: table {
    tableName: 'inv',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  config: {
    token: 'ODk0MDYwMjgzMzczNDQ5MzE3.YVkghg.ik3wBzG3rjGWnsQ_o3S5edt12fM',
    prefix: 'potat',
    admins: [
      '709950767670493275',
      '879207914005479514',
      '829171854681964604'
    ],
    debug: true,
    countChannel: '',
    opt: {
      DJ: [Object],
      maxVol: 250,
      loopMessage: false,
      discordPlayer: [Object]
    }
  },
  shop: { laptop: { cost: 1000 }, potato: { cost: 1 } },
  job: table {
    tableName: 'job',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  commands: Collection(50) [Map] {
    'addmoney' => {
      name: 'addmoney',
      aliases: [Array],
      usage: 'addmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'bal' => {
      name: 'bal',
      aliases: [Array],
      usage: 'bal',
      execute: [AsyncFunction: execute]
    },
    'beg' => {
      name: 'beg',
      aliases: [],
      usage: 'beg',
      execute: [AsyncFunction: execute]
    },
    'buy' => {
      name: 'buy',
      aliases: [],
      usage: 'buy <item>',
      execute: [AsyncFunction: execute]
    },
    'daily' => {
      name: 'daily',
      aliases: [],
      usage: 'daily',
      execute: [AsyncFunction: execute]
    },
    'inventory' => {
      name: 'inventory',
      aliases: [Array],
      usage: 'inv',
      execute: [AsyncFunction: execute]
    },
    'lb' => {
      name: 'lb',
      aliases: [Array],
      usage: 'leaderboard',
      execute: [AsyncFunction: execute]
    },
    'search' => {
      name: 'search',
      aliases: [],
      utilisation: 'search [song name]',
      execute: [AsyncFunction: execute]
    },
    'setmoney' => {
      name: 'setmoney',
      usage: 'setmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'transfer' => {
      name: 'transfer',
      aliases: [Array],
      usage: 'transfer <member> <amount>',
      execute: [AsyncFunction: execute]
    },
    'weekly' => {
      name: 'weekly',
      usage: 'weekly',
      execute: [AsyncFunction: execute]
    },
    'work' => {
      name: 'work',
      aliases: [],
      usage: 'work',
      cooldown: 3600,
      execute: [Function: execute]
    },
    'say' => {
      name: 'say',
      aliases: [Array],
      description: 'make the bot repeat what you said',
      execute: [Function: execute]
    },
    'sayembed' => {
      name: 'sayembed',
      description: 'say something embed',
      usage: '<title, description>',
      execute: [Function: execute]
    },
    'train' => {
      name: 'train',
      description: 'random thing idk',
      execute: [Function: execute]
    },
    'fasttype' => {
      name: 'fasttype',
      description: 'type fast',
      execute: [AsyncFunction: execute]
    },
    'games' => {
      name: 'games',
      description: 'play some games',
      execute: [Function: execute]
    },
    'settings' => { name: 'settings', execute: [Function: execute] },
    'slots' => {
      name: 'slots',
      description: 'play some games',
      execute: [Function: execute]
    },
    'tictactoe' => {
      name: 'tictactoe',
      description: 'play tictactoe!',
      expectedArgs: '<opponent>',
      minArgs: 1,
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'addfakemember' => { name: 'addfakemember', execute: [Function: execute] },
    'change_status' => { name: 'change_status', execute: [Function: execute] },
    'dev' => {
      name: 'dev',
      description: 'be a dev by completing a form!',
      execute: [AsyncFunction: execute]
    },
    'help' => {
      name: 'help',
      aliases: [Array],
      description: 'List all of my commands or info about a specific command.',
      usage: '[command name]',
      cooldown: 5,
      execute: [Function: execute]
    },
    'ping' => {
      name: 'ping',
      description: 'Ping!',
      execute: [Function: execute]
    },
    'poll' => {
      name: 'poll',
      description: 'poll',
      usage: 'Title + Option 1 + Option 2 + Option 3 + etc',
      execute: [Function: execute]
    },
    'server' => {
      name: 'server',
      aliases: [Array],
      description: 'servers info...',
      cooldown: 5,
      guildOnly: true,
      args: false,
      execute: [Function: execute]
    },
    'suggest' => {
      name: 'suggest',
      description: 'suggest',
      usage: '<suggestion>',
      execute: [Function: execute]
    },
    'ban' => {
      name: 'ban',
      description: 'This command bans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'giverole' => {
      name: 'giverole',
      description: 'give someone a role',
      permission: 'MANAGE_MEMBERS',
      guildOnly: true,
      execute: [Function: execute]
    },
    'kick' => {
      name: 'kick',
      permissions: 'KICK_MEMBERS',
      description: 'this command kicks a member',
      execute: [Function: execute]
    },
    'mute' => {
      name: 'mute',
      description: 'mute someone',
      permissions: 'MANAGE_MESSAGES',
      guildOnly: true,
      execute: [Function: execute]
    },
    'reload' => {
      name: 'reload',
      description: 'Reloads a command',
      args: true,
      execute: [Function: execute]
    },
    'removerole' => {
      name: 'removerole',
      description: "remove someone's role",
      execute: [Function: execute]
    },
    'unban' => {
      name: 'unban',
      description: 'This command unbans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'back' => { name: 'back', aliases: [], execute: [AsyncFunction: execute] },
    'clear' => { name: 'clear', aliases: [], execute: [AsyncFunction: execute] },
    'filter' => {
      name: 'filter',
      aliases: [],
      usage: 'filter [filter name]',
      execute: [AsyncFunction: execute]
    },
    'loop' => {
      name: 'loop',
      aliases: [],
      usage: 'loop [song|queue]',
      execute: [Function: execute]
    },
    'nowplaying' => {
      name: 'nowplaying',
      aliases: [Array],
      execute: [Function: execute]
    },
    'pause' => { name: 'pause', aliases: [], execute: [Function: execute] },
    'play' => {
      name: 'play',
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'progress' => {
      name: 'progress',
      aliases: [Array],
      utilisation: 'progress',
      voiceChannel: true,
      execute: [AsyncFunction: execute]
    },
    'queue' => {
      name: 'queue',
      aliases: [Array],
      utilisation: '{prefix}queue',
      voiceChannel: true,
      execute: [Function: execute]
    },
    'remove' => { name: 'remove', aliases: [], execute: [AsyncFunction: execute] },
    'resume' => { name: 'resume', aliases: [], execute: [Function: execute] },
    'save' => { name: 'save', aliases: [], execute: [AsyncFunction: execute] },
    'skip' => { name: 'skip', aliases: [Array], execute: [Function: execute] },
    'stop' => { name: 'stop', aliases: [Array], execute: [Function: execute] },
    'volume' => {
      name: 'volume',
      aliases: [Array],
      utilisation: 'volume [1-250]',
      voiceChannel: true,
      execute: [Function: execute]
    }
  },
  cooldowns: Collection(7) [Map] {
    'ping' => Collection(0) [Map] {},
    'play' => Collection(1) [Map] { '709950767670493275' => 1645581728444 },
    'skip' => Collection(0) [Map] {},
    'queue' => Collection(0) [Map] {},
    'remove' => Collection(0) [Map] {},
    'search' => Collection(0) [Map] {},
    'stop' => Collection(0) [Map] {}
  },
  player: Player {
    _events: [Object: null prototype] {
      error: [Function (anonymous)],
      connectionError: [Function (anonymous)],
      trackStart: [Function (anonymous)],
      trackAdd: [Function (anonymous)],
      botDisconnect: [Function (anonymous)],
      channelEmpty: [Function (anonymous)],
      queueEnd: [Function (anonymous)]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    options: {
      autoRegisterExtractor: true,
      ytdlOptions: [Object],
      connectionTimeout: 20000
    },
    queues: Collection(1) [Map] { '893532780946919536' => [Queue] },
    voiceUtils: VoiceUtils { cache: [Collection [Map]] },
    extractors: Collection(0) [Map] {},
    requiredEvents: [ 'error', 'connectionError' ],
    client: [Circular *1],
    [Symbol(kCapture)]: false
  },
  [Symbol(kCapture)]: false
}
<ref *1> Client {
  _events: [Object: null prototype] {
    shardDisconnect: [Function (anonymous)],
    voiceStateUpdate: [Function: bound _handleVoiceState],
    guildMemberAdd: [Function (anonymous)],
    message: [Function (anonymous)],
    ready: [Function (anonymous)]
  },
  _eventsCount: 5,
  _maxListeners: 10,
  options: {
    intents: 643,
    waitGuildTimeout: 15000,
    shardCount: 1,
    makeCache: [Function (anonymous)],
    messageCacheLifetime: 0,
    messageSweepInterval: 0,
    invalidRequestWarningInterval: 0,
    partials: [],
    restWsBridgeTimeout: 5000,
    restRequestTimeout: 15000,
    restGlobalRateLimit: 0,
    retryLimit: 1,
    restTimeOffset: 500,
    restSweepInterval: 60,
    failIfNotExists: true,
    userAgentSuffix: [],
    presence: { status: 'online', user: [Object] },
    sweepers: {},
    ws: {
      large_threshold: 50,
      compress: false,
      properties: [Object],
      version: 9,
      presence: [Object]
    },
    http: {
      agent: {},
      version: 9,
      api: 'https://discord.com/api',
      cdn: 'https://cdn.discordapp.com',
      invite: 'https://discord.gg',
      template: 'https://discord.new',
      scheduledEvent: 'https://discord.com/events'
    },
    shards: [ 0 ]
  },
  rest: RESTManager {
    client: [Circular *1],
    handlers: Collection(1) [Map] {
      '/channels/894764535892819988/messages' => [RequestHandler]
    },
    versioned: true,
    globalLimit: Infinity,
    globalRemaining: Infinity,
    globalReset: 1645583086676,
    globalDelay: null,
    sweepInterval: Timeout {
      _idleTimeout: 60000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 2222782,
      _onTimeout: [Function (anonymous)],
      _timerArgs: undefined,
      _repeat: 60000,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(kHasPrimitive)]: false,
      [Symbol(asyncId)]: 12,
      [Symbol(triggerId)]: 1
    }
  },
  _cleanups: Set(50) {
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ]
  },
  _finalizers: FinalizationRegistry {},
  ws: WebSocketManager {
    _events: [Object: null prototype] {},
    _eventsCount: 0,
    _maxListeners: undefined,
    gateway: 'wss://gateway.discord.gg/',
    totalShards: 1,
    shards: Collection(1) [Map] { 0 => [WebSocketShard] },
    status: 0,
    destroyed: false,
    reconnecting: false,
    [Symbol(kCapture)]: false
  },
  actions: ActionsManager {
    client: [Circular *1],
    ChannelCreate: ChannelCreateAction { client: [Circular *1] },
    ChannelDelete: ChannelDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    ChannelUpdate: ChannelUpdateAction { client: [Circular *1] },
    GuildBanAdd: GuildBanAdd { client: [Circular *1] },
    GuildBanRemove: GuildBanRemove { client: [Circular *1] },
    GuildChannelsPositionUpdate: GuildChannelsPositionUpdate { client: [Circular *1] },
    GuildDelete: GuildDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    GuildEmojiCreate: GuildEmojiCreateAction { client: [Circular *1] },
    GuildEmojiDelete: GuildEmojiDeleteAction { client: [Circular *1] },
    GuildEmojiUpdate: GuildEmojiUpdateAction { client: [Circular *1] },
    GuildEmojisUpdate: GuildEmojisUpdateAction { client: [Circular *1] },
    GuildIntegrationsUpdate: GuildIntegrationsUpdate { client: [Circular *1] },
    GuildMemberRemove: GuildMemberRemoveAction { client: [Circular *1] },
    GuildMemberUpdate: GuildMemberUpdateAction { client: [Circular *1] },
    GuildRoleCreate: GuildRoleCreate { client: [Circular *1] },
    GuildRoleDelete: GuildRoleDeleteAction { client: [Circular *1] },
    GuildRoleUpdate: GuildRoleUpdateAction { client: [Circular *1] },
    GuildRolesPositionUpdate: GuildRolesPositionUpdate { client: [Circular *1] },
    GuildScheduledEventCreate: GuildScheduledEventCreateAction { client: [Circular *1] },
    GuildScheduledEventDelete: GuildScheduledEventDeleteAction { client: [Circular *1] },
    GuildScheduledEventUpdate: GuildScheduledEventUpdateAction { client: [Circular *1] },
    GuildScheduledEventUserAdd: GuildScheduledEventUserAddAction { client: [Circular *1] },
    GuildScheduledEventUserRemove: GuildScheduledEventUserRemoveAction { client: [Circular *1] },
    GuildStickerCreate: GuildStickerCreateAction { client: [Circular *1] },
    GuildStickerDelete: GuildStickerDeleteAction { client: [Circular *1] },
    GuildStickerUpdate: GuildStickerUpdateAction { client: [Circular *1] },
    GuildStickersUpdate: GuildStickersUpdateAction { client: [Circular *1] },
    GuildUpdate: GuildUpdateAction { client: [Circular *1] },
    InteractionCreate: InteractionCreateAction { client: [Circular *1] },
    InviteCreate: InviteCreateAction { client: [Circular *1] },
    InviteDelete: InviteDeleteAction { client: [Circular *1] },
    MessageCreate: MessageCreateAction { client: [Circular *1] },
    MessageDelete: MessageDeleteAction { client: [Circular *1] },
    MessageDeleteBulk: MessageDeleteBulkAction { client: [Circular *1] },
    MessageReactionAdd: MessageReactionAdd { client: [Circular *1] },
    MessageReactionRemove: MessageReactionRemove { client: [Circular *1] },
    MessageReactionRemoveAll: MessageReactionRemoveAll { client: [Circular *1] },
    MessageReactionRemoveEmoji: MessageReactionRemoveEmoji { client: [Circular *1] },
    MessageUpdate: MessageUpdateAction { client: [Circular *1] },
    PresenceUpdate: PresenceUpdateAction { client: [Circular *1] },
    StageInstanceCreate: StageInstanceCreateAction { client: [Circular *1] },
    StageInstanceDelete: StageInstanceDeleteAction { client: [Circular *1] },
    StageInstanceUpdate: StageInstanceUpdateAction { client: [Circular *1] },
    ThreadCreate: ThreadCreateAction { client: [Circular *1] },
    ThreadDelete: ThreadDeleteAction { client: [Circular *1] },
    ThreadListSync: ThreadListSyncAction { client: [Circular *1] },
    ThreadMemberUpdate: ThreadMemberUpdateAction { client: [Circular *1] },
    ThreadMembersUpdate: ThreadMembersUpdateAction { client: [Circular *1] },
    TypingStart: TypingStart { client: [Circular *1] },
    UserUpdate: UserUpdateAction { client: [Circular *1] },
    VoiceStateUpdate: VoiceStateUpdate { client: [Circular *1] },
    WebhooksUpdate: WebhooksUpdate { client: [Circular *1] }
  },
  voice: ClientVoiceManager { adapters: Map(0) {} },
  shard: null,
  users: UserManager {},
  guilds: GuildManager {},
  channels: ChannelManager {},
  sweepers: Sweepers {
    options: {},
    intervals: {
      applicationCommands: null,
      bans: null,
      emojis: null,
      invites: null,
      guildMembers: null,
      messages: null,
      presences: null,
      reactions: null,
      stageInstances: null,
      stickers: null,
      threadMembers: null,
      threads: null,
      users: null,
      voiceStates: null
    }
  },
  presence: ClientPresence {
    userId: null,
    guild: null,
    status: 'online',
    activities: [],
    clientStatus: null
  },
  user: ClientUser {
    id: '894060283373449317',
    bot: true,
    system: false,
    flags: UserFlags { bitfield: 0 },
    username: 'Potato bot',
    discriminator: '1627',
    avatar: 'f169fbb08deede7893419429cf1bc9ab',
    banner: null,
    accentColor: null,
    verified: true,
    mfaEnabled: false
  },
  application: ClientApplication {
    id: '894060283373449317',
    name: null,
    description: null,
    icon: null,
    flags: ApplicationFlags { bitfield: 303104 },
    cover: null,
    rpcOrigins: [],
    botRequireCodeGrant: null,
    botPublic: null,
    owner: null,
    commands: ApplicationCommandManager {
      permissions: [ApplicationCommandPermissionsManager]
    }
  },
  readyAt: 2022-02-23T01:47:22.497Z,
  eco: EconomyManager {
    noNegative: undefined,
    prefix: undefined,
    adapter: { name: 'sqlite', options: undefined },
    db: SqliteManager {
      table: 'money',
      filename: 'eco',
      sqliteOptions: {},
      hasInit: true,
      db: [Database]
    }
  },
  db: table {
    tableName: 'inv',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  config: {
    token: 'ODk0MDYwMjgzMzczNDQ5MzE3.YVkghg.ik3wBzG3rjGWnsQ_o3S5edt12fM',
    prefix: 'potat',
    admins: [
      '709950767670493275',
      '879207914005479514',
      '829171854681964604'
    ],
    debug: true,
    countChannel: '',
    opt: {
      DJ: [Object],
      maxVol: 250,
      loopMessage: false,
      discordPlayer: [Object]
    }
  },
  shop: { laptop: { cost: 1000 }, potato: { cost: 1 } },
  job: table {
    tableName: 'job',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  commands: Collection(50) [Map] {
    'addmoney' => {
      name: 'addmoney',
      aliases: [Array],
      usage: 'addmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'bal' => {
      name: 'bal',
      aliases: [Array],
      usage: 'bal',
      execute: [AsyncFunction: execute]
    },
    'beg' => {
      name: 'beg',
      aliases: [],
      usage: 'beg',
      execute: [AsyncFunction: execute]
    },
    'buy' => {
      name: 'buy',
      aliases: [],
      usage: 'buy <item>',
      execute: [AsyncFunction: execute]
    },
    'daily' => {
      name: 'daily',
      aliases: [],
      usage: 'daily',
      execute: [AsyncFunction: execute]
    },
    'inventory' => {
      name: 'inventory',
      aliases: [Array],
      usage: 'inv',
      execute: [AsyncFunction: execute]
    },
    'lb' => {
      name: 'lb',
      aliases: [Array],
      usage: 'leaderboard',
      execute: [AsyncFunction: execute]
    },
    'search' => {
      name: 'search',
      aliases: [],
      utilisation: 'search [song name]',
      execute: [AsyncFunction: execute]
    },
    'setmoney' => {
      name: 'setmoney',
      usage: 'setmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'transfer' => {
      name: 'transfer',
      aliases: [Array],
      usage: 'transfer <member> <amount>',
      execute: [AsyncFunction: execute]
    },
    'weekly' => {
      name: 'weekly',
      usage: 'weekly',
      execute: [AsyncFunction: execute]
    },
    'work' => {
      name: 'work',
      aliases: [],
      usage: 'work',
      cooldown: 3600,
      execute: [Function: execute]
    },
    'say' => {
      name: 'say',
      aliases: [Array],
      description: 'make the bot repeat what you said',
      execute: [Function: execute]
    },
    'sayembed' => {
      name: 'sayembed',
      description: 'say something embed',
      usage: '<title, description>',
      execute: [Function: execute]
    },
    'train' => {
      name: 'train',
      description: 'random thing idk',
      execute: [Function: execute]
    },
    'fasttype' => {
      name: 'fasttype',
      description: 'type fast',
      execute: [AsyncFunction: execute]
    },
    'games' => {
      name: 'games',
      description: 'play some games',
      execute: [Function: execute]
    },
    'settings' => { name: 'settings', execute: [Function: execute] },
    'slots' => {
      name: 'slots',
      description: 'play some games',
      execute: [Function: execute]
    },
    'tictactoe' => {
      name: 'tictactoe',
      description: 'play tictactoe!',
      expectedArgs: '<opponent>',
      minArgs: 1,
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'addfakemember' => { name: 'addfakemember', execute: [Function: execute] },
    'change_status' => { name: 'change_status', execute: [Function: execute] },
    'dev' => {
      name: 'dev',
      description: 'be a dev by completing a form!',
      execute: [AsyncFunction: execute]
    },
    'help' => {
      name: 'help',
      aliases: [Array],
      description: 'List all of my commands or info about a specific command.',
      usage: '[command name]',
      cooldown: 5,
      execute: [Function: execute]
    },
    'ping' => {
      name: 'ping',
      description: 'Ping!',
      execute: [Function: execute]
    },
    'poll' => {
      name: 'poll',
      description: 'poll',
      usage: 'Title + Option 1 + Option 2 + Option 3 + etc',
      execute: [Function: execute]
    },
    'server' => {
      name: 'server',
      aliases: [Array],
      description: 'servers info...',
      cooldown: 5,
      guildOnly: true,
      args: false,
      execute: [Function: execute]
    },
    'suggest' => {
      name: 'suggest',
      description: 'suggest',
      usage: '<suggestion>',
      execute: [Function: execute]
    },
    'ban' => {
      name: 'ban',
      description: 'This command bans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'giverole' => {
      name: 'giverole',
      description: 'give someone a role',
      permission: 'MANAGE_MEMBERS',
      guildOnly: true,
      execute: [Function: execute]
    },
    'kick' => {
      name: 'kick',
      permissions: 'KICK_MEMBERS',
      description: 'this command kicks a member',
      execute: [Function: execute]
    },
    'mute' => {
      name: 'mute',
      description: 'mute someone',
      permissions: 'MANAGE_MESSAGES',
      guildOnly: true,
      execute: [Function: execute]
    },
    'reload' => {
      name: 'reload',
      description: 'Reloads a command',
      args: true,
      execute: [Function: execute]
    },
    'removerole' => {
      name: 'removerole',
      description: "remove someone's role",
      execute: [Function: execute]
    },
    'unban' => {
      name: 'unban',
      description: 'This command unbans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'back' => { name: 'back', aliases: [], execute: [AsyncFunction: execute] },
    'clear' => { name: 'clear', aliases: [], execute: [AsyncFunction: execute] },
    'filter' => {
      name: 'filter',
      aliases: [],
      usage: 'filter [filter name]',
      execute: [AsyncFunction: execute]
    },
    'loop' => {
      name: 'loop',
      aliases: [],
      usage: 'loop [song|queue]',
      execute: [Function: execute]
    },
    'nowplaying' => {
      name: 'nowplaying',
      aliases: [Array],
      execute: [Function: execute]
    },
    'pause' => { name: 'pause', aliases: [], execute: [Function: execute] },
    'play' => {
      name: 'play',
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'progress' => {
      name: 'progress',
      aliases: [Array],
      utilisation: 'progress',
      voiceChannel: true,
      execute: [AsyncFunction: execute]
    },
    'queue' => {
      name: 'queue',
      aliases: [Array],
      utilisation: '{prefix}queue',
      voiceChannel: true,
      execute: [Function: execute]
    },
    'remove' => { name: 'remove', aliases: [], execute: [AsyncFunction: execute] },
    'resume' => { name: 'resume', aliases: [], execute: [Function: execute] },
    'save' => { name: 'save', aliases: [], execute: [AsyncFunction: execute] },
    'skip' => { name: 'skip', aliases: [Array], execute: [Function: execute] },
    'stop' => { name: 'stop', aliases: [Array], execute: [Function: execute] },
    'volume' => {
      name: 'volume',
      aliases: [Array],
      utilisation: 'volume [1-250]',
      voiceChannel: true,
      execute: [Function: execute]
    }
  },
  cooldowns: Collection(9) [Map] {
    'ping' => Collection(0) [Map] {},
    'play' => Collection(1) [Map] { '709950767670493275' => 1645583099344 },
    'skip' => Collection(0) [Map] {},
    'queue' => Collection(0) [Map] {},
    'remove' => Collection(0) [Map] {},
    'search' => Collection(0) [Map] {},
    'stop' => Collection(0) [Map] {},
    'nowplaying' => Collection(0) [Map] {},
    'loop' => Collection(0) [Map] {}
  },
  player: Player {
    _events: [Object: null prototype] {
      error: [Function (anonymous)],
      connectionError: [Function (anonymous)],
      trackStart: [Function (anonymous)],
      trackAdd: [Function (anonymous)],
      botDisconnect: [Function (anonymous)],
      channelEmpty: [Function (anonymous)],
      queueEnd: [Function (anonymous)]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    options: {
      autoRegisterExtractor: true,
      ytdlOptions: [Object],
      connectionTimeout: 20000
    },
    queues: Collection(0) [Map] {},
    voiceUtils: VoiceUtils { cache: Collection(0) [Map] {} },
    extractors: Collection(0) [Map] {},
    requiredEvents: [ 'error', 'connectionError' ],
    client: [Circular *1],
    [Symbol(kCapture)]: false
  },
  [Symbol(kCapture)]: false
}
<ref *1> Client {
  _events: [Object: null prototype] {
    shardDisconnect: [Function (anonymous)],
    voiceStateUpdate: [Function: bound _handleVoiceState],
    guildMemberAdd: [Function (anonymous)],
    message: [Function (anonymous)],
    ready: [Function (anonymous)]
  },
  _eventsCount: 5,
  _maxListeners: 10,
  options: {
    intents: 643,
    waitGuildTimeout: 15000,
    shardCount: 1,
    makeCache: [Function (anonymous)],
    messageCacheLifetime: 0,
    messageSweepInterval: 0,
    invalidRequestWarningInterval: 0,
    partials: [],
    restWsBridgeTimeout: 5000,
    restRequestTimeout: 15000,
    restGlobalRateLimit: 0,
    retryLimit: 1,
    restTimeOffset: 500,
    restSweepInterval: 60,
    failIfNotExists: true,
    userAgentSuffix: [],
    presence: { status: 'online', user: [Object] },
    sweepers: {},
    ws: {
      large_threshold: 50,
      compress: false,
      properties: [Object],
      version: 9,
      presence: [Object]
    },
    http: {
      agent: {},
      version: 9,
      api: 'https://discord.com/api',
      cdn: 'https://cdn.discordapp.com',
      invite: 'https://discord.gg',
      template: 'https://discord.new',
      scheduledEvent: 'https://discord.com/events'
    },
    shards: [ 0 ]
  },
  rest: RESTManager {
    client: [Circular *1],
    handlers: Collection(0) [Map] {},
    versioned: true,
    globalLimit: Infinity,
    globalRemaining: Infinity,
    globalReset: 1645583117006,
    globalDelay: null,
    sweepInterval: Timeout {
      _idleTimeout: 60000,
      _idlePrev: [TimersList],
      _idleNext: [Timeout],
      _idleStart: 2402805,
      _onTimeout: [Function (anonymous)],
      _timerArgs: undefined,
      _repeat: 60000,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(kHasPrimitive)]: false,
      [Symbol(asyncId)]: 12,
      [Symbol(triggerId)]: 1
    }
  },
  _cleanups: Set(50) {
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ]
  },
  _finalizers: FinalizationRegistry {},
  ws: WebSocketManager {
    _events: [Object: null prototype] {},
    _eventsCount: 0,
    _maxListeners: undefined,
    gateway: 'wss://gateway.discord.gg/',
    totalShards: 1,
    shards: Collection(1) [Map] { 0 => [WebSocketShard] },
    status: 0,
    destroyed: false,
    reconnecting: false,
    [Symbol(kCapture)]: false
  },
  actions: ActionsManager {
    client: [Circular *1],
    ChannelCreate: ChannelCreateAction { client: [Circular *1] },
    ChannelDelete: ChannelDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    ChannelUpdate: ChannelUpdateAction { client: [Circular *1] },
    GuildBanAdd: GuildBanAdd { client: [Circular *1] },
    GuildBanRemove: GuildBanRemove { client: [Circular *1] },
    GuildChannelsPositionUpdate: GuildChannelsPositionUpdate { client: [Circular *1] },
    GuildDelete: GuildDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    GuildEmojiCreate: GuildEmojiCreateAction { client: [Circular *1] },
    GuildEmojiDelete: GuildEmojiDeleteAction { client: [Circular *1] },
    GuildEmojiUpdate: GuildEmojiUpdateAction { client: [Circular *1] },
    GuildEmojisUpdate: GuildEmojisUpdateAction { client: [Circular *1] },
    GuildIntegrationsUpdate: GuildIntegrationsUpdate { client: [Circular *1] },
    GuildMemberRemove: GuildMemberRemoveAction { client: [Circular *1] },
    GuildMemberUpdate: GuildMemberUpdateAction { client: [Circular *1] },
    GuildRoleCreate: GuildRoleCreate { client: [Circular *1] },
    GuildRoleDelete: GuildRoleDeleteAction { client: [Circular *1] },
    GuildRoleUpdate: GuildRoleUpdateAction { client: [Circular *1] },
    GuildRolesPositionUpdate: GuildRolesPositionUpdate { client: [Circular *1] },
    GuildScheduledEventCreate: GuildScheduledEventCreateAction { client: [Circular *1] },
    GuildScheduledEventDelete: GuildScheduledEventDeleteAction { client: [Circular *1] },
    GuildScheduledEventUpdate: GuildScheduledEventUpdateAction { client: [Circular *1] },
    GuildScheduledEventUserAdd: GuildScheduledEventUserAddAction { client: [Circular *1] },
    GuildScheduledEventUserRemove: GuildScheduledEventUserRemoveAction { client: [Circular *1] },
    GuildStickerCreate: GuildStickerCreateAction { client: [Circular *1] },
    GuildStickerDelete: GuildStickerDeleteAction { client: [Circular *1] },
    GuildStickerUpdate: GuildStickerUpdateAction { client: [Circular *1] },
    GuildStickersUpdate: GuildStickersUpdateAction { client: [Circular *1] },
    GuildUpdate: GuildUpdateAction { client: [Circular *1] },
    InteractionCreate: InteractionCreateAction { client: [Circular *1] },
    InviteCreate: InviteCreateAction { client: [Circular *1] },
    InviteDelete: InviteDeleteAction { client: [Circular *1] },
    MessageCreate: MessageCreateAction { client: [Circular *1] },
    MessageDelete: MessageDeleteAction { client: [Circular *1] },
    MessageDeleteBulk: MessageDeleteBulkAction { client: [Circular *1] },
    MessageReactionAdd: MessageReactionAdd { client: [Circular *1] },
    MessageReactionRemove: MessageReactionRemove { client: [Circular *1] },
    MessageReactionRemoveAll: MessageReactionRemoveAll { client: [Circular *1] },
    MessageReactionRemoveEmoji: MessageReactionRemoveEmoji { client: [Circular *1] },
    MessageUpdate: MessageUpdateAction { client: [Circular *1] },
    PresenceUpdate: PresenceUpdateAction { client: [Circular *1] },
    StageInstanceCreate: StageInstanceCreateAction { client: [Circular *1] },
    StageInstanceDelete: StageInstanceDeleteAction { client: [Circular *1] },
    StageInstanceUpdate: StageInstanceUpdateAction { client: [Circular *1] },
    ThreadCreate: ThreadCreateAction { client: [Circular *1] },
    ThreadDelete: ThreadDeleteAction { client: [Circular *1] },
    ThreadListSync: ThreadListSyncAction { client: [Circular *1] },
    ThreadMemberUpdate: ThreadMemberUpdateAction { client: [Circular *1] },
    ThreadMembersUpdate: ThreadMembersUpdateAction { client: [Circular *1] },
    TypingStart: TypingStart { client: [Circular *1] },
    UserUpdate: UserUpdateAction { client: [Circular *1] },
    VoiceStateUpdate: VoiceStateUpdate { client: [Circular *1] },
    WebhooksUpdate: WebhooksUpdate { client: [Circular *1] }
  },
  voice: ClientVoiceManager { adapters: Map(0) {} },
  shard: null,
  users: UserManager {},
  guilds: GuildManager {},
  channels: ChannelManager {},
  sweepers: Sweepers {
    options: {},
    intervals: {
      applicationCommands: null,
      bans: null,
      emojis: null,
      invites: null,
      guildMembers: null,
      messages: null,
      presences: null,
      reactions: null,
      stageInstances: null,
      stickers: null,
      threadMembers: null,
      threads: null,
      users: null,
      voiceStates: null
    }
  },
  presence: ClientPresence {
    userId: null,
    guild: null,
    status: 'online',
    activities: [],
    clientStatus: null
  },
  user: ClientUser {
    id: '894060283373449317',
    bot: true,
    system: false,
    flags: UserFlags { bitfield: 0 },
    username: 'Potato bot',
    discriminator: '1627',
    avatar: 'f169fbb08deede7893419429cf1bc9ab',
    banner: null,
    accentColor: null,
    verified: true,
    mfaEnabled: false
  },
  application: ClientApplication {
    id: '894060283373449317',
    name: null,
    description: null,
    icon: null,
    flags: ApplicationFlags { bitfield: 303104 },
    cover: null,
    rpcOrigins: [],
    botRequireCodeGrant: null,
    botPublic: null,
    owner: null,
    commands: ApplicationCommandManager {
      permissions: [ApplicationCommandPermissionsManager]
    }
  },
  readyAt: 2022-02-23T01:47:22.497Z,
  eco: EconomyManager {
    noNegative: undefined,
    prefix: undefined,
    adapter: { name: 'sqlite', options: undefined },
    db: SqliteManager {
      table: 'money',
      filename: 'eco',
      sqliteOptions: {},
      hasInit: true,
      db: [Database]
    }
  },
  db: table {
    tableName: 'inv',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  config: {
    token: 'ODk0MDYwMjgzMzczNDQ5MzE3.YVkghg.ik3wBzG3rjGWnsQ_o3S5edt12fM',
    prefix: 'potat',
    admins: [
      '709950767670493275',
      '879207914005479514',
      '829171854681964604'
    ],
    debug: true,
    countChannel: '',
    opt: {
      DJ: [Object],
      maxVol: 250,
      loopMessage: false,
      discordPlayer: [Object]
    }
  },
  shop: { laptop: { cost: 1000 }, potato: { cost: 1 } },
  job: table {
    tableName: 'job',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  commands: Collection(50) [Map] {
    'addmoney' => {
      name: 'addmoney',
      aliases: [Array],
      usage: 'addmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'bal' => {
      name: 'bal',
      aliases: [Array],
      usage: 'bal',
      execute: [AsyncFunction: execute]
    },
    'beg' => {
      name: 'beg',
      aliases: [],
      usage: 'beg',
      execute: [AsyncFunction: execute]
    },
    'buy' => {
      name: 'buy',
      aliases: [],
      usage: 'buy <item>',
      execute: [AsyncFunction: execute]
    },
    'daily' => {
      name: 'daily',
      aliases: [],
      usage: 'daily',
      execute: [AsyncFunction: execute]
    },
    'inventory' => {
      name: 'inventory',
      aliases: [Array],
      usage: 'inv',
      execute: [AsyncFunction: execute]
    },
    'lb' => {
      name: 'lb',
      aliases: [Array],
      usage: 'leaderboard',
      execute: [AsyncFunction: execute]
    },
    'search' => {
      name: 'search',
      aliases: [],
      utilisation: 'search [song name]',
      execute: [AsyncFunction: execute]
    },
    'setmoney' => {
      name: 'setmoney',
      usage: 'setmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'transfer' => {
      name: 'transfer',
      aliases: [Array],
      usage: 'transfer <member> <amount>',
      execute: [AsyncFunction: execute]
    },
    'weekly' => {
      name: 'weekly',
      usage: 'weekly',
      execute: [AsyncFunction: execute]
    },
    'work' => {
      name: 'work',
      aliases: [],
      usage: 'work',
      cooldown: 3600,
      execute: [Function: execute]
    },
    'say' => {
      name: 'say',
      aliases: [Array],
      description: 'make the bot repeat what you said',
      execute: [Function: execute]
    },
    'sayembed' => {
      name: 'sayembed',
      description: 'say something embed',
      usage: '<title, description>',
      execute: [Function: execute]
    },
    'train' => {
      name: 'train',
      description: 'random thing idk',
      execute: [Function: execute]
    },
    'fasttype' => {
      name: 'fasttype',
      description: 'type fast',
      execute: [AsyncFunction: execute]
    },
    'games' => {
      name: 'games',
      description: 'play some games',
      execute: [Function: execute]
    },
    'settings' => { name: 'settings', execute: [Function: execute] },
    'slots' => {
      name: 'slots',
      description: 'play some games',
      execute: [Function: execute]
    },
    'tictactoe' => {
      name: 'tictactoe',
      description: 'play tictactoe!',
      expectedArgs: '<opponent>',
      minArgs: 1,
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'addfakemember' => { name: 'addfakemember', execute: [Function: execute] },
    'change_status' => { name: 'change_status', execute: [Function: execute] },
    'dev' => {
      name: 'dev',
      description: 'be a dev by completing a form!',
      execute: [AsyncFunction: execute]
    },
    'help' => {
      name: 'help',
      aliases: [Array],
      description: 'List all of my commands or info about a specific command.',
      usage: '[command name]',
      cooldown: 5,
      execute: [Function: execute]
    },
    'ping' => {
      name: 'ping',
      description: 'Ping!',
      execute: [Function: execute]
    },
    'poll' => {
      name: 'poll',
      description: 'poll',
      usage: 'Title + Option 1 + Option 2 + Option 3 + etc',
      execute: [Function: execute]
    },
    'server' => {
      name: 'server',
      aliases: [Array],
      description: 'servers info...',
      cooldown: 5,
      guildOnly: true,
      args: false,
      execute: [Function: execute]
    },
    'suggest' => {
      name: 'suggest',
      description: 'suggest',
      usage: '<suggestion>',
      execute: [Function: execute]
    },
    'ban' => {
      name: 'ban',
      description: 'This command bans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'giverole' => {
      name: 'giverole',
      description: 'give someone a role',
      permission: 'MANAGE_MEMBERS',
      guildOnly: true,
      execute: [Function: execute]
    },
    'kick' => {
      name: 'kick',
      permissions: 'KICK_MEMBERS',
      description: 'this command kicks a member',
      execute: [Function: execute]
    },
    'mute' => {
      name: 'mute',
      description: 'mute someone',
      permissions: 'MANAGE_MESSAGES',
      guildOnly: true,
      execute: [Function: execute]
    },
    'reload' => {
      name: 'reload',
      description: 'Reloads a command',
      args: true,
      execute: [Function: execute]
    },
    'removerole' => {
      name: 'removerole',
      description: "remove someone's role",
      execute: [Function: execute]
    },
    'unban' => {
      name: 'unban',
      description: 'This command unbans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'back' => { name: 'back', aliases: [], execute: [AsyncFunction: execute] },
    'clear' => { name: 'clear', aliases: [], execute: [AsyncFunction: execute] },
    'filter' => {
      name: 'filter',
      aliases: [],
      usage: 'filter [filter name]',
      execute: [AsyncFunction: execute]
    },
    'loop' => {
      name: 'loop',
      aliases: [],
      usage: 'loop [song|queue]',
      execute: [Function: execute]
    },
    'nowplaying' => {
      name: 'nowplaying',
      aliases: [Array],
      execute: [Function: execute]
    },
    'pause' => { name: 'pause', aliases: [], execute: [Function: execute] },
    'play' => {
      name: 'play',
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'progress' => {
      name: 'progress',
      aliases: [Array],
      utilisation: 'progress',
      voiceChannel: true,
      execute: [AsyncFunction: execute]
    },
    'queue' => {
      name: 'queue',
      aliases: [Array],
      utilisation: '{prefix}queue',
      voiceChannel: true,
      execute: [Function: execute]
    },
    'remove' => { name: 'remove', aliases: [], execute: [AsyncFunction: execute] },
    'resume' => { name: 'resume', aliases: [], execute: [Function: execute] },
    'save' => { name: 'save', aliases: [], execute: [AsyncFunction: execute] },
    'skip' => { name: 'skip', aliases: [Array], execute: [Function: execute] },
    'stop' => { name: 'stop', aliases: [Array], execute: [Function: execute] },
    'volume' => {
      name: 'volume',
      aliases: [Array],
      utilisation: 'volume [1-250]',
      voiceChannel: true,
      execute: [Function: execute]
    }
  },
  cooldowns: Collection(9) [Map] {
    'ping' => Collection(0) [Map] {},
    'play' => Collection(1) [Map] { '709950767670493275' => 1645583249967 },
    'skip' => Collection(0) [Map] {},
    'queue' => Collection(0) [Map] {},
    'remove' => Collection(0) [Map] {},
    'search' => Collection(0) [Map] {},
    'stop' => Collection(0) [Map] {},
    'nowplaying' => Collection(0) [Map] {},
    'loop' => Collection(0) [Map] {}
  },
  player: Player {
    _events: [Object: null prototype] {
      error: [Function (anonymous)],
      connectionError: [Function (anonymous)],
      trackStart: [Function (anonymous)],
      trackAdd: [Function (anonymous)],
      botDisconnect: [Function (anonymous)],
      channelEmpty: [Function (anonymous)],
      queueEnd: [Function (anonymous)]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    options: {
      autoRegisterExtractor: true,
      ytdlOptions: [Object],
      connectionTimeout: 20000
    },
    queues: Collection(0) [Map] {},
    voiceUtils: VoiceUtils { cache: Collection(0) [Map] {} },
    extractors: Collection(0) [Map] {},
    requiredEvents: [ 'error', 'connectionError' ],
    client: [Circular *1],
    [Symbol(kCapture)]: false
  },
  [Symbol(kCapture)]: false
}
<ref *1> Client {
  _events: [Object: null prototype] {
    shardDisconnect: [Function (anonymous)],
    voiceStateUpdate: [Function: bound _handleVoiceState],
    guildMemberAdd: [Function (anonymous)],
    message: [Function (anonymous)],
    ready: [Function (anonymous)]
  },
  _eventsCount: 5,
  _maxListeners: 10,
  options: {
    intents: 643,
    waitGuildTimeout: 15000,
    shardCount: 1,
    makeCache: [Function (anonymous)],
    messageCacheLifetime: 0,
    messageSweepInterval: 0,
    invalidRequestWarningInterval: 0,
    partials: [],
    restWsBridgeTimeout: 5000,
    restRequestTimeout: 15000,
    restGlobalRateLimit: 0,
    retryLimit: 1,
    restTimeOffset: 500,
    restSweepInterval: 60,
    failIfNotExists: true,
    userAgentSuffix: [],
    presence: { status: 'online', user: [Object] },
    sweepers: {},
    ws: {
      large_threshold: 50,
      compress: false,
      properties: [Object],
      version: 9,
      presence: [Object]
    },
    http: {
      agent: {},
      version: 9,
      api: 'https://discord.com/api',
      cdn: 'https://cdn.discordapp.com',
      invite: 'https://discord.gg',
      template: 'https://discord.new',
      scheduledEvent: 'https://discord.com/events'
    },
    shards: [ 0 ]
  },
  rest: RESTManager {
    client: [Circular *1],
    handlers: Collection(0) [Map] {},
    versioned: true,
    globalLimit: Infinity,
    globalRemaining: Infinity,
    globalReset: 1645583261850,
    globalDelay: null,
    sweepInterval: Timeout {
      _idleTimeout: 60000,
      _idlePrev: [TimersList],
      _idleNext: [Timeout],
      _idleStart: 2522831,
      _onTimeout: [Function (anonymous)],
      _timerArgs: undefined,
      _repeat: 60000,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(kHasPrimitive)]: false,
      [Symbol(asyncId)]: 12,
      [Symbol(triggerId)]: 1
    }
  },
  _cleanups: Set(50) {
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ]
  },
  _finalizers: FinalizationRegistry {},
  ws: WebSocketManager {
    _events: [Object: null prototype] {},
    _eventsCount: 0,
    _maxListeners: undefined,
    gateway: 'wss://gateway.discord.gg/',
    totalShards: 1,
    shards: Collection(1) [Map] { 0 => [WebSocketShard] },
    status: 0,
    destroyed: false,
    reconnecting: false,
    [Symbol(kCapture)]: false
  },
  actions: ActionsManager {
    client: [Circular *1],
    ChannelCreate: ChannelCreateAction { client: [Circular *1] },
    ChannelDelete: ChannelDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    ChannelUpdate: ChannelUpdateAction { client: [Circular *1] },
    GuildBanAdd: GuildBanAdd { client: [Circular *1] },
    GuildBanRemove: GuildBanRemove { client: [Circular *1] },
    GuildChannelsPositionUpdate: GuildChannelsPositionUpdate { client: [Circular *1] },
    GuildDelete: GuildDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    GuildEmojiCreate: GuildEmojiCreateAction { client: [Circular *1] },
    GuildEmojiDelete: GuildEmojiDeleteAction { client: [Circular *1] },
    GuildEmojiUpdate: GuildEmojiUpdateAction { client: [Circular *1] },
    GuildEmojisUpdate: GuildEmojisUpdateAction { client: [Circular *1] },
    GuildIntegrationsUpdate: GuildIntegrationsUpdate { client: [Circular *1] },
    GuildMemberRemove: GuildMemberRemoveAction { client: [Circular *1] },
    GuildMemberUpdate: GuildMemberUpdateAction { client: [Circular *1] },
    GuildRoleCreate: GuildRoleCreate { client: [Circular *1] },
    GuildRoleDelete: GuildRoleDeleteAction { client: [Circular *1] },
    GuildRoleUpdate: GuildRoleUpdateAction { client: [Circular *1] },
    GuildRolesPositionUpdate: GuildRolesPositionUpdate { client: [Circular *1] },
    GuildScheduledEventCreate: GuildScheduledEventCreateAction { client: [Circular *1] },
    GuildScheduledEventDelete: GuildScheduledEventDeleteAction { client: [Circular *1] },
    GuildScheduledEventUpdate: GuildScheduledEventUpdateAction { client: [Circular *1] },
    GuildScheduledEventUserAdd: GuildScheduledEventUserAddAction { client: [Circular *1] },
    GuildScheduledEventUserRemove: GuildScheduledEventUserRemoveAction { client: [Circular *1] },
    GuildStickerCreate: GuildStickerCreateAction { client: [Circular *1] },
    GuildStickerDelete: GuildStickerDeleteAction { client: [Circular *1] },
    GuildStickerUpdate: GuildStickerUpdateAction { client: [Circular *1] },
    GuildStickersUpdate: GuildStickersUpdateAction { client: [Circular *1] },
    GuildUpdate: GuildUpdateAction { client: [Circular *1] },
    InteractionCreate: InteractionCreateAction { client: [Circular *1] },
    InviteCreate: InviteCreateAction { client: [Circular *1] },
    InviteDelete: InviteDeleteAction { client: [Circular *1] },
    MessageCreate: MessageCreateAction { client: [Circular *1] },
    MessageDelete: MessageDeleteAction { client: [Circular *1] },
    MessageDeleteBulk: MessageDeleteBulkAction { client: [Circular *1] },
    MessageReactionAdd: MessageReactionAdd { client: [Circular *1] },
    MessageReactionRemove: MessageReactionRemove { client: [Circular *1] },
    MessageReactionRemoveAll: MessageReactionRemoveAll { client: [Circular *1] },
    MessageReactionRemoveEmoji: MessageReactionRemoveEmoji { client: [Circular *1] },
    MessageUpdate: MessageUpdateAction { client: [Circular *1] },
    PresenceUpdate: PresenceUpdateAction { client: [Circular *1] },
    StageInstanceCreate: StageInstanceCreateAction { client: [Circular *1] },
    StageInstanceDelete: StageInstanceDeleteAction { client: [Circular *1] },
    StageInstanceUpdate: StageInstanceUpdateAction { client: [Circular *1] },
    ThreadCreate: ThreadCreateAction { client: [Circular *1] },
    ThreadDelete: ThreadDeleteAction { client: [Circular *1] },
    ThreadListSync: ThreadListSyncAction { client: [Circular *1] },
    ThreadMemberUpdate: ThreadMemberUpdateAction { client: [Circular *1] },
    ThreadMembersUpdate: ThreadMembersUpdateAction { client: [Circular *1] },
    TypingStart: TypingStart { client: [Circular *1] },
    UserUpdate: UserUpdateAction { client: [Circular *1] },
    VoiceStateUpdate: VoiceStateUpdate { client: [Circular *1] },
    WebhooksUpdate: WebhooksUpdate { client: [Circular *1] }
  },
  voice: ClientVoiceManager {
    adapters: Map(1) { '893532780946919536' => [Object] }
  },
  shard: null,
  users: UserManager {},
  guilds: GuildManager {},
  channels: ChannelManager {},
  sweepers: Sweepers {
    options: {},
    intervals: {
      applicationCommands: null,
      bans: null,
      emojis: null,
      invites: null,
      guildMembers: null,
      messages: null,
      presences: null,
      reactions: null,
      stageInstances: null,
      stickers: null,
      threadMembers: null,
      threads: null,
      users: null,
      voiceStates: null
    }
  },
  presence: ClientPresence {
    userId: null,
    guild: null,
    status: 'online',
    activities: [],
    clientStatus: null
  },
  user: ClientUser {
    id: '894060283373449317',
    bot: true,
    system: false,
    flags: UserFlags { bitfield: 0 },
    username: 'Potato bot',
    discriminator: '1627',
    avatar: 'f169fbb08deede7893419429cf1bc9ab',
    banner: null,
    accentColor: null,
    verified: true,
    mfaEnabled: false
  },
  application: ClientApplication {
    id: '894060283373449317',
    name: null,
    description: null,
    icon: null,
    flags: ApplicationFlags { bitfield: 303104 },
    cover: null,
    rpcOrigins: [],
    botRequireCodeGrant: null,
    botPublic: null,
    owner: null,
    commands: ApplicationCommandManager {
      permissions: [ApplicationCommandPermissionsManager]
    }
  },
  readyAt: 2022-02-23T01:47:22.497Z,
  eco: EconomyManager {
    noNegative: undefined,
    prefix: undefined,
    adapter: { name: 'sqlite', options: undefined },
    db: SqliteManager {
      table: 'money',
      filename: 'eco',
      sqliteOptions: {},
      hasInit: true,
      db: [Database]
    }
  },
  db: table {
    tableName: 'inv',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  config: {
    token: 'ODk0MDYwMjgzMzczNDQ5MzE3.YVkghg.ik3wBzG3rjGWnsQ_o3S5edt12fM',
    prefix: 'potat',
    admins: [
      '709950767670493275',
      '879207914005479514',
      '829171854681964604'
    ],
    debug: true,
    countChannel: '',
    opt: {
      DJ: [Object],
      maxVol: 250,
      loopMessage: false,
      discordPlayer: [Object]
    }
  },
  shop: { laptop: { cost: 1000 }, potato: { cost: 1 } },
  job: table {
    tableName: 'job',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  commands: Collection(50) [Map] {
    'addmoney' => {
      name: 'addmoney',
      aliases: [Array],
      usage: 'addmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'bal' => {
      name: 'bal',
      aliases: [Array],
      usage: 'bal',
      execute: [AsyncFunction: execute]
    },
    'beg' => {
      name: 'beg',
      aliases: [],
      usage: 'beg',
      execute: [AsyncFunction: execute]
    },
    'buy' => {
      name: 'buy',
      aliases: [],
      usage: 'buy <item>',
      execute: [AsyncFunction: execute]
    },
    'daily' => {
      name: 'daily',
      aliases: [],
      usage: 'daily',
      execute: [AsyncFunction: execute]
    },
    'inventory' => {
      name: 'inventory',
      aliases: [Array],
      usage: 'inv',
      execute: [AsyncFunction: execute]
    },
    'lb' => {
      name: 'lb',
      aliases: [Array],
      usage: 'leaderboard',
      execute: [AsyncFunction: execute]
    },
    'search' => {
      name: 'search',
      aliases: [],
      utilisation: 'search [song name]',
      execute: [AsyncFunction: execute]
    },
    'setmoney' => {
      name: 'setmoney',
      usage: 'setmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'transfer' => {
      name: 'transfer',
      aliases: [Array],
      usage: 'transfer <member> <amount>',
      execute: [AsyncFunction: execute]
    },
    'weekly' => {
      name: 'weekly',
      usage: 'weekly',
      execute: [AsyncFunction: execute]
    },
    'work' => {
      name: 'work',
      aliases: [],
      usage: 'work',
      cooldown: 3600,
      execute: [Function: execute]
    },
    'say' => {
      name: 'say',
      aliases: [Array],
      description: 'make the bot repeat what you said',
      execute: [Function: execute]
    },
    'sayembed' => {
      name: 'sayembed',
      description: 'say something embed',
      usage: '<title, description>',
      execute: [Function: execute]
    },
    'train' => {
      name: 'train',
      description: 'random thing idk',
      execute: [Function: execute]
    },
    'fasttype' => {
      name: 'fasttype',
      description: 'type fast',
      execute: [AsyncFunction: execute]
    },
    'games' => {
      name: 'games',
      description: 'play some games',
      execute: [Function: execute]
    },
    'settings' => { name: 'settings', execute: [Function: execute] },
    'slots' => {
      name: 'slots',
      description: 'play some games',
      execute: [Function: execute]
    },
    'tictactoe' => {
      name: 'tictactoe',
      description: 'play tictactoe!',
      expectedArgs: '<opponent>',
      minArgs: 1,
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'addfakemember' => { name: 'addfakemember', execute: [Function: execute] },
    'change_status' => { name: 'change_status', execute: [Function: execute] },
    'dev' => {
      name: 'dev',
      description: 'be a dev by completing a form!',
      execute: [AsyncFunction: execute]
    },
    'help' => {
      name: 'help',
      aliases: [Array],
      description: 'List all of my commands or info about a specific command.',
      usage: '[command name]',
      cooldown: 5,
      execute: [Function: execute]
    },
    'ping' => {
      name: 'ping',
      description: 'Ping!',
      execute: [Function: execute]
    },
    'poll' => {
      name: 'poll',
      description: 'poll',
      usage: 'Title + Option 1 + Option 2 + Option 3 + etc',
      execute: [Function: execute]
    },
    'server' => {
      name: 'server',
      aliases: [Array],
      description: 'servers info...',
      cooldown: 5,
      guildOnly: true,
      args: false,
      execute: [Function: execute]
    },
    'suggest' => {
      name: 'suggest',
      description: 'suggest',
      usage: '<suggestion>',
      execute: [Function: execute]
    },
    'ban' => {
      name: 'ban',
      description: 'This command bans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'giverole' => {
      name: 'giverole',
      description: 'give someone a role',
      permission: 'MANAGE_MEMBERS',
      guildOnly: true,
      execute: [Function: execute]
    },
    'kick' => {
      name: 'kick',
      permissions: 'KICK_MEMBERS',
      description: 'this command kicks a member',
      execute: [Function: execute]
    },
    'mute' => {
      name: 'mute',
      description: 'mute someone',
      permissions: 'MANAGE_MESSAGES',
      guildOnly: true,
      execute: [Function: execute]
    },
    'reload' => {
      name: 'reload',
      description: 'Reloads a command',
      args: true,
      execute: [Function: execute]
    },
    'removerole' => {
      name: 'removerole',
      description: "remove someone's role",
      execute: [Function: execute]
    },
    'unban' => {
      name: 'unban',
      description: 'This command unbans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'back' => { name: 'back', aliases: [], execute: [AsyncFunction: execute] },
    'clear' => { name: 'clear', aliases: [], execute: [AsyncFunction: execute] },
    'filter' => {
      name: 'filter',
      aliases: [],
      usage: 'filter [filter name]',
      execute: [AsyncFunction: execute]
    },
    'loop' => {
      name: 'loop',
      aliases: [],
      usage: 'loop [song|queue]',
      execute: [Function: execute]
    },
    'nowplaying' => {
      name: 'nowplaying',
      aliases: [Array],
      execute: [Function: execute]
    },
    'pause' => { name: 'pause', aliases: [], execute: [Function: execute] },
    'play' => {
      name: 'play',
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'progress' => {
      name: 'progress',
      aliases: [Array],
      utilisation: 'progress',
      voiceChannel: true,
      execute: [AsyncFunction: execute]
    },
    'queue' => {
      name: 'queue',
      aliases: [Array],
      utilisation: '{prefix}queue',
      voiceChannel: true,
      execute: [Function: execute]
    },
    'remove' => { name: 'remove', aliases: [], execute: [AsyncFunction: execute] },
    'resume' => { name: 'resume', aliases: [], execute: [Function: execute] },
    'save' => { name: 'save', aliases: [], execute: [AsyncFunction: execute] },
    'skip' => { name: 'skip', aliases: [Array], execute: [Function: execute] },
    'stop' => { name: 'stop', aliases: [Array], execute: [Function: execute] },
    'volume' => {
      name: 'volume',
      aliases: [Array],
      utilisation: 'volume [1-250]',
      voiceChannel: true,
      execute: [Function: execute]
    }
  },
  cooldowns: Collection(9) [Map] {
    'ping' => Collection(0) [Map] {},
    'play' => Collection(1) [Map] { '709950767670493275' => 1645583366993 },
    'skip' => Collection(0) [Map] {},
    'queue' => Collection(0) [Map] {},
    'remove' => Collection(0) [Map] {},
    'search' => Collection(0) [Map] {},
    'stop' => Collection(0) [Map] {},
    'nowplaying' => Collection(0) [Map] {},
    'loop' => Collection(0) [Map] {}
  },
  player: Player {
    _events: [Object: null prototype] {
      error: [Function (anonymous)],
      connectionError: [Function (anonymous)],
      trackStart: [Function (anonymous)],
      trackAdd: [Function (anonymous)],
      botDisconnect: [Function (anonymous)],
      channelEmpty: [Function (anonymous)],
      queueEnd: [Function (anonymous)]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    options: {
      autoRegisterExtractor: true,
      ytdlOptions: [Object],
      connectionTimeout: 20000
    },
    queues: Collection(1) [Map] { '893532780946919536' => [Queue] },
    voiceUtils: VoiceUtils { cache: [Collection [Map]] },
    extractors: Collection(0) [Map] {},
    requiredEvents: [ 'error', 'connectionError' ],
    client: [Circular *1],
    [Symbol(kCapture)]: false
  },
  [Symbol(kCapture)]: false
}
There was a problem with the song queue => [DestroyedQueue] Cannot use destroyed queue
<ref *1> Client {
  _events: [Object: null prototype] {
    shardDisconnect: [Function (anonymous)],
    voiceStateUpdate: [Function: bound _handleVoiceState],
    guildMemberAdd: [Function (anonymous)],
    message: [Function (anonymous)],
    ready: [Function (anonymous)]
  },
  _eventsCount: 5,
  _maxListeners: 10,
  options: {
    intents: 643,
    waitGuildTimeout: 15000,
    shardCount: 1,
    makeCache: [Function (anonymous)],
    messageCacheLifetime: 0,
    messageSweepInterval: 0,
    invalidRequestWarningInterval: 0,
    partials: [],
    restWsBridgeTimeout: 5000,
    restRequestTimeout: 15000,
    restGlobalRateLimit: 0,
    retryLimit: 1,
    restTimeOffset: 500,
    restSweepInterval: 60,
    failIfNotExists: true,
    userAgentSuffix: [],
    presence: { status: 'online', user: [Object] },
    sweepers: {},
    ws: {
      large_threshold: 50,
      compress: false,
      properties: [Object],
      version: 9,
      presence: [Object]
    },
    http: {
      agent: {},
      version: 9,
      api: 'https://discord.com/api',
      cdn: 'https://cdn.discordapp.com',
      invite: 'https://discord.gg',
      template: 'https://discord.new',
      scheduledEvent: 'https://discord.com/events'
    },
    shards: [ 0 ]
  },
  rest: RESTManager {
    client: [Circular *1],
    handlers: Collection(0) [Map] {},
    versioned: true,
    globalLimit: Infinity,
    globalRemaining: Infinity,
    globalReset: 1645584943743,
    globalDelay: null,
    sweepInterval: Timeout {
      _idleTimeout: 60000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 7259771,
      _onTimeout: [Function (anonymous)],
      _timerArgs: undefined,
      _repeat: 60000,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(kHasPrimitive)]: false,
      [Symbol(asyncId)]: 12,
      [Symbol(triggerId)]: 1
    }
  },
  _cleanups: Set(50) {
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ]
  },
  _finalizers: FinalizationRegistry {},
  ws: WebSocketManager {
    _events: [Object: null prototype] {},
    _eventsCount: 0,
    _maxListeners: undefined,
    gateway: 'wss://gateway.discord.gg/',
    totalShards: 1,
    shards: Collection(1) [Map] { 0 => [WebSocketShard] },
    status: 0,
    destroyed: false,
    reconnecting: false,
    [Symbol(kCapture)]: false
  },
  actions: ActionsManager {
    client: [Circular *1],
    ChannelCreate: ChannelCreateAction { client: [Circular *1] },
    ChannelDelete: ChannelDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    ChannelUpdate: ChannelUpdateAction { client: [Circular *1] },
    GuildBanAdd: GuildBanAdd { client: [Circular *1] },
    GuildBanRemove: GuildBanRemove { client: [Circular *1] },
    GuildChannelsPositionUpdate: GuildChannelsPositionUpdate { client: [Circular *1] },
    GuildDelete: GuildDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    GuildEmojiCreate: GuildEmojiCreateAction { client: [Circular *1] },
    GuildEmojiDelete: GuildEmojiDeleteAction { client: [Circular *1] },
    GuildEmojiUpdate: GuildEmojiUpdateAction { client: [Circular *1] },
    GuildEmojisUpdate: GuildEmojisUpdateAction { client: [Circular *1] },
    GuildIntegrationsUpdate: GuildIntegrationsUpdate { client: [Circular *1] },
    GuildMemberRemove: GuildMemberRemoveAction { client: [Circular *1] },
    GuildMemberUpdate: GuildMemberUpdateAction { client: [Circular *1] },
    GuildRoleCreate: GuildRoleCreate { client: [Circular *1] },
    GuildRoleDelete: GuildRoleDeleteAction { client: [Circular *1] },
    GuildRoleUpdate: GuildRoleUpdateAction { client: [Circular *1] },
    GuildRolesPositionUpdate: GuildRolesPositionUpdate { client: [Circular *1] },
    GuildScheduledEventCreate: GuildScheduledEventCreateAction { client: [Circular *1] },
    GuildScheduledEventDelete: GuildScheduledEventDeleteAction { client: [Circular *1] },
    GuildScheduledEventUpdate: GuildScheduledEventUpdateAction { client: [Circular *1] },
    GuildScheduledEventUserAdd: GuildScheduledEventUserAddAction { client: [Circular *1] },
    GuildScheduledEventUserRemove: GuildScheduledEventUserRemoveAction { client: [Circular *1] },
    GuildStickerCreate: GuildStickerCreateAction { client: [Circular *1] },
    GuildStickerDelete: GuildStickerDeleteAction { client: [Circular *1] },
    GuildStickerUpdate: GuildStickerUpdateAction { client: [Circular *1] },
    GuildStickersUpdate: GuildStickersUpdateAction { client: [Circular *1] },
    GuildUpdate: GuildUpdateAction { client: [Circular *1] },
    InteractionCreate: InteractionCreateAction { client: [Circular *1] },
    InviteCreate: InviteCreateAction { client: [Circular *1] },
    InviteDelete: InviteDeleteAction { client: [Circular *1] },
    MessageCreate: MessageCreateAction { client: [Circular *1] },
    MessageDelete: MessageDeleteAction { client: [Circular *1] },
    MessageDeleteBulk: MessageDeleteBulkAction { client: [Circular *1] },
    MessageReactionAdd: MessageReactionAdd { client: [Circular *1] },
    MessageReactionRemove: MessageReactionRemove { client: [Circular *1] },
    MessageReactionRemoveAll: MessageReactionRemoveAll { client: [Circular *1] },
    MessageReactionRemoveEmoji: MessageReactionRemoveEmoji { client: [Circular *1] },
    MessageUpdate: MessageUpdateAction { client: [Circular *1] },
    PresenceUpdate: PresenceUpdateAction { client: [Circular *1] },
    StageInstanceCreate: StageInstanceCreateAction { client: [Circular *1] },
    StageInstanceDelete: StageInstanceDeleteAction { client: [Circular *1] },
    StageInstanceUpdate: StageInstanceUpdateAction { client: [Circular *1] },
    ThreadCreate: ThreadCreateAction { client: [Circular *1] },
    ThreadDelete: ThreadDeleteAction { client: [Circular *1] },
    ThreadListSync: ThreadListSyncAction { client: [Circular *1] },
    ThreadMemberUpdate: ThreadMemberUpdateAction { client: [Circular *1] },
    ThreadMembersUpdate: ThreadMembersUpdateAction { client: [Circular *1] },
    TypingStart: TypingStart { client: [Circular *1] },
    UserUpdate: UserUpdateAction { client: [Circular *1] },
    VoiceStateUpdate: VoiceStateUpdate { client: [Circular *1] },
    WebhooksUpdate: WebhooksUpdate { client: [Circular *1] }
  },
  voice: ClientVoiceManager { adapters: Map(0) {} },
  shard: null,
  users: UserManager {},
  guilds: GuildManager {},
  channels: ChannelManager {},
  sweepers: Sweepers {
    options: {},
    intervals: {
      applicationCommands: null,
      bans: null,
      emojis: null,
      invites: null,
      guildMembers: null,
      messages: null,
      presences: null,
      reactions: null,
      stageInstances: null,
      stickers: null,
      threadMembers: null,
      threads: null,
      users: null,
      voiceStates: null
    }
  },
  presence: ClientPresence {
    userId: null,
    guild: null,
    status: 'online',
    activities: [],
    clientStatus: null
  },
  user: ClientUser {
    id: '894060283373449317',
    bot: true,
    system: false,
    flags: UserFlags { bitfield: 0 },
    username: 'Potato bot',
    discriminator: '1627',
    avatar: 'f169fbb08deede7893419429cf1bc9ab',
    banner: null,
    accentColor: null,
    verified: true,
    mfaEnabled: false
  },
  application: ClientApplication {
    id: '894060283373449317',
    name: null,
    description: null,
    icon: null,
    flags: ApplicationFlags { bitfield: 303104 },
    cover: null,
    rpcOrigins: [],
    botRequireCodeGrant: null,
    botPublic: null,
    owner: null,
    commands: ApplicationCommandManager {
      permissions: [ApplicationCommandPermissionsManager]
    }
  },
  readyAt: 2022-02-23T01:47:22.497Z,
  eco: EconomyManager {
    noNegative: undefined,
    prefix: undefined,
    adapter: { name: 'sqlite', options: undefined },
    db: SqliteManager {
      table: 'money',
      filename: 'eco',
      sqliteOptions: {},
      hasInit: true,
      db: [Database]
    }
  },
  db: table {
    tableName: 'inv',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  config: {
    token: 'ODk0MDYwMjgzMzczNDQ5MzE3.YVkghg.ik3wBzG3rjGWnsQ_o3S5edt12fM',
    prefix: 'potat',
    admins: [
      '709950767670493275',
      '879207914005479514',
      '829171854681964604'
    ],
    debug: true,
    countChannel: '',
    opt: {
      DJ: [Object],
      maxVol: 250,
      loopMessage: false,
      discordPlayer: [Object]
    }
  },
  shop: { laptop: { cost: 1000 }, potato: { cost: 1 } },
  job: table {
    tableName: 'job',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  commands: Collection(50) [Map] {
    'addmoney' => {
      name: 'addmoney',
      aliases: [Array],
      usage: 'addmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'bal' => {
      name: 'bal',
      aliases: [Array],
      usage: 'bal',
      execute: [AsyncFunction: execute]
    },
    'beg' => {
      name: 'beg',
      aliases: [],
      usage: 'beg',
      execute: [AsyncFunction: execute]
    },
    'buy' => {
      name: 'buy',
      aliases: [],
      usage: 'buy <item>',
      execute: [AsyncFunction: execute]
    },
    'daily' => {
      name: 'daily',
      aliases: [],
      usage: 'daily',
      execute: [AsyncFunction: execute]
    },
    'inventory' => {
      name: 'inventory',
      aliases: [Array],
      usage: 'inv',
      execute: [AsyncFunction: execute]
    },
    'lb' => {
      name: 'lb',
      aliases: [Array],
      usage: 'leaderboard',
      execute: [AsyncFunction: execute]
    },
    'search' => {
      name: 'search',
      aliases: [],
      utilisation: 'search [song name]',
      execute: [AsyncFunction: execute]
    },
    'setmoney' => {
      name: 'setmoney',
      usage: 'setmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'transfer' => {
      name: 'transfer',
      aliases: [Array],
      usage: 'transfer <member> <amount>',
      execute: [AsyncFunction: execute]
    },
    'weekly' => {
      name: 'weekly',
      usage: 'weekly',
      execute: [AsyncFunction: execute]
    },
    'work' => {
      name: 'work',
      aliases: [],
      usage: 'work',
      cooldown: 3600,
      execute: [Function: execute]
    },
    'say' => {
      name: 'say',
      aliases: [Array],
      description: 'make the bot repeat what you said',
      execute: [Function: execute]
    },
    'sayembed' => {
      name: 'sayembed',
      description: 'say something embed',
      usage: '<title, description>',
      execute: [Function: execute]
    },
    'train' => {
      name: 'train',
      description: 'random thing idk',
      execute: [Function: execute]
    },
    'fasttype' => {
      name: 'fasttype',
      description: 'type fast',
      execute: [AsyncFunction: execute]
    },
    'games' => {
      name: 'games',
      description: 'play some games',
      execute: [Function: execute]
    },
    'settings' => { name: 'settings', execute: [Function: execute] },
    'slots' => {
      name: 'slots',
      description: 'play some games',
      execute: [Function: execute]
    },
    'tictactoe' => {
      name: 'tictactoe',
      description: 'play tictactoe!',
      expectedArgs: '<opponent>',
      minArgs: 1,
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'addfakemember' => { name: 'addfakemember', execute: [Function: execute] },
    'change_status' => { name: 'change_status', execute: [Function: execute] },
    'dev' => {
      name: 'dev',
      description: 'be a dev by completing a form!',
      execute: [AsyncFunction: execute]
    },
    'help' => {
      name: 'help',
      aliases: [Array],
      description: 'List all of my commands or info about a specific command.',
      usage: '[command name]',
      cooldown: 5,
      execute: [Function: execute]
    },
    'ping' => {
      name: 'ping',
      description: 'Ping!',
      execute: [Function: execute]
    },
    'poll' => {
      name: 'poll',
      description: 'poll',
      usage: 'Title + Option 1 + Option 2 + Option 3 + etc',
      execute: [Function: execute]
    },
    'server' => {
      name: 'server',
      aliases: [Array],
      description: 'servers info...',
      cooldown: 5,
      guildOnly: true,
      args: false,
      execute: [Function: execute]
    },
    'suggest' => {
      name: 'suggest',
      description: 'suggest',
      usage: '<suggestion>',
      execute: [Function: execute]
    },
    'ban' => {
      name: 'ban',
      description: 'This command bans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'giverole' => {
      name: 'giverole',
      description: 'give someone a role',
      permission: 'MANAGE_MEMBERS',
      guildOnly: true,
      execute: [Function: execute]
    },
    'kick' => {
      name: 'kick',
      permissions: 'KICK_MEMBERS',
      description: 'this command kicks a member',
      execute: [Function: execute]
    },
    'mute' => {
      name: 'mute',
      description: 'mute someone',
      permissions: 'MANAGE_MESSAGES',
      guildOnly: true,
      execute: [Function: execute]
    },
    'reload' => {
      name: 'reload',
      description: 'Reloads a command',
      args: true,
      execute: [Function: execute]
    },
    'removerole' => {
      name: 'removerole',
      description: "remove someone's role",
      execute: [Function: execute]
    },
    'unban' => {
      name: 'unban',
      description: 'This command unbans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'back' => { name: 'back', aliases: [], execute: [AsyncFunction: execute] },
    'clear' => { name: 'clear', aliases: [], execute: [AsyncFunction: execute] },
    'filter' => {
      name: 'filter',
      aliases: [],
      usage: 'filter [filter name]',
      execute: [AsyncFunction: execute]
    },
    'loop' => {
      name: 'loop',
      aliases: [],
      usage: 'loop [song|queue]',
      execute: [Function: execute]
    },
    'nowplaying' => {
      name: 'nowplaying',
      aliases: [Array],
      execute: [Function: execute]
    },
    'pause' => { name: 'pause', aliases: [], execute: [Function: execute] },
    'play' => {
      name: 'play',
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'progress' => {
      name: 'progress',
      aliases: [Array],
      utilisation: 'progress',
      voiceChannel: true,
      execute: [AsyncFunction: execute]
    },
    'queue' => {
      name: 'queue',
      aliases: [Array],
      utilisation: '{prefix}queue',
      voiceChannel: true,
      execute: [Function: execute]
    },
    'remove' => { name: 'remove', aliases: [], execute: [AsyncFunction: execute] },
    'resume' => { name: 'resume', aliases: [], execute: [Function: execute] },
    'save' => { name: 'save', aliases: [], execute: [AsyncFunction: execute] },
    'skip' => { name: 'skip', aliases: [Array], execute: [Function: execute] },
    'stop' => { name: 'stop', aliases: [Array], execute: [Function: execute] },
    'volume' => {
      name: 'volume',
      aliases: [Array],
      utilisation: 'volume [1-250]',
      voiceChannel: true,
      execute: [Function: execute]
    }
  },
  cooldowns: Collection(10) [Map] {
    'ping' => Collection(0) [Map] {},
    'play' => Collection(1) [Map] { '709950767670493275' => 1645588113604 },
    'skip' => Collection(0) [Map] {},
    'queue' => Collection(0) [Map] {},
    'remove' => Collection(0) [Map] {},
    'search' => Collection(0) [Map] {},
    'stop' => Collection(0) [Map] {},
    'nowplaying' => Collection(0) [Map] {},
    'loop' => Collection(0) [Map] {},
    'progress' => Collection(0) [Map] {}
  },
  player: Player {
    _events: [Object: null prototype] {
      error: [Function (anonymous)],
      connectionError: [Function (anonymous)],
      trackStart: [Function (anonymous)],
      trackAdd: [Function (anonymous)],
      botDisconnect: [Function (anonymous)],
      channelEmpty: [Function (anonymous)],
      queueEnd: [Function (anonymous)]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    options: {
      autoRegisterExtractor: true,
      ytdlOptions: [Object],
      connectionTimeout: 20000
    },
    queues: Collection(0) [Map] {},
    voiceUtils: VoiceUtils { cache: Collection(0) [Map] {} },
    extractors: Collection(0) [Map] {},
    requiredEvents: [ 'error', 'connectionError' ],
    client: [Circular *1],
    [Symbol(kCapture)]: false
  },
  [Symbol(kCapture)]: false
}
<ref *1> Client {
  _events: [Object: null prototype] {
    shardDisconnect: [Function (anonymous)],
    voiceStateUpdate: [Function: bound _handleVoiceState],
    guildMemberAdd: [Function (anonymous)],
    message: [Function (anonymous)],
    ready: [Function (anonymous)]
  },
  _eventsCount: 5,
  _maxListeners: 10,
  options: {
    intents: 643,
    waitGuildTimeout: 15000,
    shardCount: 1,
    makeCache: [Function (anonymous)],
    messageCacheLifetime: 0,
    messageSweepInterval: 0,
    invalidRequestWarningInterval: 0,
    partials: [],
    restWsBridgeTimeout: 5000,
    restRequestTimeout: 15000,
    restGlobalRateLimit: 0,
    retryLimit: 1,
    restTimeOffset: 500,
    restSweepInterval: 60,
    failIfNotExists: true,
    userAgentSuffix: [],
    presence: { status: 'online', user: [Object] },
    sweepers: {},
    ws: {
      large_threshold: 50,
      compress: false,
      properties: [Object],
      version: 9,
      presence: [Object]
    },
    http: {
      agent: {},
      version: 9,
      api: 'https://discord.com/api',
      cdn: 'https://cdn.discordapp.com',
      invite: 'https://discord.gg',
      template: 'https://discord.new',
      scheduledEvent: 'https://discord.com/events'
    },
    shards: [ 0 ]
  },
  rest: RESTManager {
    client: [Circular *1],
    handlers: Collection(0) [Map] {},
    versioned: true,
    globalLimit: Infinity,
    globalRemaining: Infinity,
    globalReset: 1645589698581,
    globalDelay: null,
    sweepInterval: Timeout {
      _idleTimeout: 60000,
      _idlePrev: [Timeout],
      _idleNext: [TimersList],
      _idleStart: 8880001,
      _onTimeout: [Function (anonymous)],
      _timerArgs: undefined,
      _repeat: 60000,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(kHasPrimitive)]: false,
      [Symbol(asyncId)]: 12,
      [Symbol(triggerId)]: 1
    }
  },
  _cleanups: Set(50) {
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ]
  },
  _finalizers: FinalizationRegistry {},
  ws: WebSocketManager {
    _events: [Object: null prototype] {},
    _eventsCount: 0,
    _maxListeners: undefined,
    gateway: 'wss://gateway.discord.gg/',
    totalShards: 1,
    shards: Collection(1) [Map] { 0 => [WebSocketShard] },
    status: 0,
    destroyed: false,
    reconnecting: false,
    [Symbol(kCapture)]: false
  },
  actions: ActionsManager {
    client: [Circular *1],
    ChannelCreate: ChannelCreateAction { client: [Circular *1] },
    ChannelDelete: ChannelDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    ChannelUpdate: ChannelUpdateAction { client: [Circular *1] },
    GuildBanAdd: GuildBanAdd { client: [Circular *1] },
    GuildBanRemove: GuildBanRemove { client: [Circular *1] },
    GuildChannelsPositionUpdate: GuildChannelsPositionUpdate { client: [Circular *1] },
    GuildDelete: GuildDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    GuildEmojiCreate: GuildEmojiCreateAction { client: [Circular *1] },
    GuildEmojiDelete: GuildEmojiDeleteAction { client: [Circular *1] },
    GuildEmojiUpdate: GuildEmojiUpdateAction { client: [Circular *1] },
    GuildEmojisUpdate: GuildEmojisUpdateAction { client: [Circular *1] },
    GuildIntegrationsUpdate: GuildIntegrationsUpdate { client: [Circular *1] },
    GuildMemberRemove: GuildMemberRemoveAction { client: [Circular *1] },
    GuildMemberUpdate: GuildMemberUpdateAction { client: [Circular *1] },
    GuildRoleCreate: GuildRoleCreate { client: [Circular *1] },
    GuildRoleDelete: GuildRoleDeleteAction { client: [Circular *1] },
    GuildRoleUpdate: GuildRoleUpdateAction { client: [Circular *1] },
    GuildRolesPositionUpdate: GuildRolesPositionUpdate { client: [Circular *1] },
    GuildScheduledEventCreate: GuildScheduledEventCreateAction { client: [Circular *1] },
    GuildScheduledEventDelete: GuildScheduledEventDeleteAction { client: [Circular *1] },
    GuildScheduledEventUpdate: GuildScheduledEventUpdateAction { client: [Circular *1] },
    GuildScheduledEventUserAdd: GuildScheduledEventUserAddAction { client: [Circular *1] },
    GuildScheduledEventUserRemove: GuildScheduledEventUserRemoveAction { client: [Circular *1] },
    GuildStickerCreate: GuildStickerCreateAction { client: [Circular *1] },
    GuildStickerDelete: GuildStickerDeleteAction { client: [Circular *1] },
    GuildStickerUpdate: GuildStickerUpdateAction { client: [Circular *1] },
    GuildStickersUpdate: GuildStickersUpdateAction { client: [Circular *1] },
    GuildUpdate: GuildUpdateAction { client: [Circular *1] },
    InteractionCreate: InteractionCreateAction { client: [Circular *1] },
    InviteCreate: InviteCreateAction { client: [Circular *1] },
    InviteDelete: InviteDeleteAction { client: [Circular *1] },
    MessageCreate: MessageCreateAction { client: [Circular *1] },
    MessageDelete: MessageDeleteAction { client: [Circular *1] },
    MessageDeleteBulk: MessageDeleteBulkAction { client: [Circular *1] },
    MessageReactionAdd: MessageReactionAdd { client: [Circular *1] },
    MessageReactionRemove: MessageReactionRemove { client: [Circular *1] },
    MessageReactionRemoveAll: MessageReactionRemoveAll { client: [Circular *1] },
    MessageReactionRemoveEmoji: MessageReactionRemoveEmoji { client: [Circular *1] },
    MessageUpdate: MessageUpdateAction { client: [Circular *1] },
    PresenceUpdate: PresenceUpdateAction { client: [Circular *1] },
    StageInstanceCreate: StageInstanceCreateAction { client: [Circular *1] },
    StageInstanceDelete: StageInstanceDeleteAction { client: [Circular *1] },
    StageInstanceUpdate: StageInstanceUpdateAction { client: [Circular *1] },
    ThreadCreate: ThreadCreateAction { client: [Circular *1] },
    ThreadDelete: ThreadDeleteAction { client: [Circular *1] },
    ThreadListSync: ThreadListSyncAction { client: [Circular *1] },
    ThreadMemberUpdate: ThreadMemberUpdateAction { client: [Circular *1] },
    ThreadMembersUpdate: ThreadMembersUpdateAction { client: [Circular *1] },
    TypingStart: TypingStart { client: [Circular *1] },
    UserUpdate: UserUpdateAction { client: [Circular *1] },
    VoiceStateUpdate: VoiceStateUpdate { client: [Circular *1] },
    WebhooksUpdate: WebhooksUpdate { client: [Circular *1] }
  },
  voice: ClientVoiceManager { adapters: Map(0) {} },
  shard: null,
  users: UserManager {},
  guilds: GuildManager {},
  channels: ChannelManager {},
  sweepers: Sweepers {
    options: {},
    intervals: {
      applicationCommands: null,
      bans: null,
      emojis: null,
      invites: null,
      guildMembers: null,
      messages: null,
      presences: null,
      reactions: null,
      stageInstances: null,
      stickers: null,
      threadMembers: null,
      threads: null,
      users: null,
      voiceStates: null
    }
  },
  presence: ClientPresence {
    userId: null,
    guild: null,
    status: 'online',
    activities: [],
    clientStatus: null
  },
  user: ClientUser {
    id: '894060283373449317',
    bot: true,
    system: false,
    flags: UserFlags { bitfield: 0 },
    username: 'Potato bot',
    discriminator: '1627',
    avatar: 'f169fbb08deede7893419429cf1bc9ab',
    banner: null,
    accentColor: null,
    verified: true,
    mfaEnabled: false
  },
  application: ClientApplication {
    id: '894060283373449317',
    name: null,
    description: null,
    icon: null,
    flags: ApplicationFlags { bitfield: 303104 },
    cover: null,
    rpcOrigins: [],
    botRequireCodeGrant: null,
    botPublic: null,
    owner: null,
    commands: ApplicationCommandManager {
      permissions: [ApplicationCommandPermissionsManager]
    }
  },
  readyAt: 2022-02-23T01:47:22.497Z,
  eco: EconomyManager {
    noNegative: undefined,
    prefix: undefined,
    adapter: { name: 'sqlite', options: undefined },
    db: SqliteManager {
      table: 'money',
      filename: 'eco',
      sqliteOptions: {},
      hasInit: true,
      db: [Database]
    }
  },
  db: table {
    tableName: 'inv',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  config: {
    token: 'ODk0MDYwMjgzMzczNDQ5MzE3.YVkghg.ik3wBzG3rjGWnsQ_o3S5edt12fM',
    prefix: 'potat',
    admins: [
      '709950767670493275',
      '879207914005479514',
      '829171854681964604'
    ],
    debug: true,
    countChannel: '',
    opt: {
      DJ: [Object],
      maxVol: 250,
      loopMessage: false,
      discordPlayer: [Object]
    }
  },
  shop: { laptop: { cost: 1000 }, potato: { cost: 1 } },
  job: table {
    tableName: 'job',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  commands: Collection(50) [Map] {
    'addmoney' => {
      name: 'addmoney',
      aliases: [Array],
      usage: 'addmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'bal' => {
      name: 'bal',
      aliases: [Array],
      usage: 'bal',
      execute: [AsyncFunction: execute]
    },
    'beg' => {
      name: 'beg',
      aliases: [],
      usage: 'beg',
      execute: [AsyncFunction: execute]
    },
    'buy' => {
      name: 'buy',
      aliases: [],
      usage: 'buy <item>',
      execute: [AsyncFunction: execute]
    },
    'daily' => {
      name: 'daily',
      aliases: [],
      usage: 'daily',
      execute: [AsyncFunction: execute]
    },
    'inventory' => {
      name: 'inventory',
      aliases: [Array],
      usage: 'inv',
      execute: [AsyncFunction: execute]
    },
    'lb' => {
      name: 'lb',
      aliases: [Array],
      usage: 'leaderboard',
      execute: [AsyncFunction: execute]
    },
    'search' => {
      name: 'search',
      aliases: [],
      utilisation: 'search [song name]',
      execute: [AsyncFunction: execute]
    },
    'setmoney' => {
      name: 'setmoney',
      usage: 'setmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'transfer' => {
      name: 'transfer',
      aliases: [Array],
      usage: 'transfer <member> <amount>',
      execute: [AsyncFunction: execute]
    },
    'weekly' => {
      name: 'weekly',
      usage: 'weekly',
      execute: [AsyncFunction: execute]
    },
    'work' => {
      name: 'work',
      aliases: [],
      usage: 'work',
      cooldown: 3600,
      execute: [Function: execute]
    },
    'say' => {
      name: 'say',
      aliases: [Array],
      description: 'make the bot repeat what you said',
      execute: [Function: execute]
    },
    'sayembed' => {
      name: 'sayembed',
      description: 'say something embed',
      usage: '<title, description>',
      execute: [Function: execute]
    },
    'train' => {
      name: 'train',
      description: 'random thing idk',
      execute: [Function: execute]
    },
    'fasttype' => {
      name: 'fasttype',
      description: 'type fast',
      execute: [AsyncFunction: execute]
    },
    'games' => {
      name: 'games',
      description: 'play some games',
      execute: [Function: execute]
    },
    'settings' => { name: 'settings', execute: [Function: execute] },
    'slots' => {
      name: 'slots',
      description: 'play some games',
      execute: [Function: execute]
    },
    'tictactoe' => {
      name: 'tictactoe',
      description: 'play tictactoe!',
      expectedArgs: '<opponent>',
      minArgs: 1,
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'addfakemember' => { name: 'addfakemember', execute: [Function: execute] },
    'change_status' => { name: 'change_status', execute: [Function: execute] },
    'dev' => {
      name: 'dev',
      description: 'be a dev by completing a form!',
      execute: [AsyncFunction: execute]
    },
    'help' => {
      name: 'help',
      aliases: [Array],
      description: 'List all of my commands or info about a specific command.',
      usage: '[command name]',
      cooldown: 5,
      execute: [Function: execute]
    },
    'ping' => {
      name: 'ping',
      description: 'Ping!',
      execute: [Function: execute]
    },
    'poll' => {
      name: 'poll',
      description: 'poll',
      usage: 'Title + Option 1 + Option 2 + Option 3 + etc',
      execute: [Function: execute]
    },
    'server' => {
      name: 'server',
      aliases: [Array],
      description: 'servers info...',
      cooldown: 5,
      guildOnly: true,
      args: false,
      execute: [Function: execute]
    },
    'suggest' => {
      name: 'suggest',
      description: 'suggest',
      usage: '<suggestion>',
      execute: [Function: execute]
    },
    'ban' => {
      name: 'ban',
      description: 'This command bans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'giverole' => {
      name: 'giverole',
      description: 'give someone a role',
      permission: 'MANAGE_MEMBERS',
      guildOnly: true,
      execute: [Function: execute]
    },
    'kick' => {
      name: 'kick',
      permissions: 'KICK_MEMBERS',
      description: 'this command kicks a member',
      execute: [Function: execute]
    },
    'mute' => {
      name: 'mute',
      description: 'mute someone',
      permissions: 'MANAGE_MESSAGES',
      guildOnly: true,
      execute: [Function: execute]
    },
    'reload' => {
      name: 'reload',
      description: 'Reloads a command',
      args: true,
      execute: [Function: execute]
    },
    'removerole' => {
      name: 'removerole',
      description: "remove someone's role",
      execute: [Function: execute]
    },
    'unban' => {
      name: 'unban',
      description: 'This command unbans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'back' => { name: 'back', aliases: [], execute: [AsyncFunction: execute] },
    'clear' => { name: 'clear', aliases: [], execute: [AsyncFunction: execute] },
    'filter' => {
      name: 'filter',
      aliases: [],
      usage: 'filter [filter name]',
      execute: [AsyncFunction: execute]
    },
    'loop' => {
      name: 'loop',
      aliases: [],
      usage: 'loop [song|queue]',
      execute: [Function: execute]
    },
    'nowplaying' => {
      name: 'nowplaying',
      aliases: [Array],
      execute: [Function: execute]
    },
    'pause' => { name: 'pause', aliases: [], execute: [Function: execute] },
    'play' => {
      name: 'play',
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'progress' => {
      name: 'progress',
      aliases: [Array],
      utilisation: 'progress',
      voiceChannel: true,
      execute: [AsyncFunction: execute]
    },
    'queue' => {
      name: 'queue',
      aliases: [Array],
      utilisation: '{prefix}queue',
      voiceChannel: true,
      execute: [Function: execute]
    },
    'remove' => { name: 'remove', aliases: [], execute: [AsyncFunction: execute] },
    'resume' => { name: 'resume', aliases: [], execute: [Function: execute] },
    'save' => { name: 'save', aliases: [], execute: [AsyncFunction: execute] },
    'skip' => { name: 'skip', aliases: [Array], execute: [Function: execute] },
    'stop' => { name: 'stop', aliases: [Array], execute: [Function: execute] },
    'volume' => {
      name: 'volume',
      aliases: [Array],
      utilisation: 'volume [1-250]',
      voiceChannel: true,
      execute: [Function: execute]
    }
  },
  cooldowns: Collection(10) [Map] {
    'ping' => Collection(0) [Map] {},
    'play' => Collection(1) [Map] { '709950767670493275' => 1645589748714 },
    'skip' => Collection(0) [Map] {},
    'queue' => Collection(0) [Map] {},
    'remove' => Collection(0) [Map] {},
    'search' => Collection(0) [Map] {},
    'stop' => Collection(0) [Map] {},
    'nowplaying' => Collection(0) [Map] {},
    'loop' => Collection(0) [Map] {},
    'progress' => Collection(0) [Map] {}
  },
  player: Player {
    _events: [Object: null prototype] {
      error: [Function (anonymous)],
      connectionError: [Function (anonymous)],
      trackStart: [Function (anonymous)],
      trackAdd: [Function (anonymous)],
      botDisconnect: [Function (anonymous)],
      channelEmpty: [Function (anonymous)],
      queueEnd: [Function (anonymous)]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    options: {
      autoRegisterExtractor: true,
      ytdlOptions: [Object],
      connectionTimeout: 20000
    },
    queues: Collection(1) [Map] { '893532780946919536' => [Queue] },
    voiceUtils: VoiceUtils { cache: [Collection [Map]] },
    extractors: Collection(0) [Map] {},
    requiredEvents: [ 'error', 'connectionError' ],
    client: [Circular *1],
    [Symbol(kCapture)]: false
  },
  [Symbol(kCapture)]: false
}
Ready!
Ready!
{ cooldown: false, time: null, amount: 56 }
<ref *1> Client {
  _events: [Object: null prototype] {
    shardDisconnect: [Function (anonymous)],
    voiceStateUpdate: [Function: bound _handleVoiceState],
    guildMemberAdd: [Function (anonymous)],
    message: [Function (anonymous)],
    ready: [Function (anonymous)]
  },
  _eventsCount: 5,
  _maxListeners: undefined,
  options: {
    intents: 643,
    waitGuildTimeout: 15000,
    shardCount: 1,
    makeCache: [Function (anonymous)],
    messageCacheLifetime: 0,
    messageSweepInterval: 0,
    invalidRequestWarningInterval: 0,
    partials: [],
    restWsBridgeTimeout: 5000,
    restRequestTimeout: 15000,
    restGlobalRateLimit: 0,
    retryLimit: 1,
    restTimeOffset: 500,
    restSweepInterval: 60,
    failIfNotExists: true,
    userAgentSuffix: [],
    presence: { status: 'online', user: [Object] },
    sweepers: {},
    ws: {
      large_threshold: 50,
      compress: false,
      properties: [Object],
      version: 9,
      presence: [Object]
    },
    http: {
      agent: {},
      version: 9,
      api: 'https://discord.com/api',
      cdn: 'https://cdn.discordapp.com',
      invite: 'https://discord.gg',
      template: 'https://discord.new',
      scheduledEvent: 'https://discord.com/events'
    },
    shards: [ 0 ]
  },
  rest: RESTManager {
    client: [Circular *1],
    handlers: Collection(0) [Map] {},
    versioned: true,
    globalLimit: Infinity,
    globalRemaining: Infinity,
    globalReset: 1645602021002,
    globalDelay: null,
    sweepInterval: Timeout {
      _idleTimeout: 60000,
      _idlePrev: [Timeout],
      _idleNext: [TimersList],
      _idleStart: 62809,
      _onTimeout: [Function (anonymous)],
      _timerArgs: undefined,
      _repeat: 60000,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(kHasPrimitive)]: false,
      [Symbol(asyncId)]: 12,
      [Symbol(triggerId)]: 1
    }
  },
  _cleanups: Set(50) {
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ]
  },
  _finalizers: FinalizationRegistry {},
  ws: WebSocketManager {
    _events: [Object: null prototype] {},
    _eventsCount: 0,
    _maxListeners: undefined,
    gateway: 'wss://gateway.discord.gg/',
    totalShards: 1,
    shards: Collection(1) [Map] { 0 => [WebSocketShard] },
    status: 0,
    destroyed: false,
    reconnecting: false,
    [Symbol(kCapture)]: false
  },
  actions: ActionsManager {
    client: [Circular *1],
    ChannelCreate: ChannelCreateAction { client: [Circular *1] },
    ChannelDelete: ChannelDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    ChannelUpdate: ChannelUpdateAction { client: [Circular *1] },
    GuildBanAdd: GuildBanAdd { client: [Circular *1] },
    GuildBanRemove: GuildBanRemove { client: [Circular *1] },
    GuildChannelsPositionUpdate: GuildChannelsPositionUpdate { client: [Circular *1] },
    GuildDelete: GuildDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    GuildEmojiCreate: GuildEmojiCreateAction { client: [Circular *1] },
    GuildEmojiDelete: GuildEmojiDeleteAction { client: [Circular *1] },
    GuildEmojiUpdate: GuildEmojiUpdateAction { client: [Circular *1] },
    GuildEmojisUpdate: GuildEmojisUpdateAction { client: [Circular *1] },
    GuildIntegrationsUpdate: GuildIntegrationsUpdate { client: [Circular *1] },
    GuildMemberRemove: GuildMemberRemoveAction { client: [Circular *1] },
    GuildMemberUpdate: GuildMemberUpdateAction { client: [Circular *1] },
    GuildRoleCreate: GuildRoleCreate { client: [Circular *1] },
    GuildRoleDelete: GuildRoleDeleteAction { client: [Circular *1] },
    GuildRoleUpdate: GuildRoleUpdateAction { client: [Circular *1] },
    GuildRolesPositionUpdate: GuildRolesPositionUpdate { client: [Circular *1] },
    GuildScheduledEventCreate: GuildScheduledEventCreateAction { client: [Circular *1] },
    GuildScheduledEventDelete: GuildScheduledEventDeleteAction { client: [Circular *1] },
    GuildScheduledEventUpdate: GuildScheduledEventUpdateAction { client: [Circular *1] },
    GuildScheduledEventUserAdd: GuildScheduledEventUserAddAction { client: [Circular *1] },
    GuildScheduledEventUserRemove: GuildScheduledEventUserRemoveAction { client: [Circular *1] },
    GuildStickerCreate: GuildStickerCreateAction { client: [Circular *1] },
    GuildStickerDelete: GuildStickerDeleteAction { client: [Circular *1] },
    GuildStickerUpdate: GuildStickerUpdateAction { client: [Circular *1] },
    GuildStickersUpdate: GuildStickersUpdateAction { client: [Circular *1] },
    GuildUpdate: GuildUpdateAction { client: [Circular *1] },
    InteractionCreate: InteractionCreateAction { client: [Circular *1] },
    InviteCreate: InviteCreateAction { client: [Circular *1] },
    InviteDelete: InviteDeleteAction { client: [Circular *1] },
    MessageCreate: MessageCreateAction { client: [Circular *1] },
    MessageDelete: MessageDeleteAction { client: [Circular *1] },
    MessageDeleteBulk: MessageDeleteBulkAction { client: [Circular *1] },
    MessageReactionAdd: MessageReactionAdd { client: [Circular *1] },
    MessageReactionRemove: MessageReactionRemove { client: [Circular *1] },
    MessageReactionRemoveAll: MessageReactionRemoveAll { client: [Circular *1] },
    MessageReactionRemoveEmoji: MessageReactionRemoveEmoji { client: [Circular *1] },
    MessageUpdate: MessageUpdateAction { client: [Circular *1] },
    PresenceUpdate: PresenceUpdateAction { client: [Circular *1] },
    StageInstanceCreate: StageInstanceCreateAction { client: [Circular *1] },
    StageInstanceDelete: StageInstanceDeleteAction { client: [Circular *1] },
    StageInstanceUpdate: StageInstanceUpdateAction { client: [Circular *1] },
    ThreadCreate: ThreadCreateAction { client: [Circular *1] },
    ThreadDelete: ThreadDeleteAction { client: [Circular *1] },
    ThreadListSync: ThreadListSyncAction { client: [Circular *1] },
    ThreadMemberUpdate: ThreadMemberUpdateAction { client: [Circular *1] },
    ThreadMembersUpdate: ThreadMembersUpdateAction { client: [Circular *1] },
    TypingStart: TypingStart { client: [Circular *1] },
    UserUpdate: UserUpdateAction { client: [Circular *1] },
    VoiceStateUpdate: VoiceStateUpdate { client: [Circular *1] },
    WebhooksUpdate: WebhooksUpdate { client: [Circular *1] }
  },
  voice: ClientVoiceManager { adapters: Map(0) {} },
  shard: null,
  users: UserManager {},
  guilds: GuildManager {},
  channels: ChannelManager {},
  sweepers: Sweepers {
    options: {},
    intervals: {
      applicationCommands: null,
      bans: null,
      emojis: null,
      invites: null,
      guildMembers: null,
      messages: null,
      presences: null,
      reactions: null,
      stageInstances: null,
      stickers: null,
      threadMembers: null,
      threads: null,
      users: null,
      voiceStates: null
    }
  },
  presence: ClientPresence {
    userId: null,
    guild: null,
    status: 'online',
    activities: [],
    clientStatus: null
  },
  user: ClientUser {
    id: '894060283373449317',
    bot: true,
    system: false,
    flags: UserFlags { bitfield: 0 },
    username: 'Potato bot',
    discriminator: '1627',
    avatar: 'f169fbb08deede7893419429cf1bc9ab',
    banner: null,
    accentColor: null,
    verified: true,
    mfaEnabled: false
  },
  application: ClientApplication {
    id: '894060283373449317',
    name: null,
    description: null,
    icon: null,
    flags: ApplicationFlags { bitfield: 303104 },
    cover: null,
    rpcOrigins: [],
    botRequireCodeGrant: null,
    botPublic: null,
    owner: null,
    commands: ApplicationCommandManager {
      permissions: [ApplicationCommandPermissionsManager]
    }
  },
  readyAt: 2022-02-23T07:39:23.549Z,
  eco: EconomyManager {
    noNegative: undefined,
    prefix: undefined,
    adapter: { name: 'sqlite', options: undefined },
    db: SqliteManager {
      table: 'money',
      filename: 'eco',
      sqliteOptions: {},
      hasInit: true,
      db: [Database]
    }
  },
  db: table {
    tableName: 'inv',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  config: {
    token: 'ODk0MDYwMjgzMzczNDQ5MzE3.YVkghg.ik3wBzG3rjGWnsQ_o3S5edt12fM',
    prefix: 'potat',
    admins: [
      '709950767670493275',
      '879207914005479514',
      '829171854681964604'
    ],
    debug: true,
    countChannel: '',
    opt: {
      DJ: [Object],
      maxVol: 250,
      loopMessage: false,
      discordPlayer: [Object]
    }
  },
  shop: { laptop: { cost: 1000 }, potato: { cost: 1 } },
  job: table {
    tableName: 'job',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  commands: Collection(50) [Map] {
    'addmoney' => {
      name: 'addmoney',
      aliases: [Array],
      usage: 'addmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'bal' => {
      name: 'bal',
      aliases: [Array],
      usage: 'bal',
      execute: [AsyncFunction: execute]
    },
    'beg' => {
      name: 'beg',
      aliases: [],
      usage: 'beg',
      execute: [AsyncFunction: execute]
    },
    'buy' => {
      name: 'buy',
      aliases: [],
      usage: 'buy <item>',
      execute: [AsyncFunction: execute]
    },
    'daily' => {
      name: 'daily',
      aliases: [],
      usage: 'daily',
      execute: [AsyncFunction: execute]
    },
    'inventory' => {
      name: 'inventory',
      aliases: [Array],
      usage: 'inv',
      execute: [AsyncFunction: execute]
    },
    'lb' => {
      name: 'lb',
      aliases: [Array],
      usage: 'leaderboard',
      execute: [AsyncFunction: execute]
    },
    'search' => {
      name: 'search',
      aliases: [],
      utilisation: 'search [song name]',
      execute: [AsyncFunction: execute]
    },
    'setmoney' => {
      name: 'setmoney',
      usage: 'setmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'transfer' => {
      name: 'transfer',
      aliases: [Array],
      usage: 'transfer <member> <amount>',
      execute: [AsyncFunction: execute]
    },
    'weekly' => {
      name: 'weekly',
      usage: 'weekly',
      execute: [AsyncFunction: execute]
    },
    'work' => {
      name: 'work',
      aliases: [],
      usage: 'work',
      cooldown: 3600,
      execute: [Function: execute]
    },
    'say' => {
      name: 'say',
      aliases: [Array],
      description: 'make the bot repeat what you said',
      execute: [Function: execute]
    },
    'sayembed' => {
      name: 'sayembed',
      description: 'say something embed',
      usage: '<title, description>',
      execute: [Function: execute]
    },
    'train' => {
      name: 'train',
      description: 'random thing idk',
      execute: [Function: execute]
    },
    'fasttype' => {
      name: 'fasttype',
      description: 'type fast',
      execute: [AsyncFunction: execute]
    },
    'games' => {
      name: 'games',
      description: 'play some games',
      execute: [Function: execute]
    },
    'settings' => { name: 'settings', execute: [Function: execute] },
    'slots' => {
      name: 'slots',
      description: 'play some games',
      execute: [Function: execute]
    },
    'tictactoe' => {
      name: 'tictactoe',
      description: 'play tictactoe!',
      expectedArgs: '<opponent>',
      minArgs: 1,
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'addfakemember' => { name: 'addfakemember', execute: [Function: execute] },
    'change_status' => { name: 'change_status', execute: [Function: execute] },
    'dev' => {
      name: 'dev',
      description: 'be a dev by completing a form!',
      execute: [AsyncFunction: execute]
    },
    'help' => {
      name: 'help',
      aliases: [Array],
      description: 'List all of my commands or info about a specific command.',
      usage: '[command name]',
      cooldown: 5,
      execute: [Function: execute]
    },
    'ping' => {
      name: 'ping',
      description: 'Ping!',
      execute: [Function: execute]
    },
    'poll' => {
      name: 'poll',
      description: 'poll',
      usage: 'Title + Option 1 + Option 2 + Option 3 + etc',
      execute: [Function: execute]
    },
    'server' => {
      name: 'server',
      aliases: [Array],
      description: 'servers info...',
      cooldown: 5,
      guildOnly: true,
      args: false,
      execute: [Function: execute]
    },
    'suggest' => {
      name: 'suggest',
      description: 'suggest',
      usage: '<suggestion>',
      execute: [Function: execute]
    },
    'ban' => {
      name: 'ban',
      description: 'This command bans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'giverole' => {
      name: 'giverole',
      description: 'give someone a role',
      permission: 'MANAGE_MEMBERS',
      guildOnly: true,
      execute: [Function: execute]
    },
    'kick' => {
      name: 'kick',
      permissions: 'KICK_MEMBERS',
      description: 'this command kicks a member',
      execute: [Function: execute]
    },
    'mute' => {
      name: 'mute',
      description: 'mute someone',
      permissions: 'MANAGE_MESSAGES',
      guildOnly: true,
      execute: [Function: execute]
    },
    'reload' => {
      name: 'reload',
      description: 'Reloads a command',
      args: true,
      execute: [Function: execute]
    },
    'removerole' => {
      name: 'removerole',
      description: "remove someone's role",
      execute: [Function: execute]
    },
    'unban' => {
      name: 'unban',
      description: 'This command unbans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'back' => { name: 'back', aliases: [], execute: [AsyncFunction: execute] },
    'clear' => { name: 'clear', aliases: [], execute: [AsyncFunction: execute] },
    'filter' => {
      name: 'filter',
      aliases: [],
      usage: 'filter [filter name]',
      execute: [AsyncFunction: execute]
    },
    'loop' => {
      name: 'loop',
      aliases: [],
      usage: 'loop [song|queue]',
      execute: [Function: execute]
    },
    'nowplaying' => {
      name: 'nowplaying',
      aliases: [Array],
      execute: [Function: execute]
    },
    'pause' => { name: 'pause', aliases: [], execute: [Function: execute] },
    'play' => {
      name: 'play',
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'progress' => {
      name: 'progress',
      aliases: [Array],
      utilisation: 'progress',
      voiceChannel: true,
      execute: [AsyncFunction: execute]
    },
    'queue' => {
      name: 'queue',
      aliases: [Array],
      utilisation: '{prefix}queue',
      voiceChannel: true,
      execute: [Function: execute]
    },
    'remove' => { name: 'remove', aliases: [], execute: [AsyncFunction: execute] },
    'resume' => { name: 'resume', aliases: [], execute: [Function: execute] },
    'save' => { name: 'save', aliases: [], execute: [AsyncFunction: execute] },
    'skip' => { name: 'skip', aliases: [Array], execute: [Function: execute] },
    'stop' => { name: 'stop', aliases: [Array], execute: [Function: execute] },
    'volume' => {
      name: 'volume',
      aliases: [Array],
      utilisation: 'volume [1-250]',
      voiceChannel: true,
      execute: [Function: execute]
    }
  },
  cooldowns: Collection(4) [Map] {
    'ping' => Collection(0) [Map] {},
    'skip' => Collection(0) [Map] {},
    'beg' => Collection(0) [Map] {},
    'play' => Collection(1) [Map] { '709950767670493275' => 1645602080171 }
  },
  player: Player {
    _events: [Object: null prototype] {
      error: [Function (anonymous)],
      connectionError: [Function (anonymous)],
      trackStart: [Function (anonymous)],
      trackAdd: [Function (anonymous)],
      botDisconnect: [Function (anonymous)],
      channelEmpty: [Function (anonymous)],
      queueEnd: [Function (anonymous)]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    options: {
      autoRegisterExtractor: true,
      ytdlOptions: [Object],
      connectionTimeout: 20000
    },
    queues: Collection(0) [Map] {},
    voiceUtils: VoiceUtils { cache: Collection(0) [Map] {} },
    extractors: Collection(0) [Map] {},
    requiredEvents: [ 'error', 'connectionError' ],
    client: [Circular *1],
    [Symbol(kCapture)]: false
  },
  [Symbol(kCapture)]: false
}
<ref *1> Client {
  _events: [Object: null prototype] {
    shardDisconnect: [Function (anonymous)],
    voiceStateUpdate: [Function: bound _handleVoiceState],
    guildMemberAdd: [Function (anonymous)],
    message: [Function (anonymous)],
    ready: [Function (anonymous)]
  },
  _eventsCount: 5,
  _maxListeners: undefined,
  options: {
    intents: 643,
    waitGuildTimeout: 15000,
    shardCount: 1,
    makeCache: [Function (anonymous)],
    messageCacheLifetime: 0,
    messageSweepInterval: 0,
    invalidRequestWarningInterval: 0,
    partials: [],
    restWsBridgeTimeout: 5000,
    restRequestTimeout: 15000,
    restGlobalRateLimit: 0,
    retryLimit: 1,
    restTimeOffset: 500,
    restSweepInterval: 60,
    failIfNotExists: true,
    userAgentSuffix: [],
    presence: { status: 'online', user: [Object] },
    sweepers: {},
    ws: {
      large_threshold: 50,
      compress: false,
      properties: [Object],
      version: 9,
      presence: [Object]
    },
    http: {
      agent: {},
      version: 9,
      api: 'https://discord.com/api',
      cdn: 'https://cdn.discordapp.com',
      invite: 'https://discord.gg',
      template: 'https://discord.new',
      scheduledEvent: 'https://discord.com/events'
    },
    shards: [ 0 ]
  },
  rest: RESTManager {
    client: [Circular *1],
    handlers: Collection(1) [Map] {
      '/channels/894764535892819988/messages' => [RequestHandler]
    },
    versioned: true,
    globalLimit: Infinity,
    globalRemaining: Infinity,
    globalReset: 1645602113764,
    globalDelay: null,
    sweepInterval: Timeout {
      _idleTimeout: 60000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 122811,
      _onTimeout: [Function (anonymous)],
      _timerArgs: undefined,
      _repeat: 60000,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(kHasPrimitive)]: false,
      [Symbol(asyncId)]: 12,
      [Symbol(triggerId)]: 1
    }
  },
  _cleanups: Set(50) {
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ]
  },
  _finalizers: FinalizationRegistry {},
  ws: WebSocketManager {
    _events: [Object: null prototype] {},
    _eventsCount: 0,
    _maxListeners: undefined,
    gateway: 'wss://gateway.discord.gg/',
    totalShards: 1,
    shards: Collection(1) [Map] { 0 => [WebSocketShard] },
    status: 0,
    destroyed: false,
    reconnecting: false,
    [Symbol(kCapture)]: false
  },
  actions: ActionsManager {
    client: [Circular *1],
    ChannelCreate: ChannelCreateAction { client: [Circular *1] },
    ChannelDelete: ChannelDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    ChannelUpdate: ChannelUpdateAction { client: [Circular *1] },
    GuildBanAdd: GuildBanAdd { client: [Circular *1] },
    GuildBanRemove: GuildBanRemove { client: [Circular *1] },
    GuildChannelsPositionUpdate: GuildChannelsPositionUpdate { client: [Circular *1] },
    GuildDelete: GuildDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    GuildEmojiCreate: GuildEmojiCreateAction { client: [Circular *1] },
    GuildEmojiDelete: GuildEmojiDeleteAction { client: [Circular *1] },
    GuildEmojiUpdate: GuildEmojiUpdateAction { client: [Circular *1] },
    GuildEmojisUpdate: GuildEmojisUpdateAction { client: [Circular *1] },
    GuildIntegrationsUpdate: GuildIntegrationsUpdate { client: [Circular *1] },
    GuildMemberRemove: GuildMemberRemoveAction { client: [Circular *1] },
    GuildMemberUpdate: GuildMemberUpdateAction { client: [Circular *1] },
    GuildRoleCreate: GuildRoleCreate { client: [Circular *1] },
    GuildRoleDelete: GuildRoleDeleteAction { client: [Circular *1] },
    GuildRoleUpdate: GuildRoleUpdateAction { client: [Circular *1] },
    GuildRolesPositionUpdate: GuildRolesPositionUpdate { client: [Circular *1] },
    GuildScheduledEventCreate: GuildScheduledEventCreateAction { client: [Circular *1] },
    GuildScheduledEventDelete: GuildScheduledEventDeleteAction { client: [Circular *1] },
    GuildScheduledEventUpdate: GuildScheduledEventUpdateAction { client: [Circular *1] },
    GuildScheduledEventUserAdd: GuildScheduledEventUserAddAction { client: [Circular *1] },
    GuildScheduledEventUserRemove: GuildScheduledEventUserRemoveAction { client: [Circular *1] },
    GuildStickerCreate: GuildStickerCreateAction { client: [Circular *1] },
    GuildStickerDelete: GuildStickerDeleteAction { client: [Circular *1] },
    GuildStickerUpdate: GuildStickerUpdateAction { client: [Circular *1] },
    GuildStickersUpdate: GuildStickersUpdateAction { client: [Circular *1] },
    GuildUpdate: GuildUpdateAction { client: [Circular *1] },
    InteractionCreate: InteractionCreateAction { client: [Circular *1] },
    InviteCreate: InviteCreateAction { client: [Circular *1] },
    InviteDelete: InviteDeleteAction { client: [Circular *1] },
    MessageCreate: MessageCreateAction { client: [Circular *1] },
    MessageDelete: MessageDeleteAction { client: [Circular *1] },
    MessageDeleteBulk: MessageDeleteBulkAction { client: [Circular *1] },
    MessageReactionAdd: MessageReactionAdd { client: [Circular *1] },
    MessageReactionRemove: MessageReactionRemove { client: [Circular *1] },
    MessageReactionRemoveAll: MessageReactionRemoveAll { client: [Circular *1] },
    MessageReactionRemoveEmoji: MessageReactionRemoveEmoji { client: [Circular *1] },
    MessageUpdate: MessageUpdateAction { client: [Circular *1] },
    PresenceUpdate: PresenceUpdateAction { client: [Circular *1] },
    StageInstanceCreate: StageInstanceCreateAction { client: [Circular *1] },
    StageInstanceDelete: StageInstanceDeleteAction { client: [Circular *1] },
    StageInstanceUpdate: StageInstanceUpdateAction { client: [Circular *1] },
    ThreadCreate: ThreadCreateAction { client: [Circular *1] },
    ThreadDelete: ThreadDeleteAction { client: [Circular *1] },
    ThreadListSync: ThreadListSyncAction { client: [Circular *1] },
    ThreadMemberUpdate: ThreadMemberUpdateAction { client: [Circular *1] },
    ThreadMembersUpdate: ThreadMembersUpdateAction { client: [Circular *1] },
    TypingStart: TypingStart { client: [Circular *1] },
    UserUpdate: UserUpdateAction { client: [Circular *1] },
    VoiceStateUpdate: VoiceStateUpdate { client: [Circular *1] },
    WebhooksUpdate: WebhooksUpdate { client: [Circular *1] }
  },
  voice: ClientVoiceManager {
    adapters: Map(1) { '893532780946919536' => [Object] }
  },
  shard: null,
  users: UserManager {},
  guilds: GuildManager {},
  channels: ChannelManager {},
  sweepers: Sweepers {
    options: {},
    intervals: {
      applicationCommands: null,
      bans: null,
      emojis: null,
      invites: null,
      guildMembers: null,
      messages: null,
      presences: null,
      reactions: null,
      stageInstances: null,
      stickers: null,
      threadMembers: null,
      threads: null,
      users: null,
      voiceStates: null
    }
  },
  presence: ClientPresence {
    userId: null,
    guild: null,
    status: 'online',
    activities: [],
    clientStatus: null
  },
  user: ClientUser {
    id: '894060283373449317',
    bot: true,
    system: false,
    flags: UserFlags { bitfield: 0 },
    username: 'Potato bot',
    discriminator: '1627',
    avatar: 'f169fbb08deede7893419429cf1bc9ab',
    banner: null,
    accentColor: null,
    verified: true,
    mfaEnabled: false
  },
  application: ClientApplication {
    id: '894060283373449317',
    name: null,
    description: null,
    icon: null,
    flags: ApplicationFlags { bitfield: 303104 },
    cover: null,
    rpcOrigins: [],
    botRequireCodeGrant: null,
    botPublic: null,
    owner: null,
    commands: ApplicationCommandManager {
      permissions: [ApplicationCommandPermissionsManager]
    }
  },
  readyAt: 2022-02-23T07:39:23.549Z,
  eco: EconomyManager {
    noNegative: undefined,
    prefix: undefined,
    adapter: { name: 'sqlite', options: undefined },
    db: SqliteManager {
      table: 'money',
      filename: 'eco',
      sqliteOptions: {},
      hasInit: true,
      db: [Database]
    }
  },
  db: table {
    tableName: 'inv',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  config: {
    token: 'ODk0MDYwMjgzMzczNDQ5MzE3.YVkghg.ik3wBzG3rjGWnsQ_o3S5edt12fM',
    prefix: 'potat',
    admins: [
      '709950767670493275',
      '879207914005479514',
      '829171854681964604'
    ],
    debug: true,
    countChannel: '',
    opt: {
      DJ: [Object],
      maxVol: 250,
      loopMessage: false,
      discordPlayer: [Object]
    }
  },
  shop: { laptop: { cost: 1000 }, potato: { cost: 1 } },
  job: table {
    tableName: 'job',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  commands: Collection(50) [Map] {
    'addmoney' => {
      name: 'addmoney',
      aliases: [Array],
      usage: 'addmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'bal' => {
      name: 'bal',
      aliases: [Array],
      usage: 'bal',
      execute: [AsyncFunction: execute]
    },
    'beg' => {
      name: 'beg',
      aliases: [],
      usage: 'beg',
      execute: [AsyncFunction: execute]
    },
    'buy' => {
      name: 'buy',
      aliases: [],
      usage: 'buy <item>',
      execute: [AsyncFunction: execute]
    },
    'daily' => {
      name: 'daily',
      aliases: [],
      usage: 'daily',
      execute: [AsyncFunction: execute]
    },
    'inventory' => {
      name: 'inventory',
      aliases: [Array],
      usage: 'inv',
      execute: [AsyncFunction: execute]
    },
    'lb' => {
      name: 'lb',
      aliases: [Array],
      usage: 'leaderboard',
      execute: [AsyncFunction: execute]
    },
    'search' => {
      name: 'search',
      aliases: [],
      utilisation: 'search [song name]',
      execute: [AsyncFunction: execute]
    },
    'setmoney' => {
      name: 'setmoney',
      usage: 'setmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'transfer' => {
      name: 'transfer',
      aliases: [Array],
      usage: 'transfer <member> <amount>',
      execute: [AsyncFunction: execute]
    },
    'weekly' => {
      name: 'weekly',
      usage: 'weekly',
      execute: [AsyncFunction: execute]
    },
    'work' => {
      name: 'work',
      aliases: [],
      usage: 'work',
      cooldown: 3600,
      execute: [Function: execute]
    },
    'say' => {
      name: 'say',
      aliases: [Array],
      description: 'make the bot repeat what you said',
      execute: [Function: execute]
    },
    'sayembed' => {
      name: 'sayembed',
      description: 'say something embed',
      usage: '<title, description>',
      execute: [Function: execute]
    },
    'train' => {
      name: 'train',
      description: 'random thing idk',
      execute: [Function: execute]
    },
    'fasttype' => {
      name: 'fasttype',
      description: 'type fast',
      execute: [AsyncFunction: execute]
    },
    'games' => {
      name: 'games',
      description: 'play some games',
      execute: [Function: execute]
    },
    'settings' => { name: 'settings', execute: [Function: execute] },
    'slots' => {
      name: 'slots',
      description: 'play some games',
      execute: [Function: execute]
    },
    'tictactoe' => {
      name: 'tictactoe',
      description: 'play tictactoe!',
      expectedArgs: '<opponent>',
      minArgs: 1,
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'addfakemember' => { name: 'addfakemember', execute: [Function: execute] },
    'change_status' => { name: 'change_status', execute: [Function: execute] },
    'dev' => {
      name: 'dev',
      description: 'be a dev by completing a form!',
      execute: [AsyncFunction: execute]
    },
    'help' => {
      name: 'help',
      aliases: [Array],
      description: 'List all of my commands or info about a specific command.',
      usage: '[command name]',
      cooldown: 5,
      execute: [Function: execute]
    },
    'ping' => {
      name: 'ping',
      description: 'Ping!',
      execute: [Function: execute]
    },
    'poll' => {
      name: 'poll',
      description: 'poll',
      usage: 'Title + Option 1 + Option 2 + Option 3 + etc',
      execute: [Function: execute]
    },
    'server' => {
      name: 'server',
      aliases: [Array],
      description: 'servers info...',
      cooldown: 5,
      guildOnly: true,
      args: false,
      execute: [Function: execute]
    },
    'suggest' => {
      name: 'suggest',
      description: 'suggest',
      usage: '<suggestion>',
      execute: [Function: execute]
    },
    'ban' => {
      name: 'ban',
      description: 'This command bans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'giverole' => {
      name: 'giverole',
      description: 'give someone a role',
      permission: 'MANAGE_MEMBERS',
      guildOnly: true,
      execute: [Function: execute]
    },
    'kick' => {
      name: 'kick',
      permissions: 'KICK_MEMBERS',
      description: 'this command kicks a member',
      execute: [Function: execute]
    },
    'mute' => {
      name: 'mute',
      description: 'mute someone',
      permissions: 'MANAGE_MESSAGES',
      guildOnly: true,
      execute: [Function: execute]
    },
    'reload' => {
      name: 'reload',
      description: 'Reloads a command',
      args: true,
      execute: [Function: execute]
    },
    'removerole' => {
      name: 'removerole',
      description: "remove someone's role",
      execute: [Function: execute]
    },
    'unban' => {
      name: 'unban',
      description: 'This command unbans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'back' => { name: 'back', aliases: [], execute: [AsyncFunction: execute] },
    'clear' => { name: 'clear', aliases: [], execute: [AsyncFunction: execute] },
    'filter' => {
      name: 'filter',
      aliases: [],
      usage: 'filter [filter name]',
      execute: [AsyncFunction: execute]
    },
    'loop' => {
      name: 'loop',
      aliases: [],
      usage: 'loop [song|queue]',
      execute: [Function: execute]
    },
    'nowplaying' => {
      name: 'nowplaying',
      aliases: [Array],
      execute: [Function: execute]
    },
    'pause' => { name: 'pause', aliases: [], execute: [Function: execute] },
    'play' => {
      name: 'play',
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'progress' => {
      name: 'progress',
      aliases: [Array],
      utilisation: 'progress',
      voiceChannel: true,
      execute: [AsyncFunction: execute]
    },
    'queue' => {
      name: 'queue',
      aliases: [Array],
      utilisation: '{prefix}queue',
      voiceChannel: true,
      execute: [Function: execute]
    },
    'remove' => { name: 'remove', aliases: [], execute: [AsyncFunction: execute] },
    'resume' => { name: 'resume', aliases: [], execute: [Function: execute] },
    'save' => { name: 'save', aliases: [], execute: [AsyncFunction: execute] },
    'skip' => { name: 'skip', aliases: [Array], execute: [Function: execute] },
    'stop' => { name: 'stop', aliases: [Array], execute: [Function: execute] },
    'volume' => {
      name: 'volume',
      aliases: [Array],
      utilisation: 'volume [1-250]',
      voiceChannel: true,
      execute: [Function: execute]
    }
  },
  cooldowns: Collection(5) [Map] {
    'ping' => Collection(0) [Map] {},
    'skip' => Collection(0) [Map] {},
    'beg' => Collection(0) [Map] {},
    'play' => Collection(1) [Map] { '709950767670493275' => 1645602121517 },
    'queue' => Collection(0) [Map] {}
  },
  player: Player {
    _events: [Object: null prototype] {
      error: [Function (anonymous)],
      connectionError: [Function (anonymous)],
      trackStart: [Function (anonymous)],
      trackAdd: [Function (anonymous)],
      botDisconnect: [Function (anonymous)],
      channelEmpty: [Function (anonymous)],
      queueEnd: [Function (anonymous)]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    options: {
      autoRegisterExtractor: true,
      ytdlOptions: [Object],
      connectionTimeout: 20000
    },
    queues: Collection(1) [Map] { '893532780946919536' => [Queue] },
    voiceUtils: VoiceUtils { cache: [Collection [Map]] },
    extractors: Collection(0) [Map] {},
    requiredEvents: [ 'error', 'connectionError' ],
    client: [Circular *1],
    [Symbol(kCapture)]: false
  },
  [Symbol(kCapture)]: false
}
<ref *1> Client {
  _events: [Object: null prototype] {
    shardDisconnect: [Function (anonymous)],
    voiceStateUpdate: [Function: bound _handleVoiceState],
    guildMemberAdd: [Function (anonymous)],
    message: [Function (anonymous)],
    ready: [Function (anonymous)]
  },
  _eventsCount: 5,
  _maxListeners: undefined,
  options: {
    intents: 643,
    waitGuildTimeout: 15000,
    shardCount: 1,
    makeCache: [Function (anonymous)],
    messageCacheLifetime: 0,
    messageSweepInterval: 0,
    invalidRequestWarningInterval: 0,
    partials: [],
    restWsBridgeTimeout: 5000,
    restRequestTimeout: 15000,
    restGlobalRateLimit: 0,
    retryLimit: 1,
    restTimeOffset: 500,
    restSweepInterval: 60,
    failIfNotExists: true,
    userAgentSuffix: [],
    presence: { status: 'online', user: [Object] },
    sweepers: {},
    ws: {
      large_threshold: 50,
      compress: false,
      properties: [Object],
      version: 9,
      presence: [Object]
    },
    http: {
      agent: {},
      version: 9,
      api: 'https://discord.com/api',
      cdn: 'https://cdn.discordapp.com',
      invite: 'https://discord.gg',
      template: 'https://discord.new',
      scheduledEvent: 'https://discord.com/events'
    },
    shards: [ 0 ]
  },
  rest: RESTManager {
    client: [Circular *1],
    handlers: Collection(1) [Map] {
      '/channels/894764535892819988/messages' => [RequestHandler]
    },
    versioned: true,
    globalLimit: Infinity,
    globalRemaining: Infinity,
    globalReset: 1645602150354,
    globalDelay: null,
    sweepInterval: Timeout {
      _idleTimeout: 60000,
      _idlePrev: [TimersList],
      _idleNext: [Timeout],
      _idleStart: 182811,
      _onTimeout: [Function (anonymous)],
      _timerArgs: undefined,
      _repeat: 60000,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(kHasPrimitive)]: false,
      [Symbol(asyncId)]: 12,
      [Symbol(triggerId)]: 1
    }
  },
  _cleanups: Set(50) {
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ]
  },
  _finalizers: FinalizationRegistry {},
  ws: WebSocketManager {
    _events: [Object: null prototype] {},
    _eventsCount: 0,
    _maxListeners: undefined,
    gateway: 'wss://gateway.discord.gg/',
    totalShards: 1,
    shards: Collection(1) [Map] { 0 => [WebSocketShard] },
    status: 0,
    destroyed: false,
    reconnecting: false,
    [Symbol(kCapture)]: false
  },
  actions: ActionsManager {
    client: [Circular *1],
    ChannelCreate: ChannelCreateAction { client: [Circular *1] },
    ChannelDelete: ChannelDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    ChannelUpdate: ChannelUpdateAction { client: [Circular *1] },
    GuildBanAdd: GuildBanAdd { client: [Circular *1] },
    GuildBanRemove: GuildBanRemove { client: [Circular *1] },
    GuildChannelsPositionUpdate: GuildChannelsPositionUpdate { client: [Circular *1] },
    GuildDelete: GuildDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    GuildEmojiCreate: GuildEmojiCreateAction { client: [Circular *1] },
    GuildEmojiDelete: GuildEmojiDeleteAction { client: [Circular *1] },
    GuildEmojiUpdate: GuildEmojiUpdateAction { client: [Circular *1] },
    GuildEmojisUpdate: GuildEmojisUpdateAction { client: [Circular *1] },
    GuildIntegrationsUpdate: GuildIntegrationsUpdate { client: [Circular *1] },
    GuildMemberRemove: GuildMemberRemoveAction { client: [Circular *1] },
    GuildMemberUpdate: GuildMemberUpdateAction { client: [Circular *1] },
    GuildRoleCreate: GuildRoleCreate { client: [Circular *1] },
    GuildRoleDelete: GuildRoleDeleteAction { client: [Circular *1] },
    GuildRoleUpdate: GuildRoleUpdateAction { client: [Circular *1] },
    GuildRolesPositionUpdate: GuildRolesPositionUpdate { client: [Circular *1] },
    GuildScheduledEventCreate: GuildScheduledEventCreateAction { client: [Circular *1] },
    GuildScheduledEventDelete: GuildScheduledEventDeleteAction { client: [Circular *1] },
    GuildScheduledEventUpdate: GuildScheduledEventUpdateAction { client: [Circular *1] },
    GuildScheduledEventUserAdd: GuildScheduledEventUserAddAction { client: [Circular *1] },
    GuildScheduledEventUserRemove: GuildScheduledEventUserRemoveAction { client: [Circular *1] },
    GuildStickerCreate: GuildStickerCreateAction { client: [Circular *1] },
    GuildStickerDelete: GuildStickerDeleteAction { client: [Circular *1] },
    GuildStickerUpdate: GuildStickerUpdateAction { client: [Circular *1] },
    GuildStickersUpdate: GuildStickersUpdateAction { client: [Circular *1] },
    GuildUpdate: GuildUpdateAction { client: [Circular *1] },
    InteractionCreate: InteractionCreateAction { client: [Circular *1] },
    InviteCreate: InviteCreateAction { client: [Circular *1] },
    InviteDelete: InviteDeleteAction { client: [Circular *1] },
    MessageCreate: MessageCreateAction { client: [Circular *1] },
    MessageDelete: MessageDeleteAction { client: [Circular *1] },
    MessageDeleteBulk: MessageDeleteBulkAction { client: [Circular *1] },
    MessageReactionAdd: MessageReactionAdd { client: [Circular *1] },
    MessageReactionRemove: MessageReactionRemove { client: [Circular *1] },
    MessageReactionRemoveAll: MessageReactionRemoveAll { client: [Circular *1] },
    MessageReactionRemoveEmoji: MessageReactionRemoveEmoji { client: [Circular *1] },
    MessageUpdate: MessageUpdateAction { client: [Circular *1] },
    PresenceUpdate: PresenceUpdateAction { client: [Circular *1] },
    StageInstanceCreate: StageInstanceCreateAction { client: [Circular *1] },
    StageInstanceDelete: StageInstanceDeleteAction { client: [Circular *1] },
    StageInstanceUpdate: StageInstanceUpdateAction { client: [Circular *1] },
    ThreadCreate: ThreadCreateAction { client: [Circular *1] },
    ThreadDelete: ThreadDeleteAction { client: [Circular *1] },
    ThreadListSync: ThreadListSyncAction { client: [Circular *1] },
    ThreadMemberUpdate: ThreadMemberUpdateAction { client: [Circular *1] },
    ThreadMembersUpdate: ThreadMembersUpdateAction { client: [Circular *1] },
    TypingStart: TypingStart { client: [Circular *1] },
    UserUpdate: UserUpdateAction { client: [Circular *1] },
    VoiceStateUpdate: VoiceStateUpdate { client: [Circular *1] },
    WebhooksUpdate: WebhooksUpdate { client: [Circular *1] }
  },
  voice: ClientVoiceManager { adapters: Map(0) {} },
  shard: null,
  users: UserManager {},
  guilds: GuildManager {},
  channels: ChannelManager {},
  sweepers: Sweepers {
    options: {},
    intervals: {
      applicationCommands: null,
      bans: null,
      emojis: null,
      invites: null,
      guildMembers: null,
      messages: null,
      presences: null,
      reactions: null,
      stageInstances: null,
      stickers: null,
      threadMembers: null,
      threads: null,
      users: null,
      voiceStates: null
    }
  },
  presence: ClientPresence {
    userId: null,
    guild: null,
    status: 'online',
    activities: [],
    clientStatus: null
  },
  user: ClientUser {
    id: '894060283373449317',
    bot: true,
    system: false,
    flags: UserFlags { bitfield: 0 },
    username: 'Potato bot',
    discriminator: '1627',
    avatar: 'f169fbb08deede7893419429cf1bc9ab',
    banner: null,
    accentColor: null,
    verified: true,
    mfaEnabled: false
  },
  application: ClientApplication {
    id: '894060283373449317',
    name: null,
    description: null,
    icon: null,
    flags: ApplicationFlags { bitfield: 303104 },
    cover: null,
    rpcOrigins: [],
    botRequireCodeGrant: null,
    botPublic: null,
    owner: null,
    commands: ApplicationCommandManager {
      permissions: [ApplicationCommandPermissionsManager]
    }
  },
  readyAt: 2022-02-23T07:39:23.549Z,
  eco: EconomyManager {
    noNegative: undefined,
    prefix: undefined,
    adapter: { name: 'sqlite', options: undefined },
    db: SqliteManager {
      table: 'money',
      filename: 'eco',
      sqliteOptions: {},
      hasInit: true,
      db: [Database]
    }
  },
  db: table {
    tableName: 'inv',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  config: {
    token: 'ODk0MDYwMjgzMzczNDQ5MzE3.YVkghg.ik3wBzG3rjGWnsQ_o3S5edt12fM',
    prefix: 'potat',
    admins: [
      '709950767670493275',
      '879207914005479514',
      '829171854681964604'
    ],
    debug: true,
    countChannel: '',
    opt: {
      DJ: [Object],
      maxVol: 250,
      loopMessage: false,
      discordPlayer: [Object]
    }
  },
  shop: { laptop: { cost: 1000 }, potato: { cost: 1 } },
  job: table {
    tableName: 'job',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  commands: Collection(50) [Map] {
    'addmoney' => {
      name: 'addmoney',
      aliases: [Array],
      usage: 'addmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'bal' => {
      name: 'bal',
      aliases: [Array],
      usage: 'bal',
      execute: [AsyncFunction: execute]
    },
    'beg' => {
      name: 'beg',
      aliases: [],
      usage: 'beg',
      execute: [AsyncFunction: execute]
    },
    'buy' => {
      name: 'buy',
      aliases: [],
      usage: 'buy <item>',
      execute: [AsyncFunction: execute]
    },
    'daily' => {
      name: 'daily',
      aliases: [],
      usage: 'daily',
      execute: [AsyncFunction: execute]
    },
    'inventory' => {
      name: 'inventory',
      aliases: [Array],
      usage: 'inv',
      execute: [AsyncFunction: execute]
    },
    'lb' => {
      name: 'lb',
      aliases: [Array],
      usage: 'leaderboard',
      execute: [AsyncFunction: execute]
    },
    'search' => {
      name: 'search',
      aliases: [],
      utilisation: 'search [song name]',
      execute: [AsyncFunction: execute]
    },
    'setmoney' => {
      name: 'setmoney',
      usage: 'setmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'transfer' => {
      name: 'transfer',
      aliases: [Array],
      usage: 'transfer <member> <amount>',
      execute: [AsyncFunction: execute]
    },
    'weekly' => {
      name: 'weekly',
      usage: 'weekly',
      execute: [AsyncFunction: execute]
    },
    'work' => {
      name: 'work',
      aliases: [],
      usage: 'work',
      cooldown: 3600,
      execute: [Function: execute]
    },
    'say' => {
      name: 'say',
      aliases: [Array],
      description: 'make the bot repeat what you said',
      execute: [Function: execute]
    },
    'sayembed' => {
      name: 'sayembed',
      description: 'say something embed',
      usage: '<title, description>',
      execute: [Function: execute]
    },
    'train' => {
      name: 'train',
      description: 'random thing idk',
      execute: [Function: execute]
    },
    'fasttype' => {
      name: 'fasttype',
      description: 'type fast',
      execute: [AsyncFunction: execute]
    },
    'games' => {
      name: 'games',
      description: 'play some games',
      execute: [Function: execute]
    },
    'settings' => { name: 'settings', execute: [Function: execute] },
    'slots' => {
      name: 'slots',
      description: 'play some games',
      execute: [Function: execute]
    },
    'tictactoe' => {
      name: 'tictactoe',
      description: 'play tictactoe!',
      expectedArgs: '<opponent>',
      minArgs: 1,
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'addfakemember' => { name: 'addfakemember', execute: [Function: execute] },
    'change_status' => { name: 'change_status', execute: [Function: execute] },
    'dev' => {
      name: 'dev',
      description: 'be a dev by completing a form!',
      execute: [AsyncFunction: execute]
    },
    'help' => {
      name: 'help',
      aliases: [Array],
      description: 'List all of my commands or info about a specific command.',
      usage: '[command name]',
      cooldown: 5,
      execute: [Function: execute]
    },
    'ping' => {
      name: 'ping',
      description: 'Ping!',
      execute: [Function: execute]
    },
    'poll' => {
      name: 'poll',
      description: 'poll',
      usage: 'Title + Option 1 + Option 2 + Option 3 + etc',
      execute: [Function: execute]
    },
    'server' => {
      name: 'server',
      aliases: [Array],
      description: 'servers info...',
      cooldown: 5,
      guildOnly: true,
      args: false,
      execute: [Function: execute]
    },
    'suggest' => {
      name: 'suggest',
      description: 'suggest',
      usage: '<suggestion>',
      execute: [Function: execute]
    },
    'ban' => {
      name: 'ban',
      description: 'This command bans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'giverole' => {
      name: 'giverole',
      description: 'give someone a role',
      permission: 'MANAGE_MEMBERS',
      guildOnly: true,
      execute: [Function: execute]
    },
    'kick' => {
      name: 'kick',
      permissions: 'KICK_MEMBERS',
      description: 'this command kicks a member',
      execute: [Function: execute]
    },
    'mute' => {
      name: 'mute',
      description: 'mute someone',
      permissions: 'MANAGE_MESSAGES',
      guildOnly: true,
      execute: [Function: execute]
    },
    'reload' => {
      name: 'reload',
      description: 'Reloads a command',
      args: true,
      execute: [Function: execute]
    },
    'removerole' => {
      name: 'removerole',
      description: "remove someone's role",
      execute: [Function: execute]
    },
    'unban' => {
      name: 'unban',
      description: 'This command unbans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'back' => { name: 'back', aliases: [], execute: [AsyncFunction: execute] },
    'clear' => { name: 'clear', aliases: [], execute: [AsyncFunction: execute] },
    'filter' => {
      name: 'filter',
      aliases: [],
      usage: 'filter [filter name]',
      execute: [AsyncFunction: execute]
    },
    'loop' => {
      name: 'loop',
      aliases: [],
      usage: 'loop [song|queue]',
      execute: [Function: execute]
    },
    'nowplaying' => {
      name: 'nowplaying',
      aliases: [Array],
      execute: [Function: execute]
    },
    'pause' => { name: 'pause', aliases: [], execute: [Function: execute] },
    'play' => {
      name: 'play',
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'progress' => {
      name: 'progress',
      aliases: [Array],
      utilisation: 'progress',
      voiceChannel: true,
      execute: [AsyncFunction: execute]
    },
    'queue' => {
      name: 'queue',
      aliases: [Array],
      utilisation: '{prefix}queue',
      voiceChannel: true,
      execute: [Function: execute]
    },
    'remove' => { name: 'remove', aliases: [], execute: [AsyncFunction: execute] },
    'resume' => { name: 'resume', aliases: [], execute: [Function: execute] },
    'save' => { name: 'save', aliases: [], execute: [AsyncFunction: execute] },
    'skip' => { name: 'skip', aliases: [Array], execute: [Function: execute] },
    'stop' => { name: 'stop', aliases: [Array], execute: [Function: execute] },
    'volume' => {
      name: 'volume',
      aliases: [Array],
      utilisation: 'volume [1-250]',
      voiceChannel: true,
      execute: [Function: execute]
    }
  },
  cooldowns: Collection(5) [Map] {
    'ping' => Collection(0) [Map] {},
    'skip' => Collection(0) [Map] {},
    'beg' => Collection(0) [Map] {},
    'play' => Collection(1) [Map] { '709950767670493275' => 1645602176705 },
    'queue' => Collection(0) [Map] {}
  },
  player: Player {
    _events: [Object: null prototype] {
      error: [Function (anonymous)],
      connectionError: [Function (anonymous)],
      trackStart: [Function (anonymous)],
      trackAdd: [Function (anonymous)],
      botDisconnect: [Function (anonymous)],
      channelEmpty: [Function (anonymous)],
      queueEnd: [Function (anonymous)]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    options: {
      autoRegisterExtractor: true,
      ytdlOptions: [Object],
      connectionTimeout: 20000
    },
    queues: Collection(0) [Map] {},
    voiceUtils: VoiceUtils { cache: Collection(0) [Map] {} },
    extractors: Collection(0) [Map] {},
    requiredEvents: [ 'error', 'connectionError' ],
    client: [Circular *1],
    [Symbol(kCapture)]: false
  },
  [Symbol(kCapture)]: false
}
<ref *1> Client {
  _events: [Object: null prototype] {
    shardDisconnect: [Function (anonymous)],
    voiceStateUpdate: [Function: bound _handleVoiceState],
    guildMemberAdd: [Function (anonymous)],
    message: [Function (anonymous)],
    ready: [Function (anonymous)]
  },
  _eventsCount: 5,
  _maxListeners: undefined,
  options: {
    intents: 643,
    waitGuildTimeout: 15000,
    shardCount: 1,
    makeCache: [Function (anonymous)],
    messageCacheLifetime: 0,
    messageSweepInterval: 0,
    invalidRequestWarningInterval: 0,
    partials: [],
    restWsBridgeTimeout: 5000,
    restRequestTimeout: 15000,
    restGlobalRateLimit: 0,
    retryLimit: 1,
    restTimeOffset: 500,
    restSweepInterval: 60,
    failIfNotExists: true,
    userAgentSuffix: [],
    presence: { status: 'online', user: [Object] },
    sweepers: {},
    ws: {
      large_threshold: 50,
      compress: false,
      properties: [Object],
      version: 9,
      presence: [Object]
    },
    http: {
      agent: {},
      version: 9,
      api: 'https://discord.com/api',
      cdn: 'https://cdn.discordapp.com',
      invite: 'https://discord.gg',
      template: 'https://discord.new',
      scheduledEvent: 'https://discord.com/events'
    },
    shards: [ 0 ]
  },
  rest: RESTManager {
    client: [Circular *1],
    handlers: Collection(0) [Map] {},
    versioned: true,
    globalLimit: Infinity,
    globalRemaining: Infinity,
    globalReset: 1645664863109,
    globalDelay: null,
    sweepInterval: Timeout {
      _idleTimeout: 60000,
      _idlePrev: [TimersList],
      _idleNext: [Timeout],
      _idleStart: 63277331,
      _onTimeout: [Function (anonymous)],
      _timerArgs: undefined,
      _repeat: 60000,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(kHasPrimitive)]: false,
      [Symbol(asyncId)]: 12,
      [Symbol(triggerId)]: 1
    }
  },
  _cleanups: Set(50) {
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ]
  },
  _finalizers: FinalizationRegistry {},
  ws: WebSocketManager {
    _events: [Object: null prototype] {},
    _eventsCount: 0,
    _maxListeners: undefined,
    gateway: 'wss://gateway.discord.gg/',
    totalShards: 1,
    shards: Collection(1) [Map] { 0 => [WebSocketShard] },
    status: 0,
    destroyed: false,
    reconnecting: false,
    [Symbol(kCapture)]: false
  },
  actions: ActionsManager {
    client: [Circular *1],
    ChannelCreate: ChannelCreateAction { client: [Circular *1] },
    ChannelDelete: ChannelDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    ChannelUpdate: ChannelUpdateAction { client: [Circular *1] },
    GuildBanAdd: GuildBanAdd { client: [Circular *1] },
    GuildBanRemove: GuildBanRemove { client: [Circular *1] },
    GuildChannelsPositionUpdate: GuildChannelsPositionUpdate { client: [Circular *1] },
    GuildDelete: GuildDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    GuildEmojiCreate: GuildEmojiCreateAction { client: [Circular *1] },
    GuildEmojiDelete: GuildEmojiDeleteAction { client: [Circular *1] },
    GuildEmojiUpdate: GuildEmojiUpdateAction { client: [Circular *1] },
    GuildEmojisUpdate: GuildEmojisUpdateAction { client: [Circular *1] },
    GuildIntegrationsUpdate: GuildIntegrationsUpdate { client: [Circular *1] },
    GuildMemberRemove: GuildMemberRemoveAction { client: [Circular *1] },
    GuildMemberUpdate: GuildMemberUpdateAction { client: [Circular *1] },
    GuildRoleCreate: GuildRoleCreate { client: [Circular *1] },
    GuildRoleDelete: GuildRoleDeleteAction { client: [Circular *1] },
    GuildRoleUpdate: GuildRoleUpdateAction { client: [Circular *1] },
    GuildRolesPositionUpdate: GuildRolesPositionUpdate { client: [Circular *1] },
    GuildScheduledEventCreate: GuildScheduledEventCreateAction { client: [Circular *1] },
    GuildScheduledEventDelete: GuildScheduledEventDeleteAction { client: [Circular *1] },
    GuildScheduledEventUpdate: GuildScheduledEventUpdateAction { client: [Circular *1] },
    GuildScheduledEventUserAdd: GuildScheduledEventUserAddAction { client: [Circular *1] },
    GuildScheduledEventUserRemove: GuildScheduledEventUserRemoveAction { client: [Circular *1] },
    GuildStickerCreate: GuildStickerCreateAction { client: [Circular *1] },
    GuildStickerDelete: GuildStickerDeleteAction { client: [Circular *1] },
    GuildStickerUpdate: GuildStickerUpdateAction { client: [Circular *1] },
    GuildStickersUpdate: GuildStickersUpdateAction { client: [Circular *1] },
    GuildUpdate: GuildUpdateAction { client: [Circular *1] },
    InteractionCreate: InteractionCreateAction { client: [Circular *1] },
    InviteCreate: InviteCreateAction { client: [Circular *1] },
    InviteDelete: InviteDeleteAction { client: [Circular *1] },
    MessageCreate: MessageCreateAction { client: [Circular *1] },
    MessageDelete: MessageDeleteAction { client: [Circular *1] },
    MessageDeleteBulk: MessageDeleteBulkAction { client: [Circular *1] },
    MessageReactionAdd: MessageReactionAdd { client: [Circular *1] },
    MessageReactionRemove: MessageReactionRemove { client: [Circular *1] },
    MessageReactionRemoveAll: MessageReactionRemoveAll { client: [Circular *1] },
    MessageReactionRemoveEmoji: MessageReactionRemoveEmoji { client: [Circular *1] },
    MessageUpdate: MessageUpdateAction { client: [Circular *1] },
    PresenceUpdate: PresenceUpdateAction { client: [Circular *1] },
    StageInstanceCreate: StageInstanceCreateAction { client: [Circular *1] },
    StageInstanceDelete: StageInstanceDeleteAction { client: [Circular *1] },
    StageInstanceUpdate: StageInstanceUpdateAction { client: [Circular *1] },
    ThreadCreate: ThreadCreateAction { client: [Circular *1] },
    ThreadDelete: ThreadDeleteAction { client: [Circular *1] },
    ThreadListSync: ThreadListSyncAction { client: [Circular *1] },
    ThreadMemberUpdate: ThreadMemberUpdateAction { client: [Circular *1] },
    ThreadMembersUpdate: ThreadMembersUpdateAction { client: [Circular *1] },
    TypingStart: TypingStart { client: [Circular *1] },
    UserUpdate: UserUpdateAction { client: [Circular *1] },
    VoiceStateUpdate: VoiceStateUpdate { client: [Circular *1] },
    WebhooksUpdate: WebhooksUpdate { client: [Circular *1] }
  },
  voice: ClientVoiceManager { adapters: Map(0) {} },
  shard: null,
  users: UserManager {},
  guilds: GuildManager {},
  channels: ChannelManager {},
  sweepers: Sweepers {
    options: {},
    intervals: {
      applicationCommands: null,
      bans: null,
      emojis: null,
      invites: null,
      guildMembers: null,
      messages: null,
      presences: null,
      reactions: null,
      stageInstances: null,
      stickers: null,
      threadMembers: null,
      threads: null,
      users: null,
      voiceStates: null
    }
  },
  presence: ClientPresence {
    userId: null,
    guild: null,
    status: 'online',
    activities: [],
    clientStatus: null
  },
  user: ClientUser {
    id: '894060283373449317',
    bot: true,
    system: false,
    flags: UserFlags { bitfield: 0 },
    username: 'Potato bot',
    discriminator: '1627',
    avatar: 'f169fbb08deede7893419429cf1bc9ab',
    banner: null,
    accentColor: null,
    verified: true,
    mfaEnabled: false
  },
  application: ClientApplication {
    id: '894060283373449317',
    name: null,
    description: null,
    icon: null,
    flags: ApplicationFlags { bitfield: 303104 },
    cover: null,
    rpcOrigins: [],
    botRequireCodeGrant: null,
    botPublic: null,
    owner: null,
    commands: ApplicationCommandManager {
      permissions: [ApplicationCommandPermissionsManager]
    }
  },
  readyAt: 2022-02-23T07:39:23.549Z,
  eco: EconomyManager {
    noNegative: undefined,
    prefix: undefined,
    adapter: { name: 'sqlite', options: undefined },
    db: SqliteManager {
      table: 'money',
      filename: 'eco',
      sqliteOptions: {},
      hasInit: true,
      db: [Database]
    }
  },
  db: table {
    tableName: 'inv',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  config: {
    token: 'ODk0MDYwMjgzMzczNDQ5MzE3.YVkghg.ik3wBzG3rjGWnsQ_o3S5edt12fM',
    prefix: 'potat',
    admins: [
      '709950767670493275',
      '879207914005479514',
      '829171854681964604'
    ],
    debug: true,
    countChannel: '',
    opt: {
      DJ: [Object],
      maxVol: 250,
      loopMessage: false,
      discordPlayer: [Object]
    }
  },
  shop: { laptop: { cost: 1000 }, potato: { cost: 1 } },
  job: table {
    tableName: 'job',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  commands: Collection(50) [Map] {
    'addmoney' => {
      name: 'addmoney',
      aliases: [Array],
      usage: 'addmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'bal' => {
      name: 'bal',
      aliases: [Array],
      usage: 'bal',
      execute: [AsyncFunction: execute]
    },
    'beg' => {
      name: 'beg',
      aliases: [],
      usage: 'beg',
      execute: [AsyncFunction: execute]
    },
    'buy' => {
      name: 'buy',
      aliases: [],
      usage: 'buy <item>',
      execute: [AsyncFunction: execute]
    },
    'daily' => {
      name: 'daily',
      aliases: [],
      usage: 'daily',
      execute: [AsyncFunction: execute]
    },
    'inventory' => {
      name: 'inventory',
      aliases: [Array],
      usage: 'inv',
      execute: [AsyncFunction: execute]
    },
    'lb' => {
      name: 'lb',
      aliases: [Array],
      usage: 'leaderboard',
      execute: [AsyncFunction: execute]
    },
    'search' => {
      name: 'search',
      aliases: [],
      utilisation: 'search [song name]',
      execute: [AsyncFunction: execute]
    },
    'setmoney' => {
      name: 'setmoney',
      usage: 'setmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'transfer' => {
      name: 'transfer',
      aliases: [Array],
      usage: 'transfer <member> <amount>',
      execute: [AsyncFunction: execute]
    },
    'weekly' => {
      name: 'weekly',
      usage: 'weekly',
      execute: [AsyncFunction: execute]
    },
    'work' => {
      name: 'work',
      aliases: [],
      usage: 'work',
      cooldown: 3600,
      execute: [Function: execute]
    },
    'say' => {
      name: 'say',
      aliases: [Array],
      description: 'make the bot repeat what you said',
      execute: [Function: execute]
    },
    'sayembed' => {
      name: 'sayembed',
      description: 'say something embed',
      usage: '<title, description>',
      execute: [Function: execute]
    },
    'train' => {
      name: 'train',
      description: 'random thing idk',
      execute: [Function: execute]
    },
    'fasttype' => {
      name: 'fasttype',
      description: 'type fast',
      execute: [AsyncFunction: execute]
    },
    'games' => {
      name: 'games',
      description: 'play some games',
      execute: [Function: execute]
    },
    'settings' => { name: 'settings', execute: [Function: execute] },
    'slots' => {
      name: 'slots',
      description: 'play some games',
      execute: [Function: execute]
    },
    'tictactoe' => {
      name: 'tictactoe',
      description: 'play tictactoe!',
      expectedArgs: '<opponent>',
      minArgs: 1,
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'addfakemember' => { name: 'addfakemember', execute: [Function: execute] },
    'change_status' => { name: 'change_status', execute: [Function: execute] },
    'dev' => {
      name: 'dev',
      description: 'be a dev by completing a form!',
      execute: [AsyncFunction: execute]
    },
    'help' => {
      name: 'help',
      aliases: [Array],
      description: 'List all of my commands or info about a specific command.',
      usage: '[command name]',
      cooldown: 5,
      execute: [Function: execute]
    },
    'ping' => {
      name: 'ping',
      description: 'Ping!',
      execute: [Function: execute]
    },
    'poll' => {
      name: 'poll',
      description: 'poll',
      usage: 'Title + Option 1 + Option 2 + Option 3 + etc',
      execute: [Function: execute]
    },
    'server' => {
      name: 'server',
      aliases: [Array],
      description: 'servers info...',
      cooldown: 5,
      guildOnly: true,
      args: false,
      execute: [Function: execute]
    },
    'suggest' => {
      name: 'suggest',
      description: 'suggest',
      usage: '<suggestion>',
      execute: [Function: execute]
    },
    'ban' => {
      name: 'ban',
      description: 'This command bans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'giverole' => {
      name: 'giverole',
      description: 'give someone a role',
      permission: 'MANAGE_MEMBERS',
      guildOnly: true,
      execute: [Function: execute]
    },
    'kick' => {
      name: 'kick',
      permissions: 'KICK_MEMBERS',
      description: 'this command kicks a member',
      execute: [Function: execute]
    },
    'mute' => {
      name: 'mute',
      description: 'mute someone',
      permissions: 'MANAGE_MESSAGES',
      guildOnly: true,
      execute: [Function: execute]
    },
    'reload' => {
      name: 'reload',
      description: 'Reloads a command',
      args: true,
      execute: [Function: execute]
    },
    'removerole' => {
      name: 'removerole',
      description: "remove someone's role",
      execute: [Function: execute]
    },
    'unban' => {
      name: 'unban',
      description: 'This command unbans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'back' => { name: 'back', aliases: [], execute: [AsyncFunction: execute] },
    'clear' => { name: 'clear', aliases: [], execute: [AsyncFunction: execute] },
    'filter' => {
      name: 'filter',
      aliases: [],
      usage: 'filter [filter name]',
      execute: [AsyncFunction: execute]
    },
    'loop' => {
      name: 'loop',
      aliases: [],
      usage: 'loop [song|queue]',
      execute: [Function: execute]
    },
    'nowplaying' => {
      name: 'nowplaying',
      aliases: [Array],
      execute: [Function: execute]
    },
    'pause' => { name: 'pause', aliases: [], execute: [Function: execute] },
    'play' => {
      name: 'play',
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'progress' => {
      name: 'progress',
      aliases: [Array],
      utilisation: 'progress',
      voiceChannel: true,
      execute: [AsyncFunction: execute]
    },
    'queue' => {
      name: 'queue',
      aliases: [Array],
      utilisation: '{prefix}queue',
      voiceChannel: true,
      execute: [Function: execute]
    },
    'remove' => { name: 'remove', aliases: [], execute: [AsyncFunction: execute] },
    'resume' => { name: 'resume', aliases: [], execute: [Function: execute] },
    'save' => { name: 'save', aliases: [], execute: [AsyncFunction: execute] },
    'skip' => { name: 'skip', aliases: [Array], execute: [Function: execute] },
    'stop' => { name: 'stop', aliases: [Array], execute: [Function: execute] },
    'volume' => {
      name: 'volume',
      aliases: [Array],
      utilisation: 'volume [1-250]',
      voiceChannel: true,
      execute: [Function: execute]
    }
  },
  cooldowns: Collection(5) [Map] {
    'ping' => Collection(0) [Map] {},
    'skip' => Collection(0) [Map] {},
    'beg' => Collection(0) [Map] {},
    'play' => Collection(1) [Map] { '709950767670493275' => 1645665238866 },
    'queue' => Collection(0) [Map] {}
  },
  player: Player {
    _events: [Object: null prototype] {
      error: [Function (anonymous)],
      connectionError: [Function (anonymous)],
      trackStart: [Function (anonymous)],
      trackAdd: [Function (anonymous)],
      botDisconnect: [Function (anonymous)],
      channelEmpty: [Function (anonymous)],
      queueEnd: [Function (anonymous)]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    options: {
      autoRegisterExtractor: true,
      ytdlOptions: [Object],
      connectionTimeout: 20000
    },
    queues: Collection(0) [Map] {},
    voiceUtils: VoiceUtils { cache: Collection(0) [Map] {} },
    extractors: Collection(0) [Map] {},
    requiredEvents: [ 'error', 'connectionError' ],
    client: [Circular *1],
    [Symbol(kCapture)]: false
  },
  [Symbol(kCapture)]: false
}
<ref *1> Client {
  _events: [Object: null prototype] {
    shardDisconnect: [Function (anonymous)],
    voiceStateUpdate: [Function: bound _handleVoiceState],
    guildMemberAdd: [Function (anonymous)],
    message: [Function (anonymous)],
    ready: [Function (anonymous)]
  },
  _eventsCount: 5,
  _maxListeners: undefined,
  options: {
    intents: 643,
    waitGuildTimeout: 15000,
    shardCount: 1,
    makeCache: [Function (anonymous)],
    messageCacheLifetime: 0,
    messageSweepInterval: 0,
    invalidRequestWarningInterval: 0,
    partials: [],
    restWsBridgeTimeout: 5000,
    restRequestTimeout: 15000,
    restGlobalRateLimit: 0,
    retryLimit: 1,
    restTimeOffset: 500,
    restSweepInterval: 60,
    failIfNotExists: true,
    userAgentSuffix: [],
    presence: { status: 'online', user: [Object] },
    sweepers: {},
    ws: {
      large_threshold: 50,
      compress: false,
      properties: [Object],
      version: 9,
      presence: [Object]
    },
    http: {
      agent: {},
      version: 9,
      api: 'https://discord.com/api',
      cdn: 'https://cdn.discordapp.com',
      invite: 'https://discord.gg',
      template: 'https://discord.new',
      scheduledEvent: 'https://discord.com/events'
    },
    shards: [ 0 ]
  },
  rest: RESTManager {
    client: [Circular *1],
    handlers: Collection(0) [Map] {},
    versioned: true,
    globalLimit: Infinity,
    globalRemaining: Infinity,
    globalReset: 1645665253399,
    globalDelay: null,
    sweepInterval: Timeout {
      _idleTimeout: 60000,
      _idlePrev: [TimersList],
      _idleNext: [Timeout],
      _idleStart: 63457340,
      _onTimeout: [Function (anonymous)],
      _timerArgs: undefined,
      _repeat: 60000,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(kHasPrimitive)]: false,
      [Symbol(asyncId)]: 12,
      [Symbol(triggerId)]: 1
    }
  },
  _cleanups: Set(50) {
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ]
  },
  _finalizers: FinalizationRegistry {},
  ws: WebSocketManager {
    _events: [Object: null prototype] {},
    _eventsCount: 0,
    _maxListeners: undefined,
    gateway: 'wss://gateway.discord.gg/',
    totalShards: 1,
    shards: Collection(1) [Map] { 0 => [WebSocketShard] },
    status: 0,
    destroyed: false,
    reconnecting: false,
    [Symbol(kCapture)]: false
  },
  actions: ActionsManager {
    client: [Circular *1],
    ChannelCreate: ChannelCreateAction { client: [Circular *1] },
    ChannelDelete: ChannelDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    ChannelUpdate: ChannelUpdateAction { client: [Circular *1] },
    GuildBanAdd: GuildBanAdd { client: [Circular *1] },
    GuildBanRemove: GuildBanRemove { client: [Circular *1] },
    GuildChannelsPositionUpdate: GuildChannelsPositionUpdate { client: [Circular *1] },
    GuildDelete: GuildDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    GuildEmojiCreate: GuildEmojiCreateAction { client: [Circular *1] },
    GuildEmojiDelete: GuildEmojiDeleteAction { client: [Circular *1] },
    GuildEmojiUpdate: GuildEmojiUpdateAction { client: [Circular *1] },
    GuildEmojisUpdate: GuildEmojisUpdateAction { client: [Circular *1] },
    GuildIntegrationsUpdate: GuildIntegrationsUpdate { client: [Circular *1] },
    GuildMemberRemove: GuildMemberRemoveAction { client: [Circular *1] },
    GuildMemberUpdate: GuildMemberUpdateAction { client: [Circular *1] },
    GuildRoleCreate: GuildRoleCreate { client: [Circular *1] },
    GuildRoleDelete: GuildRoleDeleteAction { client: [Circular *1] },
    GuildRoleUpdate: GuildRoleUpdateAction { client: [Circular *1] },
    GuildRolesPositionUpdate: GuildRolesPositionUpdate { client: [Circular *1] },
    GuildScheduledEventCreate: GuildScheduledEventCreateAction { client: [Circular *1] },
    GuildScheduledEventDelete: GuildScheduledEventDeleteAction { client: [Circular *1] },
    GuildScheduledEventUpdate: GuildScheduledEventUpdateAction { client: [Circular *1] },
    GuildScheduledEventUserAdd: GuildScheduledEventUserAddAction { client: [Circular *1] },
    GuildScheduledEventUserRemove: GuildScheduledEventUserRemoveAction { client: [Circular *1] },
    GuildStickerCreate: GuildStickerCreateAction { client: [Circular *1] },
    GuildStickerDelete: GuildStickerDeleteAction { client: [Circular *1] },
    GuildStickerUpdate: GuildStickerUpdateAction { client: [Circular *1] },
    GuildStickersUpdate: GuildStickersUpdateAction { client: [Circular *1] },
    GuildUpdate: GuildUpdateAction { client: [Circular *1] },
    InteractionCreate: InteractionCreateAction { client: [Circular *1] },
    InviteCreate: InviteCreateAction { client: [Circular *1] },
    InviteDelete: InviteDeleteAction { client: [Circular *1] },
    MessageCreate: MessageCreateAction { client: [Circular *1] },
    MessageDelete: MessageDeleteAction { client: [Circular *1] },
    MessageDeleteBulk: MessageDeleteBulkAction { client: [Circular *1] },
    MessageReactionAdd: MessageReactionAdd { client: [Circular *1] },
    MessageReactionRemove: MessageReactionRemove { client: [Circular *1] },
    MessageReactionRemoveAll: MessageReactionRemoveAll { client: [Circular *1] },
    MessageReactionRemoveEmoji: MessageReactionRemoveEmoji { client: [Circular *1] },
    MessageUpdate: MessageUpdateAction { client: [Circular *1] },
    PresenceUpdate: PresenceUpdateAction { client: [Circular *1] },
    StageInstanceCreate: StageInstanceCreateAction { client: [Circular *1] },
    StageInstanceDelete: StageInstanceDeleteAction { client: [Circular *1] },
    StageInstanceUpdate: StageInstanceUpdateAction { client: [Circular *1] },
    ThreadCreate: ThreadCreateAction { client: [Circular *1] },
    ThreadDelete: ThreadDeleteAction { client: [Circular *1] },
    ThreadListSync: ThreadListSyncAction { client: [Circular *1] },
    ThreadMemberUpdate: ThreadMemberUpdateAction { client: [Circular *1] },
    ThreadMembersUpdate: ThreadMembersUpdateAction { client: [Circular *1] },
    TypingStart: TypingStart { client: [Circular *1] },
    UserUpdate: UserUpdateAction { client: [Circular *1] },
    VoiceStateUpdate: VoiceStateUpdate { client: [Circular *1] },
    WebhooksUpdate: WebhooksUpdate { client: [Circular *1] }
  },
  voice: ClientVoiceManager {
    adapters: Map(1) { '893532780946919536' => [Object] }
  },
  shard: null,
  users: UserManager {},
  guilds: GuildManager {},
  channels: ChannelManager {},
  sweepers: Sweepers {
    options: {},
    intervals: {
      applicationCommands: null,
      bans: null,
      emojis: null,
      invites: null,
      guildMembers: null,
      messages: null,
      presences: null,
      reactions: null,
      stageInstances: null,
      stickers: null,
      threadMembers: null,
      threads: null,
      users: null,
      voiceStates: null
    }
  },
  presence: ClientPresence {
    userId: null,
    guild: null,
    status: 'online',
    activities: [],
    clientStatus: null
  },
  user: ClientUser {
    id: '894060283373449317',
    bot: true,
    system: false,
    flags: UserFlags { bitfield: 0 },
    username: 'Potato bot',
    discriminator: '1627',
    avatar: 'f169fbb08deede7893419429cf1bc9ab',
    banner: null,
    accentColor: null,
    verified: true,
    mfaEnabled: false
  },
  application: ClientApplication {
    id: '894060283373449317',
    name: null,
    description: null,
    icon: null,
    flags: ApplicationFlags { bitfield: 303104 },
    cover: null,
    rpcOrigins: [],
    botRequireCodeGrant: null,
    botPublic: null,
    owner: null,
    commands: ApplicationCommandManager {
      permissions: [ApplicationCommandPermissionsManager]
    }
  },
  readyAt: 2022-02-23T07:39:23.549Z,
  eco: EconomyManager {
    noNegative: undefined,
    prefix: undefined,
    adapter: { name: 'sqlite', options: undefined },
    db: SqliteManager {
      table: 'money',
      filename: 'eco',
      sqliteOptions: {},
      hasInit: true,
      db: [Database]
    }
  },
  db: table {
    tableName: 'inv',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  config: {
    token: 'ODk0MDYwMjgzMzczNDQ5MzE3.YVkghg.ik3wBzG3rjGWnsQ_o3S5edt12fM',
    prefix: 'potat',
    admins: [
      '709950767670493275',
      '879207914005479514',
      '829171854681964604'
    ],
    debug: true,
    countChannel: '',
    opt: {
      DJ: [Object],
      maxVol: 250,
      loopMessage: false,
      discordPlayer: [Object]
    }
  },
  shop: { laptop: { cost: 1000 }, potato: { cost: 1 } },
  job: table {
    tableName: 'job',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  commands: Collection(50) [Map] {
    'addmoney' => {
      name: 'addmoney',
      aliases: [Array],
      usage: 'addmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'bal' => {
      name: 'bal',
      aliases: [Array],
      usage: 'bal',
      execute: [AsyncFunction: execute]
    },
    'beg' => {
      name: 'beg',
      aliases: [],
      usage: 'beg',
      execute: [AsyncFunction: execute]
    },
    'buy' => {
      name: 'buy',
      aliases: [],
      usage: 'buy <item>',
      execute: [AsyncFunction: execute]
    },
    'daily' => {
      name: 'daily',
      aliases: [],
      usage: 'daily',
      execute: [AsyncFunction: execute]
    },
    'inventory' => {
      name: 'inventory',
      aliases: [Array],
      usage: 'inv',
      execute: [AsyncFunction: execute]
    },
    'lb' => {
      name: 'lb',
      aliases: [Array],
      usage: 'leaderboard',
      execute: [AsyncFunction: execute]
    },
    'search' => {
      name: 'search',
      aliases: [],
      utilisation: 'search [song name]',
      execute: [AsyncFunction: execute]
    },
    'setmoney' => {
      name: 'setmoney',
      usage: 'setmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'transfer' => {
      name: 'transfer',
      aliases: [Array],
      usage: 'transfer <member> <amount>',
      execute: [AsyncFunction: execute]
    },
    'weekly' => {
      name: 'weekly',
      usage: 'weekly',
      execute: [AsyncFunction: execute]
    },
    'work' => {
      name: 'work',
      aliases: [],
      usage: 'work',
      cooldown: 3600,
      execute: [Function: execute]
    },
    'say' => {
      name: 'say',
      aliases: [Array],
      description: 'make the bot repeat what you said',
      execute: [Function: execute]
    },
    'sayembed' => {
      name: 'sayembed',
      description: 'say something embed',
      usage: '<title, description>',
      execute: [Function: execute]
    },
    'train' => {
      name: 'train',
      description: 'random thing idk',
      execute: [Function: execute]
    },
    'fasttype' => {
      name: 'fasttype',
      description: 'type fast',
      execute: [AsyncFunction: execute]
    },
    'games' => {
      name: 'games',
      description: 'play some games',
      execute: [Function: execute]
    },
    'settings' => { name: 'settings', execute: [Function: execute] },
    'slots' => {
      name: 'slots',
      description: 'play some games',
      execute: [Function: execute]
    },
    'tictactoe' => {
      name: 'tictactoe',
      description: 'play tictactoe!',
      expectedArgs: '<opponent>',
      minArgs: 1,
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'addfakemember' => { name: 'addfakemember', execute: [Function: execute] },
    'change_status' => { name: 'change_status', execute: [Function: execute] },
    'dev' => {
      name: 'dev',
      description: 'be a dev by completing a form!',
      execute: [AsyncFunction: execute]
    },
    'help' => {
      name: 'help',
      aliases: [Array],
      description: 'List all of my commands or info about a specific command.',
      usage: '[command name]',
      cooldown: 5,
      execute: [Function: execute]
    },
    'ping' => {
      name: 'ping',
      description: 'Ping!',
      execute: [Function: execute]
    },
    'poll' => {
      name: 'poll',
      description: 'poll',
      usage: 'Title + Option 1 + Option 2 + Option 3 + etc',
      execute: [Function: execute]
    },
    'server' => {
      name: 'server',
      aliases: [Array],
      description: 'servers info...',
      cooldown: 5,
      guildOnly: true,
      args: false,
      execute: [Function: execute]
    },
    'suggest' => {
      name: 'suggest',
      description: 'suggest',
      usage: '<suggestion>',
      execute: [Function: execute]
    },
    'ban' => {
      name: 'ban',
      description: 'This command bans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'giverole' => {
      name: 'giverole',
      description: 'give someone a role',
      permission: 'MANAGE_MEMBERS',
      guildOnly: true,
      execute: [Function: execute]
    },
    'kick' => {
      name: 'kick',
      permissions: 'KICK_MEMBERS',
      description: 'this command kicks a member',
      execute: [Function: execute]
    },
    'mute' => {
      name: 'mute',
      description: 'mute someone',
      permissions: 'MANAGE_MESSAGES',
      guildOnly: true,
      execute: [Function: execute]
    },
    'reload' => {
      name: 'reload',
      description: 'Reloads a command',
      args: true,
      execute: [Function: execute]
    },
    'removerole' => {
      name: 'removerole',
      description: "remove someone's role",
      execute: [Function: execute]
    },
    'unban' => {
      name: 'unban',
      description: 'This command unbans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'back' => { name: 'back', aliases: [], execute: [AsyncFunction: execute] },
    'clear' => { name: 'clear', aliases: [], execute: [AsyncFunction: execute] },
    'filter' => {
      name: 'filter',
      aliases: [],
      usage: 'filter [filter name]',
      execute: [AsyncFunction: execute]
    },
    'loop' => {
      name: 'loop',
      aliases: [],
      usage: 'loop [song|queue]',
      execute: [Function: execute]
    },
    'nowplaying' => {
      name: 'nowplaying',
      aliases: [Array],
      execute: [Function: execute]
    },
    'pause' => { name: 'pause', aliases: [], execute: [Function: execute] },
    'play' => {
      name: 'play',
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'progress' => {
      name: 'progress',
      aliases: [Array],
      utilisation: 'progress',
      voiceChannel: true,
      execute: [AsyncFunction: execute]
    },
    'queue' => {
      name: 'queue',
      aliases: [Array],
      utilisation: '{prefix}queue',
      voiceChannel: true,
      execute: [Function: execute]
    },
    'remove' => { name: 'remove', aliases: [], execute: [AsyncFunction: execute] },
    'resume' => { name: 'resume', aliases: [], execute: [Function: execute] },
    'save' => { name: 'save', aliases: [], execute: [AsyncFunction: execute] },
    'skip' => { name: 'skip', aliases: [Array], execute: [Function: execute] },
    'stop' => { name: 'stop', aliases: [Array], execute: [Function: execute] },
    'volume' => {
      name: 'volume',
      aliases: [Array],
      utilisation: 'volume [1-250]',
      voiceChannel: true,
      execute: [Function: execute]
    }
  },
  cooldowns: Collection(5) [Map] {
    'ping' => Collection(0) [Map] {},
    'skip' => Collection(0) [Map] {},
    'beg' => Collection(0) [Map] {},
    'play' => Collection(1) [Map] { '310497709754810368' => 1645665422601 },
    'queue' => Collection(0) [Map] {}
  },
  player: Player {
    _events: [Object: null prototype] {
      error: [Function (anonymous)],
      connectionError: [Function (anonymous)],
      trackStart: [Function (anonymous)],
      trackAdd: [Function (anonymous)],
      botDisconnect: [Function (anonymous)],
      channelEmpty: [Function (anonymous)],
      queueEnd: [Function (anonymous)]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    options: {
      autoRegisterExtractor: true,
      ytdlOptions: [Object],
      connectionTimeout: 20000
    },
    queues: Collection(1) [Map] { '893532780946919536' => [Queue] },
    voiceUtils: VoiceUtils { cache: [Collection [Map]] },
    extractors: Collection(0) [Map] {},
    requiredEvents: [ 'error', 'connectionError' ],
    client: [Circular *1],
    [Symbol(kCapture)]: false
  },
  [Symbol(kCapture)]: false
}
Ready!
<ref *1> Client {
  _events: [Object: null prototype] {
    shardDisconnect: [Function (anonymous)],
    voiceStateUpdate: [Function: bound _handleVoiceState],
    guildMemberAdd: [Function (anonymous)],
    message: [Function (anonymous)],
    ready: [Function (anonymous)]
  },
  _eventsCount: 5,
  _maxListeners: undefined,
  options: {
    intents: 643,
    waitGuildTimeout: 15000,
    shardCount: 1,
    makeCache: [Function (anonymous)],
    messageCacheLifetime: 0,
    messageSweepInterval: 0,
    invalidRequestWarningInterval: 0,
    partials: [],
    restWsBridgeTimeout: 5000,
    restRequestTimeout: 15000,
    restGlobalRateLimit: 0,
    retryLimit: 1,
    restTimeOffset: 500,
    restSweepInterval: 60,
    failIfNotExists: true,
    userAgentSuffix: [],
    presence: { status: 'online', user: [Object] },
    sweepers: {},
    ws: {
      large_threshold: 50,
      compress: false,
      properties: [Object],
      version: 9,
      presence: [Object]
    },
    http: {
      agent: {},
      version: 9,
      api: 'https://discord.com/api',
      cdn: 'https://cdn.discordapp.com',
      invite: 'https://discord.gg',
      template: 'https://discord.new',
      scheduledEvent: 'https://discord.com/events'
    },
    shards: [ 0 ]
  },
  rest: RESTManager {
    client: [Circular *1],
    handlers: Collection(3) [Map] {
      '/gateway/bot' => [RequestHandler],
      '/users/@me' => [RequestHandler],
      '/channels/894764535892819988/messages' => [RequestHandler]
    },
    versioned: true,
    globalLimit: Infinity,
    globalRemaining: Infinity,
    globalReset: 1645666588265,
    globalDelay: null,
    sweepInterval: Timeout {
      _idleTimeout: 60000,
      _idlePrev: [Timeout],
      _idleNext: [TimersList],
      _idleStart: 11850,
      _onTimeout: [Function (anonymous)],
      _timerArgs: undefined,
      _repeat: 60000,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(kHasPrimitive)]: false,
      [Symbol(asyncId)]: 12,
      [Symbol(triggerId)]: 1
    }
  },
  _cleanups: Set(50) {
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ],
    [Function: bound ]
  },
  _finalizers: FinalizationRegistry {},
  ws: WebSocketManager {
    _events: [Object: null prototype] {},
    _eventsCount: 0,
    _maxListeners: undefined,
    gateway: 'wss://gateway.discord.gg/',
    totalShards: 1,
    shards: Collection(1) [Map] { 0 => [WebSocketShard] },
    status: 0,
    destroyed: false,
    reconnecting: false,
    [Symbol(kCapture)]: false
  },
  actions: ActionsManager {
    client: [Circular *1],
    ChannelCreate: ChannelCreateAction { client: [Circular *1] },
    ChannelDelete: ChannelDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    ChannelUpdate: ChannelUpdateAction { client: [Circular *1] },
    GuildBanAdd: GuildBanAdd { client: [Circular *1] },
    GuildBanRemove: GuildBanRemove { client: [Circular *1] },
    GuildChannelsPositionUpdate: GuildChannelsPositionUpdate { client: [Circular *1] },
    GuildDelete: GuildDeleteAction { client: [Circular *1], deleted: Map(0) {} },
    GuildEmojiCreate: GuildEmojiCreateAction { client: [Circular *1] },
    GuildEmojiDelete: GuildEmojiDeleteAction { client: [Circular *1] },
    GuildEmojiUpdate: GuildEmojiUpdateAction { client: [Circular *1] },
    GuildEmojisUpdate: GuildEmojisUpdateAction { client: [Circular *1] },
    GuildIntegrationsUpdate: GuildIntegrationsUpdate { client: [Circular *1] },
    GuildMemberRemove: GuildMemberRemoveAction { client: [Circular *1] },
    GuildMemberUpdate: GuildMemberUpdateAction { client: [Circular *1] },
    GuildRoleCreate: GuildRoleCreate { client: [Circular *1] },
    GuildRoleDelete: GuildRoleDeleteAction { client: [Circular *1] },
    GuildRoleUpdate: GuildRoleUpdateAction { client: [Circular *1] },
    GuildRolesPositionUpdate: GuildRolesPositionUpdate { client: [Circular *1] },
    GuildScheduledEventCreate: GuildScheduledEventCreateAction { client: [Circular *1] },
    GuildScheduledEventDelete: GuildScheduledEventDeleteAction { client: [Circular *1] },
    GuildScheduledEventUpdate: GuildScheduledEventUpdateAction { client: [Circular *1] },
    GuildScheduledEventUserAdd: GuildScheduledEventUserAddAction { client: [Circular *1] },
    GuildScheduledEventUserRemove: GuildScheduledEventUserRemoveAction { client: [Circular *1] },
    GuildStickerCreate: GuildStickerCreateAction { client: [Circular *1] },
    GuildStickerDelete: GuildStickerDeleteAction { client: [Circular *1] },
    GuildStickerUpdate: GuildStickerUpdateAction { client: [Circular *1] },
    GuildStickersUpdate: GuildStickersUpdateAction { client: [Circular *1] },
    GuildUpdate: GuildUpdateAction { client: [Circular *1] },
    InteractionCreate: InteractionCreateAction { client: [Circular *1] },
    InviteCreate: InviteCreateAction { client: [Circular *1] },
    InviteDelete: InviteDeleteAction { client: [Circular *1] },
    MessageCreate: MessageCreateAction { client: [Circular *1] },
    MessageDelete: MessageDeleteAction { client: [Circular *1] },
    MessageDeleteBulk: MessageDeleteBulkAction { client: [Circular *1] },
    MessageReactionAdd: MessageReactionAdd { client: [Circular *1] },
    MessageReactionRemove: MessageReactionRemove { client: [Circular *1] },
    MessageReactionRemoveAll: MessageReactionRemoveAll { client: [Circular *1] },
    MessageReactionRemoveEmoji: MessageReactionRemoveEmoji { client: [Circular *1] },
    MessageUpdate: MessageUpdateAction { client: [Circular *1] },
    PresenceUpdate: PresenceUpdateAction { client: [Circular *1] },
    StageInstanceCreate: StageInstanceCreateAction { client: [Circular *1] },
    StageInstanceDelete: StageInstanceDeleteAction { client: [Circular *1] },
    StageInstanceUpdate: StageInstanceUpdateAction { client: [Circular *1] },
    ThreadCreate: ThreadCreateAction { client: [Circular *1] },
    ThreadDelete: ThreadDeleteAction { client: [Circular *1] },
    ThreadListSync: ThreadListSyncAction { client: [Circular *1] },
    ThreadMemberUpdate: ThreadMemberUpdateAction { client: [Circular *1] },
    ThreadMembersUpdate: ThreadMembersUpdateAction { client: [Circular *1] },
    TypingStart: TypingStart { client: [Circular *1] },
    UserUpdate: UserUpdateAction { client: [Circular *1] },
    VoiceStateUpdate: VoiceStateUpdate { client: [Circular *1] },
    WebhooksUpdate: WebhooksUpdate { client: [Circular *1] }
  },
  voice: ClientVoiceManager { adapters: Map(0) {} },
  shard: null,
  users: UserManager {},
  guilds: GuildManager {},
  channels: ChannelManager {},
  sweepers: Sweepers {
    options: {},
    intervals: {
      applicationCommands: null,
      bans: null,
      emojis: null,
      invites: null,
      guildMembers: null,
      messages: null,
      presences: null,
      reactions: null,
      stageInstances: null,
      stickers: null,
      threadMembers: null,
      threads: null,
      users: null,
      voiceStates: null
    }
  },
  presence: ClientPresence {
    userId: null,
    guild: null,
    status: 'online',
    activities: [],
    clientStatus: null
  },
  user: ClientUser {
    id: '894060283373449317',
    bot: true,
    system: false,
    flags: UserFlags { bitfield: 0 },
    username: 'Potato bot',
    discriminator: '1627',
    avatar: 'f169fbb08deede7893419429cf1bc9ab',
    banner: null,
    accentColor: null,
    verified: true,
    mfaEnabled: false
  },
  application: ClientApplication {
    id: '894060283373449317',
    name: null,
    description: null,
    icon: null,
    flags: ApplicationFlags { bitfield: 303104 },
    cover: null,
    rpcOrigins: [],
    botRequireCodeGrant: null,
    botPublic: null,
    owner: null,
    commands: ApplicationCommandManager {
      permissions: [ApplicationCommandPermissionsManager]
    }
  },
  readyAt: 2022-02-24T01:36:11.962Z,
  eco: EconomyManager {
    noNegative: undefined,
    prefix: undefined,
    adapter: { name: 'sqlite', options: undefined },
    db: SqliteManager {
      table: 'money',
      filename: 'eco',
      sqliteOptions: {},
      hasInit: true,
      db: [Database]
    }
  },
  db: table {
    tableName: 'inv',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  config: {
    token: 'ODk0MDYwMjgzMzczNDQ5MzE3.YVkghg.ik3wBzG3rjGWnsQ_o3S5edt12fM',
    prefix: 'potat',
    admins: [
      '709950767670493275',
      '879207914005479514',
      '829171854681964604'
    ],
    debug: true,
    countChannel: '',
    opt: {
      DJ: [Object],
      maxVol: 250,
      loopMessage: false,
      discordPlayer: [Object]
    }
  },
  shop: { laptop: { cost: 1000 }, potato: { cost: 1 } },
  job: table {
    tableName: 'job',
    fetch: [Function (anonymous)],
    get: [Function (anonymous)],
    set: [Function (anonymous)],
    add: [Function (anonymous)],
    subtract: [Function (anonymous)],
    push: [Function (anonymous)],
    delete: [Function (anonymous)],
    has: [Function (anonymous)],
    includes: [Function (anonymous)],
    fetchAll: [Function (anonymous)],
    all: [Function (anonymous)]
  },
  commands: Collection(50) [Map] {
    'addmoney' => {
      name: 'addmoney',
      aliases: [Array],
      usage: 'addmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'bal' => {
      name: 'bal',
      aliases: [Array],
      usage: 'bal',
      execute: [AsyncFunction: execute]
    },
    'beg' => {
      name: 'beg',
      aliases: [],
      usage: 'beg',
      execute: [AsyncFunction: execute]
    },
    'buy' => {
      name: 'buy',
      aliases: [],
      usage: 'buy <item>',
      execute: [AsyncFunction: execute]
    },
    'daily' => {
      name: 'daily',
      aliases: [],
      usage: 'daily',
      execute: [AsyncFunction: execute]
    },
    'inventory' => {
      name: 'inventory',
      aliases: [Array],
      usage: 'inv',
      execute: [AsyncFunction: execute]
    },
    'lb' => {
      name: 'lb',
      aliases: [Array],
      usage: 'leaderboard',
      execute: [AsyncFunction: execute]
    },
    'search' => {
      name: 'search',
      aliases: [],
      utilisation: 'search [song name]',
      execute: [AsyncFunction: execute]
    },
    'setmoney' => {
      name: 'setmoney',
      usage: 'setmoney @user <amount>',
      execute: [AsyncFunction: execute]
    },
    'transfer' => {
      name: 'transfer',
      aliases: [Array],
      usage: 'transfer <member> <amount>',
      execute: [AsyncFunction: execute]
    },
    'weekly' => {
      name: 'weekly',
      usage: 'weekly',
      execute: [AsyncFunction: execute]
    },
    'work' => {
      name: 'work',
      aliases: [],
      usage: 'work',
      cooldown: 3600,
      execute: [Function: execute]
    },
    'say' => {
      name: 'say',
      aliases: [Array],
      description: 'make the bot repeat what you said',
      execute: [Function: execute]
    },
    'sayembed' => {
      name: 'sayembed',
      description: 'say something embed',
      usage: '<title, description>',
      execute: [Function: execute]
    },
    'train' => {
      name: 'train',
      description: 'random thing idk',
      execute: [Function: execute]
    },
    'fasttype' => {
      name: 'fasttype',
      description: 'type fast',
      execute: [AsyncFunction: execute]
    },
    'games' => {
      name: 'games',
      description: 'play some games',
      execute: [Function: execute]
    },
    'settings' => { name: 'settings', execute: [Function: execute] },
    'slots' => {
      name: 'slots',
      description: 'play some games',
      execute: [Function: execute]
    },
    'tictactoe' => {
      name: 'tictactoe',
      description: 'play tictactoe!',
      expectedArgs: '<opponent>',
      minArgs: 1,
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'addfakemember' => { name: 'addfakemember', execute: [Function: execute] },
    'change_status' => { name: 'change_status', execute: [Function: execute] },
    'dev' => {
      name: 'dev',
      description: 'be a dev by completing a form!',
      execute: [AsyncFunction: execute]
    },
    'help' => {
      name: 'help',
      aliases: [Array],
      description: 'List all of my commands or info about a specific command.',
      usage: '[command name]',
      cooldown: 5,
      execute: [Function: execute]
    },
    'ping' => {
      name: 'ping',
      description: 'Ping!',
      execute: [Function: execute]
    },
    'poll' => {
      name: 'poll',
      description: 'poll',
      usage: 'Title + Option 1 + Option 2 + Option 3 + etc',
      execute: [Function: execute]
    },
    'server' => {
      name: 'server',
      aliases: [Array],
      description: 'servers info...',
      cooldown: 5,
      guildOnly: true,
      args: false,
      execute: [Function: execute]
    },
    'suggest' => {
      name: 'suggest',
      description: 'suggest',
      usage: '<suggestion>',
      execute: [Function: execute]
    },
    'ban' => {
      name: 'ban',
      description: 'This command bans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'giverole' => {
      name: 'giverole',
      description: 'give someone a role',
      permission: 'MANAGE_MEMBERS',
      guildOnly: true,
      execute: [Function: execute]
    },
    'kick' => {
      name: 'kick',
      permissions: 'KICK_MEMBERS',
      description: 'this command kicks a member',
      execute: [Function: execute]
    },
    'mute' => {
      name: 'mute',
      description: 'mute someone',
      permissions: 'MANAGE_MESSAGES',
      guildOnly: true,
      execute: [Function: execute]
    },
    'reload' => {
      name: 'reload',
      description: 'Reloads a command',
      args: true,
      execute: [Function: execute]
    },
    'removerole' => {
      name: 'removerole',
      description: "remove someone's role",
      execute: [Function: execute]
    },
    'unban' => {
      name: 'unban',
      description: 'This command unbans a member!',
      permissions: 'BAN_MEMBERS',
      execute: [Function: execute]
    },
    'back' => { name: 'back', aliases: [], execute: [AsyncFunction: execute] },
    'clear' => { name: 'clear', aliases: [], execute: [AsyncFunction: execute] },
    'filter' => {
      name: 'filter',
      aliases: [],
      usage: 'filter [filter name]',
      execute: [AsyncFunction: execute]
    },
    'loop' => {
      name: 'loop',
      aliases: [],
      usage: 'loop [song|queue]',
      execute: [Function: execute]
    },
    'nowplaying' => {
      name: 'nowplaying',
      aliases: [Array],
      execute: [Function: execute]
    },
    'pause' => { name: 'pause', aliases: [], execute: [Function: execute] },
    'play' => {
      name: 'play',
      aliases: [Array],
      execute: [AsyncFunction: execute]
    },
    'progress' => {
      name: 'progress',
      aliases: [Array],
      utilisation: 'progress',
      voiceChannel: true,
      execute: [AsyncFunction: execute]
    },
    'queue' => {
      name: 'queue',
      aliases: [Array],
      utilisation: '{prefix}queue',
      voiceChannel: true,
      execute: [Function: execute]
    },
    'remove' => { name: 'remove', aliases: [], execute: [AsyncFunction: execute] },
    'resume' => { name: 'resume', aliases: [], execute: [Function: execute] },
    'save' => { name: 'save', aliases: [], execute: [AsyncFunction: execute] },
    'skip' => { name: 'skip', aliases: [Array], execute: [Function: execute] },
    'stop' => { name: 'stop', aliases: [Array], execute: [Function: execute] },
    'volume' => {
      name: 'volume',
      aliases: [Array],
      utilisation: 'volume [1-250]',
      voiceChannel: true,
      execute: [Function: execute]
    }
  },
  cooldowns: Collection(2) [Map] {
    'queue' => Collection(0) [Map] {},
    'play' => Collection(1) [Map] { '709950767670493275' => 1645666598712 }
  },
  player: Player {
    _events: [Object: null prototype] {
      error: [Function (anonymous)],
      connectionError: [Function (anonymous)],
      trackStart: [Function (anonymous)],
      trackAdd: [Function (anonymous)],
      botDisconnect: [Function (anonymous)],
      channelEmpty: [Function (anonymous)],
      queueEnd: [Function (anonymous)]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    options: {
      autoRegisterExtractor: true,
      ytdlOptions: [Object],
      connectionTimeout: 20000
    },
    queues: Collection(0) [Map] {},
    voiceUtils: VoiceUtils { cache: Collection(0) [Map] {} },
    extractors: Collection(0) [Map] {},
    requiredEvents: [ 'error', 'connectionError' ],
    client: [Circular *1],
    [Symbol(kCapture)]: false
  },
  [Symbol(kCapture)]: false
}
Ready!
Ready!
